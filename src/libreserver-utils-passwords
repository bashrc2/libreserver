#!/bin/bash
#  _    _ _            ___
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|
#
# Password functions
#
# License
# =======
#
# Copyright (C) 2014-2023 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# If this file exists it contains a global password used with
# disk image installs. This simplifies password management for
# deployment at scale
IMAGE_PASSWORD_FILE=/root/login.txt

# Minimum number of characters in a password
MINIMUM_PASSWORD_LENGTH=10

# The default password length used in images
DEFAULT_PASSWORD_LENGTH=20

function wait_for_enough_entropy {
    entropy_ctr=0

    if [ ! -f /proc/sys/kernel/random/entropy_avail ]; then
        echo $'WARN: Cannot read entropy available'
        exit 33
    fi
    while true
    do
        ENTROPY=$(cat /proc/sys/kernel/random/entropy_avail)
        # shellcheck disable=SC2086
        if [ $ENTROPY -gt 255 ]; then
            break
        fi
        sleep 2
        entropy_ctr=$((entropy_ctr + 1))
        if [ $entropy_ctr -gt 10 ]; then
            echo $'Not enough entropy available'
            exit 34
        fi
    done
}

function passwords_select_user {
    SELECTED_USERNAME=

    # shellcheck disable=SC2207
    users_array=($(ls /home))

    delete=(git)
    # shellcheck disable=SC2068
    for del in ${delete[@]}
    do
        # shellcheck disable=SC2206
        users_array=(${users_array[@]/$del})
    done

    i=0
    W=()
    name=()
    # shellcheck disable=SC2068
    for u in ${users_array[@]}
    do
        if [[ $(is_valid_user "$u") == "1" ]]; then
            i=$((i+1))
            W+=("$i" "$u")
            name+=("$u")
        fi
    done

    if [ $i -eq 1 ]; then
        SELECTED_USERNAME="${name[0]}"
    else
        # shellcheck disable=SC2068
        user_index=$(dialog --backtitle $"LibreServer Control Panel" --title $"Select User" --menu $"Select one of the following:" 24 40 17 ${W[@]} 3>&2 2>&1 1>&3)

        # shellcheck disable=SC2181
        if [ $? -eq 0 ]; then
            # shellcheck disable=SC2034
            SELECTED_USERNAME="${name[$((user_index-1))]}"
        fi
    fi
}

function enforce_good_passwords {
    # because humans are generally bad at choosing passwords
    if [[ $(is_completed "${FUNCNAME[0]}") == "1" ]]; then
        return
    fi
    INSTALL_PACKAGES libpam-cracklib

    sed -i 's/password.*requisite.*pam_cracklib.so.*/password        required                       pam_cracklib.so retry=2 dcredit=-1 ucredit=-1 ocredit=0 lcredit=0 minlen=10 reject_username/g' /etc/pam.d/common-password
    mark_completed "${FUNCNAME[0]}"
}

function create_random_string {
    wait_for_enough_entropy
    openssl rand -base64 32 | tr -dc A-Za-z0-9 | head -c "${1}" ; echo -n ''
}

function create_password {
    wait_for_enough_entropy
    newpass=$(diceware)
    if [ "$newpass" ]; then
        echo "$newpass"
    else
        create_random_string "${1}"
    fi
}

# NOTE: deliberately no exit 0
