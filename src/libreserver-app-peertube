#!/bin/bash
#  _    _ _            ___                      
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _ 
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|  
#
# PeerTube server
#
# License
# =======
#
# Copyright (C) 2017-2022 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VARIANTS=''

APP_CATEGORY=media

IN_DEFAULT_INSTALL=0
SHOW_ON_ABOUT=1
NOT_ON_ARM=1
REQUIRES_APP=

PEERTUBE_DOMAIN_NAME=
PEERTUBE_CODE=
PEERTUBE_VERSION='v3.0.1'
PEERTUBE_DOWNLOAD_FILENAME="peertube-${PEERTUBE_VERSION}"
PEERTUBE_DOWNLOAD="https://github.com/Chocobozzz/PeerTube/releases/download/${PEERTUBE_VERSION}/${PEERTUBE_DOWNLOAD_FILENAME}.tar.xz"
PEERTUBE_ONION_PORT=8136
PEERTUBE_PORT=9004
MESH_PEERTUBE_PORT=8500
PEERTUBE_DIR=/etc/peertube
PEERTUBE_CONFIG_FILE=$PEERTUBE_DIR/config/production.yaml
PEERTUBE_YARN_VERSION=1.22.10
PEERTUBE_NPM_VERSION=6.14.11
PEERTUBE_NODEJS_VERSION=12

PEERTUBE_SHORT_DESCRIPTION=$'Video broadcast'
PEERTUBE_DESCRIPTION=$'Video broadcast'
PEERTUBE_MOBILE_APP_URL=

peertube_upgrading=

peertube_variables=(PEERTUBE_DOMAIN_NAME
                    PEERTUBE_CODE
                    ONION_ONLY
                    DDNS_PROVIDER
                    MY_USERNAME
                    ARCHITECTURE
                    MY_EMAIL_ADDRESS)

function peertube_create_config {
    if [ ! "$PEERTUBE_ADMIN_PASSWORD" ]; then
        PEERTUBE_ADMIN_PASSWORD=$(grep "password: '" "$PEERTUBE_DIR/config/production.yaml" | awk -F "'" '{print $2}')
    fi
    if [ ! "$PEERTUBE_DOMAIN_NAME" ]; then
        read_config_param "PEERTUBE_DOMAIN_NAME"
    fi
    https_enabled='true'
    peertube_http=443
    peertube_domain="${PEERTUBE_DOMAIN_NAME}"
    if [[ "$ONION_ONLY" != 'no' ]]; then
        https_enabled='false'
        peertube_http=80
        if [ ! "$PEERTUBE_ONION_HOSTNAME" ]; then
            PEERTUBE_ONION_HOSTNAME=$(cat /var/lib/tor/hidden_service_peertube/hostname)
        fi
        peertube_domain="${PEERTUBE_ONION_HOSTNAME}"
    fi

    { echo 'listen:';
      echo "  hostname: 'localhost'";
      echo "  port: $PEERTUBE_PORT";
      echo '';
      echo 'webserver:';
      echo "  https: ${https_enabled}";
      echo "  hostname: '${peertube_domain}'";
      echo "  port: ${peertube_http}";
      echo '';
      echo 'rates_limit:';
      echo '  api:';
      echo '    window: 10 seconds';
      echo '    max: 50';
      echo '  login:';
      echo '    window: 5 minutes';
      echo '    max: 15';
      echo '  signup:';
      echo '    window: 5 minutes';
      echo '    max: 2';
      echo '  ask_send_email:';
      echo '    window: 5 minutes';
      echo '    max: 3';
      echo '';
      echo 'trust_proxy:';
      echo "  - 'loopback'";
      echo '';
      echo 'database:';
      echo "  hostname: 'localhost'";
      echo "  port: 5432";
      echo "  suffix: ''";
      echo "  ssl: ''";
      echo "  username: 'peertube'";
      echo "  password: '${PEERTUBE_ADMIN_PASSWORD}'";
      echo '  pool:';
      echo '    max: 5';
      echo '';
      echo 'redis:';
      echo "  hostname: 'localhost'";
      echo '  port: 6379';
      echo '  auth: null';
      echo '  db: 0';
      echo '';
      echo 'smtp:';
      echo '  # smtp or sendmail';
      echo '  transport: smtp';
      echo '  # Path to sendmail command. Required if you use sendmail transport';
      echo '  sendmail: null';
      echo '  hostname: null';
      echo '  port: 25';
      echo '  username: null';
      echo '  password: null';
      echo '  tls: false';
      echo '  disable_starttls: true';
      echo '  ca_file: null';
      echo "  from_address: 'admin@${DEFAULT_DOMAIN_NAME}'"
      echo '';
      echo 'email:';
      echo '  body:';
      echo '    signature: "PeerTube"';
      echo '  subject:';
      echo '    prefix: "[PeerTube]"';
      echo '';
      echo 'storage:';
      echo "  tmp: '/etc/peertube/storage/tmp/'";
      echo "  avatars: '/etc/peertube/storage/avatars/'";
      echo "  videos: '/etc/peertube/storage/videos/'";
      echo "  streaming_playlists: '/etc/peertube/storage/streaming-playlists/'";
      echo "  redundancy: '/etc/peertube/storage/videos/'";
      echo "  logs: '/etc/peertube/storage/logs/'";
      echo "  previews: '/etc/peertube/storage/previews/'";
      echo "  thumbnails: '/etc/peertube/storage/thumbnails/'";
      echo "  torrents: '/etc/peertube/storage/torrents/'";
      echo "  captions: '/etc/peertube/storage/captions/'";
      echo "  cache: '/etc/peertube/storage/cache/'";
      echo "  plugins: 'storage/plugins/'";
      echo "  client_overrides: '/var/www/peertube/storage/client-overrides/'";
      echo '';
      echo 'log:';
      echo "  level: 'info'"
      echo '  rotation:';
      echo '    enabled : true';
      echo '    maxFileSize: 12MB';
      echo '    maxFiles: 20';
      echo '  anonymizeIP: true';
      echo '  log_ping_requests: false';
      echo '  prettify_sql: false';
      echo '';
      echo 'trending:';
      echo '  videos:';
      echo '    interval_days: 7';
      echo '    algorithms:';
      echo '      enabled:';
      echo "        - 'best'";
      echo "        - 'hot'";
      echo "        - 'most-viewed'";
      echo "        - 'most-liked'";
      echo "      default: 'most-viewed'";
      echo '';
      echo 'redundancy:';
      echo '  videos:';
      echo "    check_interval: '1 hour'";
      echo '    strategies:';
      echo '      -      ';
      echo "        size: '2GB'";
      echo "        min_lifetime: '24 hours'";
      echo "        strategy: 'most-views'";
      echo '';
      echo 'remote_redundancy:';
      echo '  videos:';
      echo "    accept_from: 'followings'";
      echo '';
      echo 'csp:';
      echo '  enabled: false';
      echo '  report_only: true';
      echo '  report_uri:';
      echo '';
      echo 'tracker:';
      echo '  enabled: true';
      echo '  private: true';
      echo '  reject_too_many_announces: true';
      echo '';
      echo 'history:';
      echo '  videos:';
      echo '    max_age: -1';
      echo '';
      echo 'views:';
      echo '  videos:';
      echo '    remote:';
      echo '      max_age: -1';
      echo '';
      echo 'plugins:';
      echo '  index:';
      echo '    enabled: false';
      echo "    check_latest_versions_interval: '12 hours'";
      echo "    url: 'https://packages.joinpeertube.org'";
      echo '';
      echo 'federation:';
      echo '  videos:';
      echo '    federate_unlisted: false';
      echo '';
      echo 'cache:';
      echo '  previews:';
      echo '    size: 500'
      echo '  captions:';
      echo '    size: 500';
      echo '';
      echo 'admin:';
      echo "  email: '${MY_EMAIL_ADDRESS}'";
      echo '';
      echo 'contact_form:';
      echo '  enabled: false';
      echo '';
      echo 'signup:';
      echo '  enabled: false';
      echo '  limit: 1';
      echo '  requires_email_verification: false';
      echo '  filters:';
      echo '    cidr:';
      echo '      whitelist: []';
      echo '      blacklist: []';
      echo '';
      echo 'user:';
      echo '  video_quota: -1';
      echo '  video_quota_daily: -1';
      echo '';
      echo 'transcoding:';
      echo '  enabled: false';
      echo '  allow_additional_extensions: true';
      echo '  allow_audio_files: true';
      echo '  threads: 1';
      echo '  concurrency: 1';
      echo "  profile: 'default'";
      echo '  resolutions:';
      echo '    0p: false # audio-only';
      echo '    240p: false';
      echo '    360p: false';
      echo '    480p: false';
      echo '    720p: false';
      echo '    1080p: false';
      echo '    1440p: false';
      echo '    2160p: false';
      echo '  webtorrent:';
      echo '    enabled: false';
      echo '  hls:';
      echo '    enabled: false';
      echo '';
      echo 'live:';
      echo '  enabled: false';
      echo '';
      echo '  max_duration: -1';
      echo '';
      echo '  max_instance_lives: 20';
      echo '';
      echo '  max_user_lives: 3';
      echo '';
      echo '  allow_replay: true';
      echo '';
      echo '  rtmp:';
      echo "    port: 1935";
      echo '';
      echo '  transcoding:';
      echo '    enabled: true';
      echo '    threads: 2';
      echo '';
      echo "    profile: 'default'";
      echo '';
      echo '    resolutions:';
      echo '      240p: false';
      echo '      360p: false';
      echo '      480p: false';
      echo '      720p: false';
      echo '      1080p: false';
      echo '      1440p: false';
      echo '      2160p: false';
      echo '';
      echo 'import:';
      echo '  videos:';
      echo '    concurrency: 1';
      echo '    http:';
      echo '      enabled: false';
      echo '      force_ipv4: true';
      echo '      # You can use an HTTP/HTTPS/SOCKS proxy with youtube-dl';
      echo '      proxy:';
      echo '        enabled: false';
      echo '        url: ""';
      echo '    torrent:';
      echo '      enabled: false';
      echo '';
      echo 'auto_blacklist:';
      echo '  videos:';
      echo '    of_users:';
      echo '      enabled: false';
      echo '';
      echo 'instance:';
      echo "  name: 'PeerTube'";
      echo "  short_description: 'PeerTube, a federated (ActivityPub) video streaming platform using P2P (BitTorrent) directly in the web browser with WebTorrent and Angular.'";
      echo "  description: ''";
      echo "  terms: ''";
      echo "  code_of_conduct: '' # Supports markdown";
      echo "  moderation_information: '' # Supports markdown";
      echo "  creation_reason: ''";
      echo "  administrator: '${MY_EMAIL_ADDRESS}'";
      echo "  maintenance_lifetime: ''";
      echo "  business_model: ''";
      echo "  hardware_information: '' # Supports Markdown";
      echo "  default_client_route: '/videos/trending'";
      echo '  languages:';
      echo '    - en';
      echo '  categories:';
      echo '#    - 1  # Music';
      echo '#    - 2  # Films';
      echo '#    - 3  # Vehicles';
      echo '#    - 4  # Art';
      echo '#    - 5  # Sports';
      echo '#    - 6  # Travels';
      echo '#    - 7  # Gaming';
      echo '#    - 8  # People';
      echo '#    - 9  # Comedy';
      echo '#    - 10 # Entertainment';
      echo '#    - 11 # News & Politics';
      echo '#    - 12 # How To';
      echo '#    - 13 # Education';
      echo '#    - 14 # Activism';
      echo '#    - 15 # Science & Technology';
      echo '#    - 16 # Animals';
      echo '#    - 17 # Kids';
      echo '#    - 18 # Food';
      echo '  is_nsfw: false';
      echo "  default_nsfw_policy: 'do_not_list'";
      echo '  customizations:';
      echo "    javascript: ''";
      echo "    css: ''";
      echo '  robots: |';
      echo '    User-agent: *';
      echo '    Disallow:';
      echo '  securitytxt:';
      echo "    \"# If you would like to report a security issue\n# you may report it to:\nContact: mailto: ${MY_EMAIL_ADDRESS}\"";
      echo '';
      echo 'services:';
      echo '  twitter:';
      echo "    username: '@Chocobozzz'"
      echo '    whitelisted: false';
      echo '';
      echo 'followers:';
      echo '  instance:';
      echo '    enabled: true';
      echo '    manual_approval: true';
      echo '';
      echo 'followings:';
      echo '  instance:';
      echo '    auto_follow_back:';
      echo '      enabled: false';
      echo '';
      echo '    auto_follow_index:';
      echo '      enabled: false';
      echo "      index_url: ''";
      echo '';
      echo 'theme:';
      echo "  default: 'default'";
      echo '';
      echo 'broadcast_message:';
      echo '  enabled: false';
      echo "  message: '' # Support markdown";
      echo "  level: 'info' # 'info' | 'warning' | 'error'";
      echo '  dismissable: false';
      echo '';
      echo 'search:';
      echo '  remote_uri:';
      echo '    users: true';
      echo '    anonymous: false';
      echo '  search_index:';
      echo '    enabled: false';
      echo "    url: ''";
      echo '    disable_local_search: false';
      echo '    is_default_search: false'; } > "${PEERTUBE_DIR}/config/production.yaml"
    chown peertube:peertube "${PEERTUBE_DIR}/config/production.yaml"
    cp "${PEERTUBE_DIR}/config/production.yaml" "${PEERTUBE_DIR}/peertube-latest/config/production.yaml"
    chown peertube:peertube "${PEERTUBE_DIR}/peertube-latest/config/production.yaml"
}

function upgrade_distro_peertube {
    target_distro="$1"

    if [[ "$target_distro" == 'bullseye' ]]; then
        echo -n ''
    fi
}

function peertube_tcp_tuning {
    if [ -f "$PEERTUBE_DIR/peertube-latest/support/sysctl.d/30-peertube-tcp.conf" ]; then
        cp "$PEERTUBE_DIR/peertube-latest/support/sysctl.d/30-peertube-tcp.conf" /etc/sysctl.d/
        sysctl -p /etc/sysctl.d/30-peertube-tcp.conf
    fi
}

function install_peertube_base {
    if [ ! ${peertube_upgrading} ]; then
        increment_app_install_progress
    fi

    if [ ! -d ${PEERTUBE_DIR}/config ]; then
        mkdir -p ${PEERTUBE_DIR}/config
    fi
    if [ ! -d ${PEERTUBE_DIR}/storage ]; then
        mkdir -p ${PEERTUBE_DIR}/storage
    fi
    if [ ! -d ${PEERTUBE_DIR}/versions ]; then
        mkdir -p ${PEERTUBE_DIR}/versions
    fi

    cd ${PEERTUBE_DIR}/versions || exit 35

    if [ -f "/repos/${PEERTUBE_DOWNLOAD_FILENAME}.tar.xz" ]; then
        cp "/repos/${PEERTUBE_DOWNLOAD_FILENAME}.tar.xz" "${PEERTUBE_DOWNLOAD_FILENAME}.tar.xz"
    else
        if [[ "$ONION_ONLY" == 'no' ]]; then
            wget -q "${PEERTUBE_DOWNLOAD}" -O "${PEERTUBE_DOWNLOAD_FILENAME}.tar.xz"
        else
            torsocks wget -q "$PEERTUBE_DOWNLOAD" -O "${PEERTUBE_DOWNLOAD_FILENAME}.tar.xz"
            if [ ! -f "${PEERTUBE_DOWNLOAD_FILENAME}.tar.xz" ]; then
                wget -q "${PEERTUBE_DOWNLOAD}" -O "${PEERTUBE_DOWNLOAD_FILENAME}.tar.xz"
            fi
        fi
    fi
    if [ ! -f "${PEERTUBE_DOWNLOAD_FILENAME}.tar.xz" ]; then
        peertube_upgrading=
        exit 56
    fi

    if [ ! ${peertube_upgrading} ]; then
        increment_app_install_progress
    fi

    unxz "${PEERTUBE_DOWNLOAD_FILENAME}.tar.xz"
    if [ ! -f "${PEERTUBE_DOWNLOAD_FILENAME}.tar" ]; then
        echo $"${PEERTUBE_DOWNLOAD_FILENAME}.tar not found"
        peertube_upgrading=
        exit 63
    fi

    if [ ! ${peertube_upgrading} ]; then
        increment_app_install_progress
    fi

    tar -xvf "${PEERTUBE_DOWNLOAD_FILENAME}.tar"
    rm "${PEERTUBE_DOWNLOAD_FILENAME}.tar"

    if [ ! ${peertube_upgrading} ]; then
        increment_app_install_progress
    fi

    cd ../ || exit 35
    ln -s "versions/${PEERTUBE_DOWNLOAD_FILENAME}" ./peertube-latest

    cd ${PEERTUBE_DIR}/peertube-latest || exit 35

    if [ ! ${peertube_upgrading} ]; then
        increment_app_install_progress
    fi

    # NOTE: these get installed from the global npm
    /usr/bin/npm install npm@${PEERTUBE_NPM_VERSION}

    if [ ! ${peertube_upgrading} ]; then
        increment_app_install_progress
    fi

    /usr/bin/npm install yarn@${PEERTUBE_YARN_VERSION}

    if [ ! ${peertube_upgrading} ]; then
        increment_app_install_progress
    fi

    chown -R peertube:peertube ${PEERTUBE_DIR}

    if [ ! ${peertube_upgrading} ]; then
        increment_app_install_progress
    fi

    # install a second time locally
    peertube_local_npm="sudo -H -u peertube ${PEERTUBE_DIR}/peertube-latest/node_modules/.bin/npm"
    peertube_local_fix="$peertube_local_npm audit fix"
    peertube_local_install="$peertube_local_npm install"

    if [ ! ${peertube_upgrading} ]; then
        increment_app_install_progress
    fi

    $peertube_local_install npm@${PEERTUBE_NPM_VERSION}

    if [ ! $peertube_upgrading ]; then
        increment_app_install_progress
    fi

    chown -R peertube:peertube ${PEERTUBE_DIR}

    cd ${PEERTUBE_DIR} || exit 81
    ${peertube_local_install} yarn@${PEERTUBE_YARN_VERSION}
    ${peertube_local_install} npm@${PEERTUBE_NPM_VERSION}
    ${peertube_local_install} node@${PEERTUBE_NODEJS_VERSION}

    if [ ! -f ${PEERTUBE_DIR}/node_modules/.bin/yarn ]; then
	echo "yarn was not installed in ${PEERTUBE_DIR}"
	exit 8
    fi
    if [ ! -f ${PEERTUBE_DIR}/node_modules/.bin/npm ]; then
	echo "npm was not installed in ${PEERTUBE_DIR}"
	exit 9
    fi
    if [ ! -f ${PEERTUBE_DIR}/node_modules/.bin/node ]; then
	echo "node was not installed in ${PEERTUBE_DIR}"
	exit 10
    fi

    if [ -f "${PEERTUBE_DIR}/package-lock.json" ]; then
        rm "${PEERTUBE_DIR}/package-lock.json"
    fi

    cd ${PEERTUBE_DIR} || exit 82
    /usr/bin/npm install webpack@5.23.0

    cd ${PEERTUBE_DIR}/peertube-latest || exit 73
    ${peertube_local_install} node@${PEERTUBE_NODEJS_VERSION}
    if [ -f "${PEERTUBE_DIR}/peertube-latest/package-lock.json" ]; then
        rm "${PEERTUBE_DIR}/peertube-latest/package-lock.json"
    fi
    peertube_modules=${PEERTUBE_DIR}/peertube-latest/node_modules
    echo "export PATH=${PEERTUBE_DIR}/node_modules/.bin:\${PATH}" >> ${PEERTUBE_DIR}/.bashrc
    if ! sudo -H -u peertube PATH=${PEERTUBE_DIR}/node_modules/.bin:/usr/bin:/usr/local/bin NPM_CONFIG_PREFIX=${PEERTUBE_DIR}/node_modules/.bin/npm NODE_CONFIG_DIR=${PEERTUBE_DIR}/config ${PEERTUBE_DIR}/node_modules/.bin/yarn install --production --pure-lockfile; then
        echo "sudo -H -u peertube PATH=${PEERTUBE_DIR}/node_modules/.bin:/usr/local/bin NPM_CONFIG_PREFIX=${PEERTUBE_DIR}/node_modules/.bin/npm NODE_CONFIG_DIR=${PEERTUBE_DIR}/config ${PEERTUBE_DIR}/node_modules/.bin/yarn install --production --pure-lockfile"
        peertube_upgrading=
        exit 54
    fi

    cd ${PEERTUBE_DIR} || exit 71

    if [ ! $peertube_upgrading ]; then
        increment_app_install_progress
    fi

    if [ ! -d ${PEERTUBE_DIR}/storage/logs ]; then
        sudo -H -u peertube mkdir -p ${PEERTUBE_DIR}/storage/logs
    fi

    peertube_tcp_tuning

    cd ${PEERTUBE_DIR} || exit 72
    $peertube_local_install webpack zone.js popper.js jquery @angular/core
    $peertube_local_install
    $peertube_local_fix
    chown -R peertube:peertube ${PEERTUBE_DIR}
}

function peertube_setting_registration {
    allow_registrations="$1"

    if [[ "$allow_registrations" == '1' ]]; then
        sed -i "0,/enabled:.*/s//enabled: false/" ${PEERTUBE_CONFIG_FILE}
        systemctl restart peertube
    fi

    if [[ "$allow_registrations" == '0' ]]; then
        sed -i "0,/enabled:.*/s//enabled: true/" ${PEERTUBE_CONFIG_FILE}
        systemctl restart peertube
    fi
}

function peertube_import_from_syncthing {
    peertubedomain="https://$PEERTUBE_DOMAIN_NAME"
    nodecmd='node'

    if [[ "$ONION_ONLY" != 'no' ]]; then
        peertubedomain="http://$(cat /var/lib/tor/hidden_service_peertube/hostname)"
        nodecmd='torsocks node'
    fi

    { echo '#!/bin/bash';
      echo '';
      echo 'LOCKFILE=/tmp/.peertube.lock';
      echo '';
      echo 'if [ -f /root/.peertube.lock ]; then';
      echo "    lockctr=\$(cat \$LOCKFILE)";
      echo "    lockctr=\$((lockctr+1))";
      echo "    echo \"\$lockctr\" > \$LOCKFILE";
      echo "    if [ \$lockctr -ge 30 ]; then";
      echo "        rm \$LOCKFILE";
      echo '    else';
      echo '        exit 0';
      echo '    fi';
      echo 'fi';
      echo '';
      echo "MY_USERNAME=\$(cat /root/${PROJECT_NAME}.cfg | grep MY_USERNAME | awk -F '=' '{print \$2}')";
      echo "if [ ! \"\$MY_USERNAME\" ]; then";
      echo '    exit 0';
      echo 'fi';
      echo '';
      echo "search_dir=/home/\$MY_USERNAME/Sync/peertube_upload";
      echo "if [ ! -f \$search_dir/login.txt ]; then";
      echo '    exit 0';
      echo 'fi';
      echo "import_script=${PEERTUBE_DIR}/peertube-latest/dist/server/tools/upload.js";
      echo "if [ ! -f \$import_script ]; then";
      echo '    exit 0';
      echo 'fi';
      echo '';
      echo "peertubedomain=\"$peertubedomain\"";
      echo "peertubeuser=\$(sed -n 1p < \"\$search_dir/login.txt\")";
      echo "peertubepassword=\$(sed -n 2p < \"\$search_dir/login.txt\")";
      echo 'peertubensfw=';
      echo "if grep -q 'nsfw' \"\$search_dir/login.txt\"; then";
      echo "    peertubensfw='--nsfw'";
      echo 'fi';
      echo "if grep -q 'NSFW' \"\$search_dir/login.txt\"; then";
      echo "    peertubensfw='--nsfw'";
      echo 'fi';
      echo '';
      echo "peertubeprivate='-P 3'";
      echo "if grep -q 'public' \"\$search_dir/login.txt\"; then";
      echo "    peertubeprivate='-P 1'";
      echo 'fi';
      echo "if grep -q 'Public' \"\$search_dir/login.txt\"; then";
      echo "    peertubeprivate='-P 1'";
      echo 'fi';
      echo '';
      echo 'failed_uploads=0';
      echo '';
      echo "cd ${PEERTUBE_DIR} || exit 32";
      echo "echo \"0\" > \$LOCKFILE";
      echo '';
      echo "for video_file in \$search_dir/*; do";
      echo "    if [[ \"\$video_file\" == *'.ogv' || \"\$video_file\" == *'.webm' ]]; then";
      echo "        if ! grep -q \"\$video_file\" /root/.peertube_uploaded; then";
      echo "            peertubetitle=\$(basename \"\$video_file\" | awk -F '.' '{print \$1}' | sed 's|_| |g' | sed 's|-| |g')";
      echo "            if $nodecmd \$import_script -n \"\$peertubetitle\" \$peertubensfw \$peertubeprivate -u \"\$peertubedomain\" -U \"\$peertubeuser\" --password \"\$peertubepassword\" -f \"\$video_file\"; then";
      echo "                echo \"\$video_file\" >> /root/.peertube_uploaded";
      echo "                rm \$LOCKFILE";
      echo "                exit 0";
      echo '            else';
      echo "                failed_uploads=\$((failed_uploads+1))";
      echo "                if [ \$failed_uploads -gt 1 ]; then";
      echo "                    rm \$LOCKFILE";
      echo '                    exit 0';
      echo '                fi';
      echo '            fi';
      echo '        fi';
      echo '    fi';
      echo 'done';
      echo '';
      echo "rm \$LOCKFILE"; } > /usr/bin/peertubesync

    chmod +x /usr/bin/peertubesync
    cron_add_mins 1 /usr/bin/peertubesync
}

function peertube_create_database {
    if [ -f "$IMAGE_PASSWORD_FILE" ]; then
        PEERTUBE_ADMIN_PASSWORD="$(printf "%s" "$(cat "$IMAGE_PASSWORD_FILE")")"
    fi
    if [ ! "$PEERTUBE_ADMIN_PASSWORD" ]; then
        PEERTUBE_ADMIN_PASSWORD="$(create_password "${MINIMUM_PASSWORD_LENGTH}")"
    fi
    "${PROJECT_NAME}-pass" -u "$MY_USERNAME" -a peertube -p "$PEERTUBE_ADMIN_PASSWORD"
    if [ ! "$PEERTUBE_ADMIN_PASSWORD" ]; then
        return
    fi

    systemctl restart postgresql
    drop_database_postgresql peertube peertube
    create_database_postgrasql peertube "$PEERTUBE_ADMIN_PASSWORD" peertube
    run_system_query_postgresql "set statement_timeout to 40000;"
    peertube_database_extensions
}

function logging_on_peertube {
    if [ ! -d $PEERTUBE_DIR ]; then
        return
    fi

    sed -i "s|level: '.*|level: 'debug' # debug/info/warning/error|g" "$PEERTUBE_DIR/config/production.yaml"
    systemctl restart peertube
}

function logging_off_peertube {
    if [ ! -d $PEERTUBE_DIR ]; then
        return
    fi

    sed -i "s|level: '.*|level: 'error' # debug/info/warning/error|g" "$PEERTUBE_DIR/config/production.yaml"
    systemctl restart peertube
}

function remove_user_peertube {
    echo -n ''
    #    remove_username="$1"
    # TODO: remove user
}

function add_user_peertube {
    if [[ $(app_is_installed peertube) == "0" ]]; then
        echo '0'
        return
    fi

    #    new_username="$1"
    #    new_user_password="$2"
    # TODO: add user

    echo '0'
}

function install_interactive_peertube {
    if [ ! "$ONION_ONLY" ]; then
        ONION_ONLY='no'
    fi

    if [[ $ONION_ONLY != "no" ]]; then
        PEERTUBE_DOMAIN_NAME='peertube.local'
        write_config_param "PEERTUBE_DOMAIN_NAME" "$PEERTUBE_DOMAIN_NAME"
    else
        function_check interactive_site_details
        interactive_site_details "peertube" "PEERTUBE_DOMAIN_NAME" "PEERTUBE_CODE"
    fi
    APP_INSTALLED=1
}

function peertube_set_admin_email {
    read_config_param "$MY_EMAIL_ADDRESS"
    data=$(mktemp 2>/dev/null)
    dialog --title $"Set PeerTube administrator email address" \
           --backtitle $"LibreServer Control Panel" \
           --inputbox $"Admin email address" 8 75 "$MY_EMAIL_ADDRESS" 2>"$data"
    sel=$?
    case $sel in
        0)  peertube_email=$(<"$data")
            if [[ "$peertube_email" != *' '* && "$peertube_email" != *','* && "$peertube_email" != *';'* && "$peertube_email" == *'@'* && "$peertube_email" == *'.'* ]]; then
                if [ ${#peertube_email} -gt 8 ]; then
                    sed -i "s|email:.*|email: '${peertube_email}'|g" ${PEERTUBE_CONFIG_FILE}
                    systemctl restart peertube
                    dialog --title $"Set PeerTube administrator email address" \
                           --msgbox $"Set to $peertube_email" 6 75
                fi
            fi
            ;;
    esac
    rm -f "$data"
}

function peertube_disable_signups {
    dialog --title $"Disable PeerTube signups" \
           --backtitle $"LibreServer Control Panel" \
           --yesno $"\\nDo you wish to disable further PeerTube signups?" 8 75
    sel=$?
    case $sel in
        0) sed -i "0,/enabled:.*/s//enabled: false/" ${PEERTUBE_CONFIG_FILE};;
        1) sed -i "0,/enabled:.*/s//enabled: true/" ${PEERTUBE_CONFIG_FILE};;
        255) return;;
    esac

    systemctl restart peertube
}

function peertube_import_from_file {
    read_config_param MY_USERNAME
    read_config_param PEERTUBE_DOMAIN_NAME
    read_config_param ONION_ONLY

    data2=$(mktemp 2>/dev/null)
    dialog --backtitle $"LibreServer Control Panel" \
           --title $"Import Video from file" \
           --form $"Enter your PeerTube login details and video title" 10 65 4 \
           $"Username:" 1 1 "$MY_USERNAME" 1 18 16 15 \
           $"Password:" 2 1 "" 2 18 40 10000 \
           $"Video Title:" 3 1 "" 3 18 40 1000 \
           $"NSFW:" 4 1 $"no" 4 18 4 4 \
           2> "$data2"
    sel=$?
    case $sel in
        1) rm -f "$data2"
           return;;
        255) rm -f "$data2"
             return;;
    esac
    peertubeuser=$(sed -n 1p < "$data2")
    peertubepassword=$(sed -n 2p < "$data2")
    peertubetitle=$(sed -n 3p < "$data2")
    peertubensfw=$(sed -n 4p < "$data2")
    rm -f "$data2"

    peertubedomain="https://$PEERTUBE_DOMAIN_NAME"
    nodecmd='node'

    if [[ "$ONION_ONLY" != 'no' ]]; then
        peertubedomain="http://$(cat /var/lib/tor/hidden_service_peertube/hostname)"
        nodecmd='torsocks node'
    fi

    selected_file=$(dialog --title "Choose the video file (select with spacebar)" --fselect "/home/$MY_USERNAME/" 30 60)
    if [ ! "$selected_file" ]; then
        return
    fi
    if [[ "$selected_file" != *'.ogv' && "$selected_file" != *'.webm' ]]; then
        dialog --title $"Import video from file" \
               --msgbox $"The video should be in ogv or webm format" 6 75
        return
    fi

    cd $PEERTUBE_DIR || exit 32
    import_script=$PEERTUBE_DIR/peertube-latest/dist/server/tools/upload.js
    if [ ! -f $import_script ]; then
        dialog --title $"Import videos" \
               --msgbox $"upload script was not found" 6 75
        return
    fi

    nsfwstr=
    if [[ "$peertubensfw" == *'y'* || "$peertubensfw" == *'Y'* ]]; then
        nsfwstr='--nsfw'
    fi

    titlestr=$(basename "$selected_file" | awk -F '.' '{print $1}' | sed 's|_| |g' | sed 's|-| |g')
    if [ "$peertubetitle" ]; then
        titlestr="-n \"$peertubetitle\""
    fi

    clear
    $nodecmd $import_script $nsfwstr "$titlestr" -u "$peertubedomain" -U "$peertubeuser" --password "$peertubepassword" -f "$selected_file"

    dialog --title $"Import video from file" \
           --msgbox $"Video imported from $selected_file" 6 75
}

function peertube_import_videos {
    read_config_param MY_USERNAME
    read_config_param PEERTUBE_DOMAIN_NAME
    read_config_param ONION_ONLY

    data2=$(mktemp 2>/dev/null)
    dialog --backtitle $"LibreServer Control Panel" \
           --title $"Import Videos from legacy sites" \
           --form $"Enter a channel of video URL for YouTube/Vimeo/Dailymotion" 10 75 4 \
           $"Username:" 1 1 "$MY_USERNAME" 1 22 16 15 \
           $"Password:" 2 1 "" 2 22 50 10000 \
           $"Video/Channel URL:" 3 1 "" 3 22 50 10000 \
           2> "$data2"
    sel=$?
    case $sel in
        1) rm -f "$data2"
           return;;
        255) rm -f "$data2"
             return;;
    esac
    peertubeuser=$(sed -n 1p < "$data2")
    peertubepassword=$(sed -n 2p < "$data2")
    video_url=$(sed -n 3p < "$data2")
    rm -f "$data2"

    peertubedomain="https://$PEERTUBE_DOMAIN_NAME"
    nodecmd='node'

    if [[ "$ONION_ONLY" != 'no' ]]; then
        peertubedomain="http://$(cat /var/lib/tor/hidden_service_peertube/hostname)"
        nodecmd='torsocks node'
    fi

    if [ ${#peertubeuser} -lt 3 ]; then
        dialog --title $"Import videos from legacy sites" \
               --msgbox $"Username was not valid" 6 75
        return
    fi

    if [ ${#peertubepassword} -lt 3 ]; then
        dialog --title $"Import videos from legacy sites" \
               --msgbox $"Password was not valid" 6 75
        return
    fi

    if [[ "$video_url" == *' '* || "$video_url" == *','* || "$video_url" == *'@'* ]]; then
        dialog --title $"Import videos from legacy sites" \
               --msgbox $"Video/channel URL was not valid" 6 75
        return
    fi

    if [ ${#video_url} -lt 8 ]; then
        dialog --title $"Import videos from legacy sites" \
               --msgbox $"Video/channel URL was not valid" 6 75
        return
    fi

    cd $PEERTUBE_DIR || exit 32
    import_script=$PEERTUBE_DIR/peertube-latest/dist/server/tools/import-videos.js

    # default to downloading as webm
    sed -i "s|'.mp4'|'.webm'|g" $import_script
    sed -i "s|const options = \\['-f'.*|const options = ['-f', '43', '-o', path];|g" $import_script

    if [ ! -f $import_script ]; then
        dialog --title $"Import videos from legacy sites" \
               --msgbox $"import-videos script was not found" 6 75
        return
    fi

    clear
    $nodecmd $import_script -u "$peertubedomain" -U "$peertubeuser" --password "$peertubepassword" -t "$video_url"

    dialog --title $"Import videos from legacy sites" \
           --msgbox $"Video/s imported from $video_url" 6 75
}

function configure_interactive_peertube {
    W=(1 $"Set administrator email address"
       2 $"Disable or enable signups"
       3 $"Import video from file")

    while true
    do
        # shellcheck disable=SC2068
        selection=$(dialog --backtitle $"LibreServer Administrator Control Panel" --title $"PeerTube" --menu $"Choose an operation, or ESC to exit:" 12 60 4 "${W[@]}" 3>&2 2>&1 1>&3)

        if [ ! "$selection" ]; then
            break
        fi

        case $selection in
            1) peertube_set_admin_email;;
            2) peertube_disable_signups;;
            3) peertube_import_from_file;;
        esac
    done
}

function change_password_peertube {
    peertube_user="$1"
    new_peertube_password="$2"
    if [ ${#new_peertube_password} -lt 8 ]; then
        echo $'Peertube password is too short'
        return
    fi
    cd $PEERTUBE_DIR/peertube-latest || exit 53
    echo -n "$new_peertube_password" | sudo -H -u peertube NODE_CONFIG_DIR=$PEERTUBE_DIR/config NODE_ENV=production npm run reset-password -- -u "$peertube_user"
    "${PROJECT_NAME}-pass" -u "$peertube_user" -a peertube -p "$new_peertube_password"

    # also change the root password if this is the admin user
    read_config_param MY_USERNAME
    if [[ "$peertube_user" == "$MY_USERNAME" ]]; then
        peertube_user=root
        echo -n "$new_peertube_password" | sudo -H -u peertube NODE_CONFIG_DIR=$PEERTUBE_DIR/config NODE_ENV=production npm run reset-password -- -u "$peertube_user"
        "${PROJECT_NAME}-pass" -u "$peertube_user" -a peertube -p "$new_peertube_password"
    fi
}

function reconfigure_peertube {
    echo -n ''
}

function peertube_database_extensions {
    cd /etc/postgresql || exit 34
    sudo -u postgres psql peertube -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm;'
    sudo -u postgres psql peertube -c 'CREATE EXTENSION IF NOT EXISTS unaccent;'
}

function upgrade_peertube {
    peertube_upgrading=1
    peertube_import_from_syncthing

    if [ -d "$PEERTUBE_DIR/versions/${PEERTUBE_DOWNLOAD_FILENAME}" ]; then
        peertube_upgrading=
        return
    fi

    CURR_PEERTUBE_VERSION=$(get_completion_param "peertube version")
    if [[ "$CURR_PEERTUBE_VERSION" == "$PEERTUBE_VERSION" ]]; then
        peertube_upgrading=
        return
    fi

    read_config_param PEERTUBE_DOMAIN_NAME
    systemctl stop peertube
    systemctl stop redis

    # recreate the link to the latest version
    cd "$PEERTUBE_DIR" || return
    rm "$PEERTUBE_DIR/peertube-latest"

    install_peertube_base

    PEERTUBE_ONION_HOSTNAME=$(cat /var/lib/tor/hidden_service_peertube/hostname)
    PEERTUBE_ADMIN_PASSWORD=$(grep "password: '" "$PEERTUBE_DIR/config/production.yaml" | awk -F "'" '{print $2}')
    read_config_param MY_EMAIL_ADDRESS
    peertube_create_config

    cp "$PEERTUBE_DIR/config/production.yaml" "$PEERTUBE_DIR/config/production.upgrading"
    cd "$PEERTUBE_DIR/versions/${PEERTUBE_DOWNLOAD_FILENAME}" || return
    ./scripts/upgrade.sh "$PEERTUBE_DIR"
    cp "$PEERTUBE_DIR/config/production.upgrading" "$PEERTUBE_DIR/config/production.yaml"
    cp "${PEERTUBE_DIR}/config/production.yaml" "${PEERTUBE_DIR}/peertube-latest/config/production.yaml"
    chown peertube:peertube "${PEERTUBE_DIR}/peertube-latest/config/production.yaml"

    chown -R peertube:peertube $PEERTUBE_DIR

    if [ -d $PEERTUBE_DIR/.cache ]; then
        chmod -R 700 $PEERTUBE_DIR/.cache
    fi

    peertube_database_extensions

    systemctl start redis
    systemctl start peertube

    set_completion_param "peertube version" "$PEERTUBE_VERSION"
    peertube_upgrading=
}

function backup_local_peertube {
    PEERTUBE_DOMAIN_NAME='peertube.local'
    if grep -q "peertube domain" "$COMPLETION_FILE"; then
        PEERTUBE_DOMAIN_NAME=$(get_completion_param "peertube domain")
    fi

    systemctl stop peertube
    USE_POSTGRESQL=1
    function_check backup_database_to_usb
    backup_database_to_usb peertube
    systemctl start peertube

    peertube_path=$PEERTUBE_DIR/storage/videos
    if [ -d $peertube_path ]; then
        suspend_site "${PEERTUBE_DOMAIN_NAME}"
        systemctl stop peertube
        backup_directory_to_usb $peertube_path peertubevideos
        systemctl start peertube
        restart_site
    fi
}

function restore_local_peertube {
    PEERTUBE_DOMAIN_NAME='peertube.local'
    if grep -q "peertube domain" "$COMPLETION_FILE"; then
        PEERTUBE_DOMAIN_NAME=$(get_completion_param "peertube domain")
    fi
    if [ "$PEERTUBE_DOMAIN_NAME" ]; then
        suspend_site "${PEERTUBE_DOMAIN_NAME}"
        systemctl stop peertube

        USE_POSTGRESQL=1
        restore_database peertube

        temp_restore_dir=/root/temppeertubevideos
        function_check restore_directory_from_usb
        restore_directory_from_usb $temp_restore_dir peertubevideos
        if [ -d $temp_restore_dir ]; then
            if [ -d $temp_restore_dir$PEERTUBE_DIR/storage/videos ]; then
                cp -r $temp_restore_dir$PEERTUBE_DIR/storage/videos/* $PEERTUBE_DIR/storage/videos/
            else
                cp -r $temp_restore_dir/* $PEERTUBE_DIR/storage/videos/
            fi
            chown -R peertube:peertube $PEERTUBE_DIR
            rm -rf $temp_restore_dir
        fi

        systemctl start peertube
        restart_site
    fi
}

function backup_remote_peertube {
    echo -n ''
}

function restore_remote_peertube {
    echo -n ''
}

function remove_peertube {
    if [ ${#PEERTUBE_DOMAIN_NAME} -eq 0 ]; then
        return
    fi

    systemctl stop peertube
    systemctl disable peertube
    rm /etc/systemd/system/peertube.service
    systemctl daemon-reload

    drop_database_postgresql peertube peertube

    function_check remove_nodejs
    remove_nodejs peertube

    rm /etc/sysctl.d/30-peertube-tcp.conf
    sysctl -p -q

    read_config_param "PEERTUBE_DOMAIN_NAME"
    nginx_dissite "$PEERTUBE_DOMAIN_NAME"
    remove_certs "${PEERTUBE_DOMAIN_NAME}"
    if [ -f "/etc/nginx/sites-available/$PEERTUBE_DOMAIN_NAME" ]; then
        rm -f "/etc/nginx/sites-available/$PEERTUBE_DOMAIN_NAME"
    fi
    if [ -d "/var/www/$PEERTUBE_DOMAIN_NAME" ]; then
        rm -rf "/var/www/$PEERTUBE_DOMAIN_NAME"
    fi
    remove_config_param PEERTUBE_DOMAIN_NAME
    remove_config_param PEERTUBE_CODE
    function_check remove_onion_service
    remove_onion_service peertube ${PEERTUBE_ONION_PORT}
    remove_completion_param "install_peertube"
    sed -i '/peertube/d' "$COMPLETION_FILE"
    sed -i '/peertubesync/d' /etc/crontab

    if [ -f /usr/bin/peertubesync ]; then
        rm /usr/bin/peertubesync
    fi
    if [ -f /root/peertube_uploaded ]; then
        rm /root/peertube_uploaded
    fi

    function_check drop_database_postgresql
    drop_database_postgresql peertube peertube

    groupdel -f peertube
    userdel -r peertube

    if [ -d $PEERTUBE_DIR ]; then
        rm -rf $PEERTUBE_DIR
    fi

    function_check remove_ddns_domain
    remove_ddns_domain "$PEERTUBE_DOMAIN_NAME"
}

function peertube_setup_web {
    peertube_nginx_file=/etc/nginx/sites-available/$PEERTUBE_DOMAIN_NAME

    if [[ $ONION_ONLY == "no" ]]; then
        { echo 'server {';
          echo '  listen 80;';
          echo '  listen [::]:80;';
          echo "  server_name ${PEERTUBE_DOMAIN_NAME};";
	  echo '  server_tokens off;';
          echo '';
          echo "  access_log /dev/null;";
          echo "  error_log /dev/null;";
          echo '';
          echo "  location / { return 301 https://\$host\$request_uri; }";
          echo '}';
          echo '';
          echo 'server {';
          echo '  listen 443 ssl http2;';
          echo '  listen [::]:443 ssl http2;';
          echo "  server_name ${PEERTUBE_DOMAIN_NAME};";
	  echo '  server_tokens off;';
          echo ''; } > "$peertube_nginx_file"

        function_check nginx_ssl
        nginx_ssl "$PEERTUBE_DOMAIN_NAME" mobile

        function_check nginx_security_options
        nginx_security_options "$PEERTUBE_DOMAIN_NAME"
        nginx_robots "$PEERTUBE_DOMAIN_NAME"

        { echo '  ssl_ecdh_curve secp384r1;';
          echo '  ssl_session_cache shared:SSL:10m;';
          echo '  ssl_session_tickets off;';
          echo '';
          echo '  # Enable compression for JS/CSS/HTML bundle, for improved client load times.';
          echo '  # It might be nice to compress JSON, but leaving that out to protect against potential';
          echo '  # compression+encryption information leak attacks like BREACH.';
          echo '  gzip on;';
          echo '  gzip_types text/css application/javascript;';
          echo '  gzip_vary on;';
          echo '';
          echo '  # Enable HSTS'
          echo '  # Tells browsers to stick with HTTPS and never visit the insecure HTTP';
          echo '  # version. Once a browser sees this header, it will only visit the site over';
          echo '  # HTTPS for the next 2 years: (read more on hstspreload.org)';
          echo '  add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;';
          echo "  add_header Onion-Location http://${PEERTUBE_ONION_HOSTNAME}\$request_uri;";
          echo '';
          echo '  access_log /dev/null;';
          echo '  error_log /dev/null;';
          echo '';
          echo '  location / {';
          echo "    proxy_pass http://localhost:$PEERTUBE_PORT;";
          echo "    proxy_set_header X-Real-IP \$remote_addr;";
          echo "    proxy_set_header Host \$host;";
          echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
          echo '';
          echo '    # Hard limit, PeerTube does not support videos > 8GB';
          echo '    client_max_body_size 8G;';
          echo '    proxy_connect_timeout       600;';
          echo '    proxy_send_timeout          600;';
          echo '    proxy_read_timeout          600;';
          echo '    send_timeout                600;';
          echo '  }';
          echo '';
          echo '  # Bypass PeerTube for performance reasons. Could be removed';
          echo '  location ~ ^/static/(webseed|redundancy)/ {';
          echo '    # Clients usually have 4 simultaneous webseed connections, so the real limit is 3MB/s per client';
          echo '    limit_rate 800k;';
          echo '';
          echo "    if (\$request_method = 'OPTIONS') {";
          echo "      add_header 'Access-Control-Allow-Origin' '*';";
          echo "      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';";
          echo "      add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';";
          echo "      add_header 'Access-Control-Max-Age' 1728000;";
          echo "      add_header 'Content-Type' 'text/plain charset=UTF-8';";
          echo "      add_header 'Content-Length' 0;";
          echo '      return 204;';
          echo '    }';
          echo '';
          echo "    if (\$request_method = 'GET') {";
          echo "      add_header 'Access-Control-Allow-Origin' '*';";
          echo "      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';";
          echo "      add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';";
          echo '';
          echo '      # Dont spam access log file with byte range requests';
          echo '      access_log off;';
          echo '    }';
          echo '';
          echo "    alias $PEERTUBE_DIR/storage/videos;";
          echo '  }';
          echo '';
          echo '  # Websocket tracker';
          echo '  location /tracker/socket {';
          echo '    # Peers send a message to the tracker every 15 minutes';
          echo '    # Dont close the websocket before this time';
          echo '    proxy_read_timeout 1200s;';
          echo "    proxy_set_header Upgrade \$http_upgrade;";
          echo "    proxy_set_header Connection \"upgrade\";";
          echo '    proxy_http_version 1.1;';
          echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
          echo "    proxy_set_header Host \$host;";
          echo "    proxy_pass http://localhost:$PEERTUBE_PORT;";
          echo '  }';
          echo '}';
          echo ''; } >> "$peertube_nginx_file"
    else
        echo -n '' > "$peertube_nginx_file"
    fi
    { echo 'server {';
      echo "  listen 127.0.0.1:$PEERTUBE_ONION_PORT default_server;";
      echo '  port_in_redirect off;';
      echo "  server_name $PEERTUBE_ONION_HOSTNAME;";
      echo '  server_tokens off;';
      echo '';
      echo '  # Enable compression for JS/CSS/HTML bundle, for improved client load times.';
      echo '  # It might be nice to compress JSON, but leaving that out to protect against potential';
      echo '  # compression+encryption information leak attacks like BREACH.';
      echo '  gzip on;';
      echo '  gzip_types text/css application/javascript;';
      echo '  gzip_vary on;';
      echo '';
      echo '  access_log /dev/null;';
      echo '  error_log /dev/null;';
      echo '';
      echo '  location / {';
      echo "    proxy_pass http://localhost:$PEERTUBE_PORT;";
      echo "    proxy_set_header X-Real-IP \$remote_addr;";
      echo "    proxy_set_header Host \$host;";
      echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
      echo '';
      echo '    # Hard limit, PeerTube does not support videos > 8GB';
      echo '    client_max_body_size 8G;';
      echo '    proxy_connect_timeout       600;';
      echo '    proxy_send_timeout          600;';
      echo '    proxy_read_timeout          600;';
      echo '    send_timeout                600;';
      echo '  }';
      echo '';
      echo '  # Bypass PeerTube for performance reasons. Could be removed';
      echo '  location ~ ^/static/(webseed|redundancy)/ {';
      echo '    # Clients usually have 4 simultaneous webseed connections, so the real limit is 3MB/s per client';
      echo '    limit_rate 800k;';
      echo '';
      echo "    if (\$request_method = 'OPTIONS') {";
      echo "      add_header 'Access-Control-Allow-Origin' '*';";
      echo "      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';";
      echo "      add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';";
      echo "      add_header 'Access-Control-Max-Age' 1728000;";
      echo "      add_header 'Content-Type' 'text/plain charset=UTF-8';";
      echo "      add_header 'Content-Length' 0;";
      echo '      return 204;';
      echo '    }';
      echo '';
      echo "    if (\$request_method = 'GET') {";
      echo "      add_header 'Access-Control-Allow-Origin' '*';";
      echo "      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';";
      echo "      add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';";
      echo '';
      echo '      # Dont spam access log file with byte range requests';
      echo '      access_log off;';
      echo '    }';
      echo '';
      echo "    alias $PEERTUBE_DIR/storage/videos;";
      echo '  }';
      echo '';
      echo '  # Websocket tracker';
      echo '  location /tracker/socket {';
      echo '    # Peers send a message to the tracker every 15 minutes';
      echo '    # Dont close the websocket before this time';
      echo '    proxy_read_timeout 1200s;';
      echo "    proxy_set_header Upgrade \$http_upgrade;";
      echo "    proxy_set_header Connection \"upgrade\";";
      echo '    proxy_http_version 1.1;';
      echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
      echo "    proxy_set_header Host \$host;";
      echo "    proxy_pass http://localhost:$PEERTUBE_PORT;";
      echo '  }';
      echo '}'; } >> "$peertube_nginx_file"

    # CSP currently causes an error
    sed -i '/Content-Security-Policy/d' "$peertube_nginx_file"

    function_check create_site_certificate
    create_site_certificate "$PEERTUBE_DOMAIN_NAME" 'yes'

    function_check nginx_ensite
    nginx_ensite "$PEERTUBE_DOMAIN_NAME"
}

function mesh_peertube_setup_web {
    # TODO
    echo -n ''
}

function mesh_install_peertube {
    # shellcheck disable=SC2153
    if [[ "$VARIANT" != "meshclient" && "$VARIANT" != "meshusb" ]]; then
        return
    fi
    if [[ "$ARCHITECTURE" != 'x86_64' && "$ARCHITECTURE" != 'amd64' && "$ARCHITECTURE" != 'i386' ]]; then
        return
    fi

    # TODO

    mesh_peertube_setup_web
}

function install_peertube {
    if [[ $VARIANT == "mesh"* ]]; then
        mesh_install_peertube
        return
    fi

    if [ ! "$PEERTUBE_DOMAIN_NAME" ]; then
        echo $'The peertube domain name was not specified'
        exit 78
    fi

    peertube_upgrading=

    increment_app_install_progress

    INSTALL_PACKAGES ffmpeg redis-tools redis-server xz-utils

    increment_app_install_progress

    function_check install_postgresql
    install_postgresql

    increment_app_install_progress

    if [ ! -d "/var/www/$PEERTUBE_DOMAIN_NAME/htdocs" ]; then
        mkdir -p "/var/www/$PEERTUBE_DOMAIN_NAME/htdocs"
    fi

    if [ -d $PEERTUBE_DIR ]; then
        userdel -r peertube
        groupdel -f peertube
        rm -rf $PEERTUBE_DIR
    fi

    increment_app_install_progress

    if ! grep -q "peertube:" /etc/group; then
        groupadd peertube
    fi
    useradd -m -d $PEERTUBE_DIR -s /bin/bash -g peertube -p peertube peertube
    if [ ! "$PEERTUBE_ADMIN_PASSWORD" ]; then
        PEERTUBE_ADMIN_PASSWORD="$(create_password ${MINIMUM_PASSWORD_LENGTH})$(create_password ${MINIMUM_PASSWORD_LENGTH})"
    fi
    echo "peertube:$PEERTUBE_ADMIN_PASSWORD" | chpasswd

    peertube_create_database

    increment_app_install_progress

    function_check install_nodejs
    install_nodejs peertube

    increment_app_install_progress

    install_peertube_base

    increment_app_install_progress

    PEERTUBE_ONION_HOSTNAME=$(add_onion_service peertube 80 ${PEERTUBE_ONION_PORT})

    # cp "${PEERTUBE_DIR}/peertube-latest/support/systemd/peertube.service" /etc/systemd/system/peertube.service
    # sed -i "s|/var/www/peertube|${PEERTUBE_DIR}|g" /etc/systemd/system/peertube.service
    # sed -i "s|ExecStart=.*|ExecStart=${PEERTUBE_DIR}/peertube-latest/node_modules/.bin/npm start|g" /etc/systemd/system/peertube.service

    { echo '[Unit]';
      echo 'Description=PeerTube daemon';
      echo 'After=network.target postgresql.service redis-server.service';
      echo '';
      echo '[Service]';
      echo 'Type=simple';
      echo "Environment=PATH=${PEERTUBE_DIR}/node_modules/.bin:/usr/bin:/usr/local/bin";
      echo 'Environment=NODE_ENV=production';
      echo "Environment=NODE_CONFIG_DIR=${PEERTUBE_DIR}/config";
      echo "Environment=GIT_CEILING_DIRECTORIES=${PEERTUBE_DIR}";
      echo 'User=peertube';
      echo 'Group=peertube';
      echo "ExecStart=${PEERTUBE_DIR}/node_modules/.bin/npm start";
      echo "WorkingDirectory=${PEERTUBE_DIR}/peertube-latest";
      echo 'StandardOutput=syslog';
      echo 'StandardError=syslog';
      echo 'SyslogIdentifier=peertube';
      echo 'Restart=always';
      echo '';
      echo 'ProtectSystem=full';
      echo 'PrivateDevices=false';
      echo 'NoNewPrivileges=true';
      echo 'ProtectHome=true';
      echo 'CapabilityBoundingSet=~CAP_SYS_ADMIN';
      echo '';
      echo '[Install]';
      echo 'WantedBy=multi-user.target'; } > /etc/systemd/system/peertube.service

    peertube_create_config

    increment_app_install_progress

    chown -R peertube:peertube ${PEERTUBE_DIR}

    peertube_setup_web

    increment_app_install_progress

    "${PROJECT_NAME}-pass" -u "$MY_USERNAME" -a peertube -p "$PEERTUBE_ADMIN_PASSWORD"

    function_check add_ddns_domain
    add_ddns_domain "$PEERTUBE_DOMAIN_NAME"

    increment_app_install_progress

    if [ ! -d /etc/peertube/storage/tmp ]; then
	mkdir -p /etc/peertube/storage/tmp
    fi
    chown -R peertube:peertube /etc/peertube

    systemctl enable peertube
    systemctl daemon-reload
    systemctl start peertube
    systemctl start redis

    increment_app_install_progress

    systemctl restart nginx

    increment_app_install_progress

    # wait for the database to get generated after initial peertube daemon start
    sleep 10

    increment_app_install_progress

    # update the admin email address after creation of the database
    sed -i "s|email: .*|email: '$MY_EMAIL_ADDRESS'|g" ${PEERTUBE_CONFIG_FILE}

    peertube_import_from_syncthing

    increment_app_install_progress

    cd $PEERTUBE_DIR/peertube-latest || exit 23
    #echo -n "$PEERTUBE_ADMIN_PASSWORD" | sudo -H -u peertube NODE_CONFIG_DIR=$PEERTUBE_DIR/config NODE_ENV=production npm run reset-password -- -u root

    increment_app_install_progress

    set_completion_param "peertube version" "$PEERTUBE_VERSION"
    set_completion_param "peertube domain" "$PEERTUBE_DOMAIN_NAME"

    if [ -d $PEERTUBE_DIR/.cache ]; then
        chmod -R 700 $PEERTUBE_DIR/.cache
    fi

    APP_INSTALLED=1
}

# NOTE: deliberately no exit 0
