#!/bin/bash
#  _    _ _            ___
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|
#
# matrix server
#
# Test by visiting https://$MATRIX_DOMAIN_NAME/_matrix/key/v2/server/auto
#
# If working then telnet $MATRIX_DOMAIN_NAME 8448 should return a response
#
# License
# =======
#
# Copyright (C) 2016-2023 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Login username is @username:domain

VARIANTS='full full-vim full-micro chat'

APP_CATEGORY=chat

IN_DEFAULT_INSTALL=0
SHOW_ON_ABOUT=1
NOT_ON_HOMEPAGE=1
REQUIRES_APP=
MINIMUM_RAM_MB=900
MATRIX_MINIMUM_RAM_MB=900

MATRIX_DOMAIN_NAME=
MATRIX_CODE=

MATRIX_DATA_DIR='/var/lib/matrix'
MATRIX_HTTP_PORT=8448
MATRIX_PORT=8009
MATRIX_ONION_PORT=8109
MATRIX_REPO="https://github.com/matrix-org/synapse"
MATRIX_COMMIT='80bb098d8775cc2ad1bf5abd150913577e643481'
REPORT_STATS="no"
MATRIX_SECRET=
MATRIX_EXPIRE_MONTHS=1

MATRIX_PIP=/usr/bin/pip3
MATRIX_PYTHON=/usr/bin/python3

MATRIX_SHORT_DESCRIPTION=$'Chat system'
MATRIX_DESCRIPTION=$'Chat system'
MATRIX_MOBILE_APP_URL='https://f-droid.org/packages/im.vector.alpha'

# used to enable retries for user creation during install
matrix_is_installing=

MATRIX_FIREWALL_PORTS="${MATRIX_HTTP_PORT}"
MATRIX_FIREWALL_MAX_CONNECTIONS=100

matrix_user_added=

matrix_variables=(ONION_ONLY
                  MY_USERNAME
                  MATRIX_SECRET
                  DEFAULT_DOMAIN_NAME
                  MATRIX_DOMAIN_NAME
                  MATRIX_EXPIRE_MONTHS
                  MATRIX_CODE)

function matrix_set_permissions {
    chown -R matrix:matrix /etc/matrix
}

function upgrade_distro_matrix {
    target_distro="$1"

    if [[ "$target_distro" == 'bookworm' ]]; then
        echo -n ''
    fi
}

function matrix_configure_homeserver_yaml {
    turnkey="$1"
    filepath="$2"

    turnsecret=
    turnuris=
    if [ "$turnkey" ]; then
        turnsecret="turn_shared_secret: \"${turnkey}\""
        turnuris="turn_uris: [\"turn:${DEFAULT_DOMAIN_NAME}:${TURN_PORT}?transport=udp\", \"turn:${DEFAULT_DOMAIN_NAME}:${TURN_PORT}?transport=tcp\"]"
    fi

    matrix_domain="${MATRIX_DOMAIN_NAME}"
    matrix_http_prefix='https'
    if [[ $ONION_ONLY != "no" ]]; then
        matrix_domain=$(cat /var/lib/tor/hidden_service_matrix/hostname)
        matrix_http_prefix='http'
    fi

    # see https://github.com/matrix-org/synapse/blob/master/docs/sample_config.yaml

    { echo "server_name: \"${matrix_domain}\"";
      echo "default_identity_server: \"\"";
      echo "public_baseurl: \"${matrix_http_prefix}://${matrix_domain}\"";
      echo 'pid_file: /etc/matrix/homeserver.pid';
      echo 'enable_search: False';
      echo 'enable_metrics: False';
      echo 'report_stats: False';
      echo '# Number of messages a client can send per second';
      echo '#rc_messages_per_second: 0.2';
      echo '# Number of message a client can send before being throttled';
      echo '#rc_message_burst_count: 10.0';
      echo '# The federation window size in milliseconds';
      echo '#federation_rc_window_size: 1000';
      echo '# The number of federation requests from a single server in a window';
      echo '# before the server will delay processing the request.';
      echo '#federation_rc_sleep_limit: 10';
      echo '# The duration in milliseconds to delay processing events from';
      echo '# remote servers by if they go over the sleep limit.';
      echo '#federation_rc_sleep_delay: 500';
      echo '# The maximum number of concurrent federation requests allowed';
      echo '# from a single server';
      echo '#federation_rc_reject_limit: 50';
      echo '# The number of federation requests to concurrently process from a';
      echo '# single server';
      echo 'federation_rc_concurrent: 3';
      echo 'listeners:';
      echo "  - port: $MATRIX_PORT";
      echo '    tls: false';
      echo "    bind_addresses: ['::1', '127.0.0.1']";
      echo '    type: http';
      echo '    x_forwarded: true';
      echo '    resources:';
      echo '      - names: [client,federation]';
      echo '        compress: false';
      echo 'stats:';
      echo '  enabled: false';
      echo "tls_certificate_path: \"/etc/letsencrypt/live/${matrix_domain}/fullchain.pem\"";
      echo "tls_private_key_path: \"/etc/letsencrypt/live/${matrix_domain}/privkey.pem\"";
      echo "tls_dh_params_path: \"/etc/ssl/certs/${matrix_domain}.dhparam\"";
      echo 'tls_fingerprints: []';
      echo 'no_tls: True';
      echo 'acme:';
      echo '    account_key_file: /etc/matrix/acme_account.key';
      echo 'database:';
      echo '  name: "sqlite3"';
      echo '  args:';
      echo "    database: \"${MATRIX_DATA_DIR}/homeserver.db\"";
      echo "media_store_path: \"${MATRIX_DATA_DIR}/media_store\"";
      echo "uploads_path: \"${MATRIX_DATA_DIR}/uploads\"";
      echo 'max_upload_size: "10M"';
      echo 'max_image_pixels: "32M"';
      echo 'max_spider_size: "10M"';
      echo "$turnsecret";
      echo "$turnuris";
      echo 'enable_registration: True';
      echo 'enable_registration_captcha: False';
      echo "registration_shared_secret: \"$(create_random_string 30)$(create_random_string 30)\"";
      echo "macaroon_secret_key: \"$(create_random_string 30)$(create_random_string 30)\"";
      echo "form_secret: \"$(create_random_string 30)$(create_random_string 30)\"";
      echo "signing_key_path: \"${MATRIX_DATA_DIR}/${matrix_domain}.signing.key\"";
      echo 'old_signing_keys: {}';
      echo 'key_refresh_interval: "1d" # 1 Day.';
      echo 'opentracing:';
      echo '    enabled: False';
      echo 'verbose: 0';
      echo 'event_cache_size: "10K"';
      echo 'soft_file_limit: 0';
      echo 'web_client: False';
      echo 'allow_guest_access: False';
      echo 'url_preview_enabled: False';
      echo 'dynamic_thumbnails: False';
      echo 'expire_access_token: False';
      echo 'app_service_config_files: []';
      echo 'password_config:';
      echo '   enabled: True';
      echo '# Matrix Key Servers start';
      echo 'trusted_key_servers:';
      echo "  - server_name: \"${matrix_domain}\"";
      echo '# Matrix Key Servers end';
      echo 'server_notices:';
      echo '  system_mxid_localpart: server';
      echo "  system_mxid_display_name: \"${PROJECT_NAME}\"";
      echo '  room_name: "Server Notices"'; } > "$filepath"

    if [[ $ONION_ONLY != "no" ]]; then
        sed -i 's|tls_certificate_path|#tls_certificate_path|g' "${filepath}"
        sed -i 's|tls_private_key_path|#tls_private_key_path|g' "${filepath}"
        sed -i 's|tls_dh_params_path|#tls_dh_params_path|g' "${filepath}"
    else
        { echo 'trusted_third_party_id_servers:';
          echo "  - ${matrix_domain}";
          echo '  - matrix.org';
          echo '  - vector.im'; } >> "$filepath"
    fi
}

function matrix_generate_certs_for_onion {
    if [[ "$ONION_ONLY" == 'no' ]]; then
        return
    fi
    # generate self-signed certs for onion installs
    "${PROJECT_NAME}-addcert" -h matrix
    if [ ! -f /etc/ssl/certs/matrix.crt ]; then
        echo $'Failed to generate matrix self-signed cert public key'
        exit 81
    fi
    if [ ! -f /etc/ssl/certs/matrix.dhparam ]; then
        echo $'Failed to generate matrix self-signed cert dhparam'
        exit 81
    fi
    if [ ! -f /etc/ssl/private/matrix.key ]; then
        echo $'Failed to generate matrix self-signed cert private key'
        exit 81
    fi
    mv /etc/ssl/certs/matrix.crt "${MATRIX_DATA_DIR}/matrix.crt"
    mv /etc/ssl/certs/matrix.dhparam "${MATRIX_DATA_DIR}/matrix.dhparam"
    mv /etc/ssl/private/matrix.key "${MATRIX_DATA_DIR}/matrix.key"
    chown -R matrix:matrix "${MATRIX_DATA_DIR}"/*
    if [ ! -f /var/lib/matrix/matrix.crt ]; then
        echo $'matrix self-signed cert public key was not moved'
        exit 26
    fi
    sed -i 's|tls_certificate_path:.*|tls_certificate_path: "/var/lib/matrix/matrix.crt"|g' "${MATRIX_DATA_DIR}/homeserver.yaml"
    if [ ! -f /var/lib/matrix/matrix.dhparam ]; then
        echo $'matrix self-signed cert dhparam was not moved'
        exit 27
    fi
    sed -i 's|tls_dh_params_path:.*|tls_dh_params_path: "/var/lib/matrix/matrix.dhparam"|g' "${MATRIX_DATA_DIR}/homeserver.yaml"
    if [ ! -f /var/lib/matrix/matrix.key ]; then
        echo $'matrix self-signed cert private key was not moved'
        exit 28
    fi
    sed -i 's|tls_private_key_path:.*|tls_private_key_path: "/var/lib/matrix/matrix.key"|g' "${MATRIX_DATA_DIR}/homeserver.yaml"
}

function set_matrix_trusted_key_servers {
    homeserver_config="${MATRIX_DATA_DIR}/homeserver.yaml"

    if grep -q '# Matrix Key Servers' $homeserver_config; then
        return
    fi
    matrix_key_server=$MATRIX_DOMAIN_NAME
    if [[ "$ONION_ONLY" != 'no' ]]; then
        matrix_key_server=$(cat /var/lib/tor/hidden_service_matrix/hostname)
    fi
    { echo '';
      echo '# Matrix Key Servers start';
      echo 'trusted_key_servers:';
      echo "  - server_name: \"$matrix_key_server\"";
      echo '# Matrix Key Servers end'; } >> $homeserver_config
    systemctl restart matrix
}

function change_default_domain_name_matrix {
    new_default_domain_name="$1"

    homeserver_config="${MATRIX_DATA_DIR}/homeserver.yaml"
    sed -i "s|$DEFAULT_DOMAIN_NAME|$new_default_domain_name|g" $homeserver_config
    change_default_domain_name_turn "$new_default_domain_name"
    systemctl restart matrix
}

function matrix_add_onion_federation {
    if grep -q ":$MATRIX_HTTP_PORT" "/etc/torrc.d/${PROJECT_NAME}"; then
        return
    fi

    sed -i "/:${MATRIX_ONION_PORT}/a HiddenServicePort ${MATRIX_HTTP_PORT} 127.0.0.1:${MATRIX_HTTP_PORT}" "/etc/torrc.d/${PROJECT_NAME}"

    restart_tor_daemon
}

function matrix_create_run_script {
    { echo '#!/bin/bash';
      echo 'cd /etc/matrix || exit 1';

      echo "alias python='/etc/matrix/env/bin/python3'";
      echo 'source /etc/matrix/env/bin/activate';
      echo '/etc/matrix/env/bin/python3 -m synapse.app.homeserver --config-path /var/lib/matrix/homeserver.yaml'; } > /etc/matrix/run-matrix
    chmod +x /etc/matrix/run-matrix
    chown matrix:matrix /etc/matrix/run-matrix
}

function matrix_systemd_daemon {
    matrix_systemd_daemon_recreate=

    if [ ! -f /etc/matrix/run-matrix ]; then
        matrix_systemd_daemon_recreate=1
    else
        if ! grep -q "$MATRIX_PYTHON " /etc/matrix/run-matrix; then
            matrix_systemd_daemon_recreate=1
        fi
    fi
    if [ ! -f /etc/systemd/system/matrix.service ]; then
        matrix_systemd_daemon_recreate=1
    fi

    if [ ! $matrix_systemd_daemon_recreate ]; then
        return
    fi

    matrix_create_run_script

    matrix_group='ssl-cert'
    if [[ $ONION_ONLY != "no" ]]; then
        matrix_group='matrix'
    fi

    { echo '[Unit]';
      echo 'Description=Synapse Matrix homeserver';
      echo 'After=network.target nginx.target';
      echo '';
      echo '[Service]';
      echo 'Type=simple';
      echo 'User=matrix';
      echo "Group=${matrix_group}";
      echo "WorkingDirectory=/etc/matrix";
      echo 'ExecStart=/etc/matrix/run-matrix';
      echo 'Restart=on-failure';
      echo 'RestartSec=10';
      echo 'PrivateTmp=true';
      echo 'PrivateDevices=false';
      echo 'CapabilityBoundingSet=~CAP_SYS_ADMIN';
      echo 'CPUQuota=30%';
      echo 'ProtectSystem=yes';
      echo 'ProtectHome=yes';
      echo 'ProtectClock=yes';
      echo 'ProtectHostname=yes';
      echo 'PrivateUsers=yes';
      echo 'ProtectKernelModules=yes';
      echo 'ProtectKernelTunables=yes';
      echo 'NoNewPrivileges=true';
      echo '';
      echo '[Install]';
      echo 'WantedBy=multi-user.target'; } > /etc/systemd/system/matrix.service
    systemctl enable matrix
    systemctl daemon-reload
}

function matrix_expire_old_posts {
    read_config_param ONION_ONLY
    read_config_param MY_USERNAME
    read_config_param MATRIX_DOMAIN_NAME
    read_config_param MATRIX_EXPIRE_MONTHS

    matrix_remove_posts=/usr/bin/matrix-remove
    curl_command='curl'
    homebase="https://$MATRIX_DOMAIN_NAME"
    if [[ "$ONION_ONLY" != 'no' ]]; then
        curl_command='torsocks curl'
        homebase="http://$(cat /var/lib/tor/hidden_service_matrix/hostname)"
    fi

    { echo '#!/bin/bash';
      echo "cd $MATRIX_DATA_DIR || exit 1";
      echo "HOMEBASE=\"$homebase\"";
      echo "ADMIN=\"@${MY_USERNAME}:$MATRIX_DOMAIN_NAME\"";
      echo "TOKEN=\$(sqlite3 homeserver.db \"SELECT token FROM access_tokens WHERE user_id='\$ADMIN' ORDER BY id DESC LIMIT 1;\")";
      echo "TIME=\"$MATRIX_EXPIRE_MONTHS months ago\"";
      echo "UNIX_TIMESTAMP=\$(date +%s%3N --date='TZ=\"UTC\" '\"$TIME\")";
      echo "ROOMS=\$(sqlite3 homeserver.db \"SELECT room_id FROM rooms;\")";
      echo "date --date='TZ=\"UTC\" '\"\$TIME\"";
      echo "for ROOM_NAME in \$ROOMS; do";
      echo "    $curl_command --silent --header \"Content-Type: application/json\" --request POST --data '{\"purge_up_to_ts\":'\$UNIX_TIMESTAMP',\"delete_local_events\": true}' \$HOMEBASE':$MATRIX_HTTP_PORT/_synapse/admin/v1/purge_history/'\$ROOM_NAME'?access_token='\$TOKEN";
      echo 'done';
      echo "$curl_command --silent --request POST \$HOMEBASE':$MATRIX_HTTP_PORT/_synapse/admin/v1/purge_media_cache?before_ts='\$UNIX_TIMESTAMP'&access_token='\$TOKEN";
      echo 'sqlite3 homeserver.db "VACUUM;"';
      echo 'sqlite3 homeserver.db "PRAGMA auto_vacuum;"'; } > $matrix_remove_posts

    chmod +x $matrix_remove_posts

    echo '#!/bin/bash' > /etc/cron.monthly/matrix-purge
    echo "$matrix_remove_posts 2> /dev/null" >> /etc/cron.monthly/matrix-purge
    chmod +x /etc/cron.monthly/matrix-purge
}

function logging_on_matrix {
    echo -n ''
    #if [ -f "${MATRIX_DATA_DIR}/homeserver.yaml" ]; then
        #if ! grep -q "#log_config:" "${MATRIX_DATA_DIR}/homeserver.yaml"; then
        #    sed -i 's|log_config:|#log_config:|g' "${MATRIX_DATA_DIR}/homeserver.yaml"
        #fi
    #fi
}

function logging_off_matrix {
    if [ -f "${MATRIX_DATA_DIR}/homeserver.yaml" ]; then
        #if ! grep -q "#log_config:" "${MATRIX_DATA_DIR}/homeserver.yaml"; then
        #    sed -i 's|log_config:|#log_config:|g' "${MATRIX_DATA_DIR}/homeserver.yaml"
        #fi
        if [ -f /etc/matrix/homeserver.log ]; then
            $REMOVE_FILES_COMMAND /etc/matrix/homeserver.log
        fi
        if [ -f /etc/matrix/homeserver.log.1 ]; then
            $REMOVE_FILES_COMMAND /etc/matrix/homeserver.log.1
        fi
        if [ -f /etc/matrix/homeserver.log.2 ]; then
            $REMOVE_FILES_COMMAND /etc/matrix/homeserver.log.2
        fi
        if [ -f /etc/matrix/homeserver.log.3 ]; then
            $REMOVE_FILES_COMMAND /etc/matrix/homeserver.log.3
        fi
    fi
}

function create_matrix_nginx_config {
    MATRIX_ONION_HOSTNAME=$(add_onion_service matrix 80 ${MATRIX_ONION_PORT})

    matrix_nginx_site=/etc/nginx/sites-available/$MATRIX_DOMAIN_NAME
    matrix_baseurl="https://${MATRIX_DOMAIN_NAME}"
    matrix_server_baseurl="${MATRIX_DOMAIN_NAME}:443"
    if [[ $ONION_ONLY == "no" ]]; then
        { echo 'server {';
          echo '  listen 80;';
          echo "  server_name ${MATRIX_DOMAIN_NAME};";
          echo '  server_tokens off;';
          echo '  return 301 https://$host$request_uri;';
          echo '}';
          echo '';
          echo 'server {';
          echo "  listen 443 ssl http2;";
          echo "  listen [::]:443 ssl http2;";
          echo "  listen ${MATRIX_HTTP_PORT} ssl http2;";
          echo "  listen [::]:${MATRIX_HTTP_PORT} ssl http2;";
          echo "  server_name ${MATRIX_DOMAIN_NAME};";
          echo '  server_tokens off;';
          echo ''; } > $matrix_nginx_site
        function_check nginx_ssl
        nginx_ssl "${MATRIX_DOMAIN_NAME}"

        function_check nginx_security_options
        nginx_security_options "${MATRIX_DOMAIN_NAME}"
        nginx_robots "${MATRIX_DOMAIN_NAME}"

        { echo '  add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;';
          echo "  add_header Onion-Location http://${MATRIX_ONION_HOSTNAME}\$request_uri;";
          echo '';
          echo '  access_log /dev/null;';
          echo '  error_log /dev/null;';
          echo '';
          echo "  root ${MATRIX_DATA_DIR}/media_store;";
          echo '';
          echo '  index index.html;';
          echo '';
          echo '  location ~* ^(\/_matrix|\/_synapse\/client) {';
          echo "    proxy_pass http://localhost:${MATRIX_PORT};";
          echo "    proxy_set_header Host \$http_host;";
          echo "    proxy_set_header X-Real-IP \$remote_addr;";
          echo "    proxy_set_header X-Forwarded-For \$remote_addr;";
          echo "    proxy_set_header X-Forwarded-Proto \$scheme;";
          echo '    port_in_redirect    off;';
          echo '    proxy_redirect      off;';
          echo '    proxy_connect_timeout 360;';
          echo '    proxy_read_timeout 600;';
          echo '    proxy_send_timeout 600;';
          echo '    proxy_buffering    off;';
          echo '    proxy_buffers 8 16k;';
          echo '    proxy_buffer_size 32k;';
          echo '  }';
          echo '';
          echo '  location /.well-known/matrix/ {';
          echo "    add_header Access-Control-Allow-Origin \"*\";";
          echo '    add_header Content-Type application/json;';
          echo "    return 200 '{\"m.server\": \"${matrix_server_baseurl}\", \"m.homeserver\": {\"base_url\": \"${matrix_baseurl}\"}}';";
          echo '  }';
          echo '';
          echo '  location / {';
          echo "    proxy_pass http://localhost:${MATRIX_PORT};";
          echo "    proxy_set_header Host \$http_host;";
          echo "    proxy_set_header X-Real-IP \$remote_addr;";
          echo "    proxy_set_header X-Forwarded-For \$remote_addr;";
          echo "    proxy_set_header X-Forwarded-Proto \$scheme;";
          echo '    port_in_redirect    off;';
          echo '    proxy_redirect      off;';
          echo '    proxy_connect_timeout 360;';
          echo '    proxy_read_timeout 600;';
          echo '    proxy_send_timeout 600;';
          echo '    proxy_buffering    off;';
          echo '    proxy_buffers 8 16k;';
          echo '    proxy_buffer_size 32k;';
          echo '  }';
          echo '}';
          echo ''; } >> $matrix_nginx_site
    else
        echo -n '' > $matrix_nginx_site
        matrix_baseurl="http://${MATRIX_ONION_HOSTNAME}"
        matrix_server_baseurl="${MATRIX_DOMAIN_NAME}:80"
    fi

    { echo 'server {';
      echo "    listen 127.0.0.1:$MATRIX_ONION_PORT default_server;";
      echo '    port_in_redirect off;';
      echo "    server_name $MATRIX_ONION_HOSTNAME;";
      echo '    server_tokens off;';
      echo ''; } >> $matrix_nginx_site
    # function_check nginx_security_options
    # nginx_security_options "$MATRIX_DOMAIN_NAME"
    { echo '';
      echo '  # Logs';
      echo '  access_log /dev/null;';
      echo '  error_log /dev/null;';
      echo '';
      echo "  root ${MATRIX_DATA_DIR}/media_store;";
      echo '';
      echo '  location ~* ^(\/_matrix|\/_synapse\/client) {';
      echo "    proxy_pass http://localhost:${MATRIX_PORT};";
      echo "    proxy_set_header Host \$http_host;";
      echo "    proxy_set_header X-Real-IP \$remote_addr;";
      echo "    proxy_set_header X-Forwarded-For \$remote_addr;";
      echo "    proxy_set_header X-Forwarded-Proto \$scheme;";
      echo '    port_in_redirect    off;';
      echo '    proxy_redirect      off;';
      echo '    proxy_connect_timeout 360;';
      echo '    proxy_read_timeout 600;';
      echo '    proxy_send_timeout 600;';
      echo '    proxy_buffering    off;';
      echo '    proxy_buffers 8 16k;';
      echo '    proxy_buffer_size 32k;';
      echo '  }';
      echo '';
      echo '  location /.well-known/matrix/ {';
      echo "    add_header Access-Control-Allow-Origin \"*\";";
      echo '    add_header Content-Type application/json;';
      echo "    return 200 '{\"m.server\": \"${matrix_server_baseurl}\", \"m.homeserver\": {\"base_url\": \"${matrix_baseurl}\"}}';";
      echo '  }';
      echo '';
      echo '  location / {';
      echo "    proxy_pass http://localhost:${MATRIX_PORT};";
      echo "    proxy_set_header Host \$http_host;";
      echo "    proxy_set_header X-Real-IP \$remote_addr;";
      echo "    proxy_set_header X-Forwarded-For \$remote_addr;";
      echo "    proxy_set_header X-Forwarded-Proto \$scheme;";
      echo '    port_in_redirect    off;';
      echo '    proxy_redirect      off;';
      echo '    proxy_connect_timeout 360;';
      echo '    proxy_read_timeout 600;';
      echo '    proxy_send_timeout 600;';
      echo '    proxy_buffering    off;';
      echo '    proxy_buffers 8 16k;';
      echo '    proxy_buffer_size 32k;';
      echo '  }';
      echo '}'; } >> "$matrix_nginx_site"

    if [ ! -d "/var/www/$MATRIX_DOMAIN_NAME" ]; then
        mkdir -p "/var/www/$MATRIX_DOMAIN_NAME/htdocs"
    fi

    sed -i 's|limit_conn conn_limit_per_ip.*|limit_conn conn_limit_per_ip 50;|g' "$matrix_nginx_site"
    sed -i 's|limit_req zone.*|limit_req zone=req_limit_per_ip burst=50 nodelay;|g' "$matrix_nginx_site"

    # enable mic and camera
    if [[ $ONION_ONLY != "no" ]]; then
        sed -i 's|microphone=(),||g' "$matrix_nginx_site"
        sed -i 's|camera=(),||g' "$matrix_nginx_site"
    fi

    nginx_ensite "$MATRIX_DOMAIN_NAME"

    function_check add_ddns_domain
    add_ddns_domain "$MATRIX_DOMAIN_NAME"
}

function matrix_generate_homeserver_file {
    local filepath="${1}"
    domain=${MATRIX_DOMAIN_NAME}

    if [[ "$ONION_ONLY" != 'no' ]]; then
        domain=$(cat /var/lib/tor/hidden_service_matrix/hostname)
    fi

    if [ -f "${MATRIX_DATA_DIR}/homeserver.db" ]; then
        rm "${MATRIX_DATA_DIR}/homeserver.db"
    fi

    # NOTE: Don't use $MATRIX_PYTHON here
    { echo '#!/bin/bash';
      echo 'cd /etc/matrix || exit 46';
      echo 'virtualenv -p python3 /etc/matrix/env';
      echo 'source /etc/matrix/env/bin/activate';
      echo -n "python3 -m synapse.app.homeserver ";
      echo -n "--config-path \"${filepath}\" ";
      echo -n '--generate-config ';
      echo -n "--keys-directory ${MATRIX_DATA_DIR} ";
      echo -n "--report-stats ${REPORT_STATS} ";
      echo "--server-name \"${domain}\"";
      echo -n "python3 -m synapse.app.homeserver ";
      echo -n "--config-path \"${filepath}\" ";
      echo -n "--keys-directory ${MATRIX_DATA_DIR} ";
      echo -n '--generate-keys ';
      echo -n "--report-stats ${REPORT_STATS} ";
      echo "--server-name \"${domain}\"";
      echo 'deactivate'; } > /usr/bin/install-homeserver
    chmod +x /usr/bin/install-homeserver
    /bin/bash /usr/bin/install-homeserver
}

function matrix_diff {
    DIFFPARAMS="${DIFFPARAMS:-Naur}"
    MATRIX_DOMAIN_NAME="${MATRIX_DOMAIN_NAME:-demo_server_name}"
    REPORT_STATS="${REPORT_STATS:-no_or_yes}"
    export MATRIX_DOMAIN_NAME REPORT_STATS

    matrix_generate_synapse_file "$INSTALL_DIR/homeserver.synapse.yaml"
    # shellcheck disable=SC2086
    diff -${DIFFPARAMS} "$INSTALL_DIR/homeserver.synapse.yaml" "${MATRIX_DATA_DIR}/homeserver.yaml"
    rm "$INSTALL_DIR/homeserver.synapse.yaml"
}

function matrix_generate {
    breakup="0"
    [[ -z "${MATRIX_DOMAIN_NAME}" ]] && echo "STOP! environment variable MATRIX_DOMAIN_NAME must be set" && breakup="1"
    [[ -z "${REPORT_STATS}" ]] && echo "STOP! environment variable REPORT_STATS must be set to 'no' or 'yes'" && breakup="1"
    [[ "${breakup}" == "1" ]] && exit 1

    [[ "${REPORT_STATS}" != "yes" ]] && [[ "${REPORT_STATS}" != "no" ]] && \
        echo "STOP! REPORT_STATS needs to be 'no' or 'yes'" && breakup="1"

    homeserver_config="${MATRIX_DATA_DIR}/homeserver.yaml"
    if [ -f $homeserver_config ]; then
        rm $homeserver_config
    fi
    matrix_generate_homeserver_file $homeserver_config

    turnkey=
    if [ -f /etc/turnserver.conf ]; then
        turnkey=$(grep 'static-auth-secret' /etc/turnserver.conf | awk -F '=' '{print $2}')
    fi
    matrix_configure_homeserver_yaml "${turnkey}" $homeserver_config
}

function create_matrix_user_removal_script {
    read_config_param ONION_ONLY
    read_config_param MY_USERNAME
    read_config_param MATRIX_DOMAIN_NAME

    curl_command='curl'
    homebase="https://$MATRIX_DOMAIN_NAME"
    if [[ "$ONION_ONLY" != 'no' ]]; then
        curl_command='torsocks curl'
        homebase="http://$(cat /var/lib/tor/hidden_service_matrix/hostname)"
    fi

    matrix_domain=$MATRIX_DOMAIN_NAME
    if [[ "$ONION_ONLY" != 'no' ]]; then
        matrix_domain=$(cat /var/lib/tor/hidden_service_matrix/hostname)
    fi

    matrix_remove_user=/usr/bin/matrix-remove-user
    { echo '#!/bin/bash';
      echo "cd $MATRIX_DATA_DIR || exit 1";
      echo "remove_username=\$1";
      echo "if [ ! \"\$remove_username\" ]; then";
      echo '    exit 1';
      echo 'fi';
      echo "ADMIN=\"@${MY_USERNAME}:$MATRIX_DOMAIN_NAME\"";
      echo 'BUSY="pragma busy_timeout=20000"';
      echo "BUFFER=\$(sqlite3 homeserver.db \"\$BUSY;select token from access_tokens where user_id like '\$ADMIN' order by id desc limit 1;\")";
      echo "TOKEN=\$(echo \$BUFFER|awk '{print \$2}')";
      echo 'set -x';
      echo "${curl_command} -X POST \"${homebase}/_synapse/admin/v1/deactivate/%40\$remove_username%3A$matrix_domain?access_token=\$TOKEN\" --data '{\"erase\": true}'"; } > $matrix_remove_user

    chmod +x $matrix_remove_user
}

function create_matrix_user_reactivation_script {
    read_config_param ONION_ONLY
    read_config_param MY_USERNAME
    read_config_param MATRIX_DOMAIN_NAME

    curl_command='curl'
    homebase="https://$MATRIX_DOMAIN_NAME"
    if [[ "$ONION_ONLY" != 'no' ]]; then
        curl_command='torsocks curl'
        homebase="http://$(cat /var/lib/tor/hidden_service_matrix/hostname)"
    fi

    matrix_domain=$MATRIX_DOMAIN_NAME
    if [[ "$ONION_ONLY" != 'no' ]]; then
        matrix_domain=$(cat /var/lib/tor/hidden_service_matrix/hostname)
    fi

    matrix_reactivate_user=/usr/bin/matrix-reactivate-user
    { echo '#!/bin/bash';
      echo "cd $MATRIX_DATA_DIR || exit 1";
      echo "reactivate_username=\$1";
      echo "reactivate_password=\$2";
      echo "reactivate_password=\${reactivate_password%\$'\n'}";
      echo "if [ ! \"\$reactivate_username\" ]; then";
      echo '    exit 1';
      echo 'fi';
      echo "ADMIN=\"@${MY_USERNAME}:$MATRIX_DOMAIN_NAME\"";
      echo 'BUSY="pragma busy_timeout=20000"';
      echo "BUFFER=\$(sqlite3 homeserver.db \"\$BUSY;select token from access_tokens where user_id like '\$ADMIN' order by id desc limit 1;\")";
      echo "TOKEN=\$(echo \$BUFFER|awk '{print \$2}')";
      echo 'set -x';
      echo "${curl_command} --header \"Authorization: Bearer \${TOKEN}\" -XPUT -d \"{\\\"deactivated\\\": false, \\\"password\\\": \\\"\${reactivate_password}\\\"}\" ${homebase}/_synapse/admin/v2/users/%40\${reactivate_username}%3A${matrix_domain}"; } > $matrix_reactivate_user

    chmod +x $matrix_reactivate_user
}

function create_matrix_whois_script {
    read_config_param ONION_ONLY
    read_config_param MY_USERNAME
    read_config_param MATRIX_DOMAIN_NAME

    curl_command='curl'
    homebase="https://$MATRIX_DOMAIN_NAME"
    if [[ "$ONION_ONLY" != 'no' ]]; then
        curl_command='torsocks curl'
        homebase="http://$(cat /var/lib/tor/hidden_service_matrix/hostname)"
    fi

    matrix_domain=$MATRIX_DOMAIN_NAME
    if [[ "$ONION_ONLY" != 'no' ]]; then
        matrix_domain=$(cat /var/lib/tor/hidden_service_matrix/hostname)
    fi

    matrix_whois_filename=/usr/bin/matrix-whois
    { echo '#!/bin/bash';
      echo "cd $MATRIX_DATA_DIR || exit 1";
      echo "username=\$1";
      echo "if [ ! \"\$username\" ]; then";
      echo '    exit 1';
      echo 'fi';
      echo "ADMIN=\"@${MY_USERNAME}:$MATRIX_DOMAIN_NAME\"";
      echo 'BUSY="pragma busy_timeout=20000"';
      echo "BUFFER=\$(sqlite3 homeserver.db \"\$BUSY;select token from access_tokens where user_id like '\$ADMIN' order by id desc limit 1;\")";
      echo "TOKEN=\$(echo \$BUFFER|awk '{print \$2}')";
      echo 'set -x';
      echo "${curl_command} -X POST \"${homebase}/_synapse/admin/v1/whois/%40\$username%3A$matrix_domain?access_token=\$TOKEN\" --data '{}'"; } > $matrix_whois_filename

    chmod +x $matrix_whois_filename
}

function remove_user_matrix {
    remove_username="$1"

    create_matrix_user_removal_script
    "${PROJECT_NAME}-pass" -u "$remove_username" --rmapp matrix
    $matrix_remove_user "$remove_username"
}

function matrix_enable_registration {
    registration_state="$1"
    if grep -q "enable_registration: ${registration_state}" "${MATRIX_DATA_DIR}/homeserver.yaml"; then
        return
    fi
    sed -i "s|enable_registration:.*|enable_registration: ${registration_state}|g" "${MATRIX_DATA_DIR}/homeserver.yaml"
    grep "enable_registration:.*" "${MATRIX_DATA_DIR}/homeserver.yaml"
    systemctl restart matrix
    if [[ "${registration_state}" == 'True' ]]; then
        # allow time for the daemon to start back up
        # before attempting to register new users
        sleep 8
    fi
}

function add_user_matrix_base {
    new_username="$1"
    new_user_password="$2"
    add_user_matrix_admin=''

    read_config_param MY_USERNAME
    read_config_param MATRIX_DOMAIN_NAME

    if [[ "${new_username}" == "${MY_USERNAME}" ]]; then
        add_user_matrix_admin='--admin'
    else
        add_user_matrix_admin='--no-admin'
    fi

    "${PROJECT_NAME}-pass" -u "${new_username}" -a matrix -p "${new_user_password}"

    cd $MATRIX_DATA_DIR || return
    matrix_enable_registration True

    if [ ! -f /etc/matrix/env/bin/activate ]; then
        echo 'Missing /etc/matrix/env/bin/activate'
        return
    fi

    echo "register_new_matrix_user -c \"${MATRIX_DATA_DIR}/homeserver.yaml\" -u \"${new_username}\" -p \"password\" $add_user_matrix_admin http://localhost:${MATRIX_PORT}"
    { echo '#!/bin/bash';
      echo 'cd /etc/matrix || exit 1';
      echo 'source /etc/matrix/env/bin/activate';
      echo "if ! register_new_matrix_user -c \"${MATRIX_DATA_DIR}/homeserver.yaml\" -u \"\${1}\" -p \"\${2}\" \${3} http://localhost:${MATRIX_PORT}; then";
      echo '  deactivate';
      echo '  exit 2';
      echo 'fi';
      echo 'deactivate';
      echo 'exit 0'; } > /usr/bin/register-matrix-user
    chmod +x /usr/bin/register-matrix-user

    create_matrix_user_reactivation_script
    if [ "$matrix_reactivate_user" ]; then
        $matrix_reactivate_user "${new_matrix_username}" "${new_matrix_password}"
    fi

    register_result_file="/etc/matrix/.registeruser_${new_username}"
    if [ -f "$register_result_file" ]; then
        rm "$register_result_file"
    fi
    /bin/bash /usr/bin/register-matrix-user "${new_username}" "${new_user_password}" $add_user_matrix_admin > "$register_result_file"

    register_success=
    if [ -f "$register_result_file" ]; then
        cat "$register_result_file"
        # Note: this might not be language invariant
        if grep -q "Success" "$register_result_file"; then
            register_success=1
        else
            # Note: this might not be language invariant
            if grep -q "already taken" "$register_result_file"; then
                register_success=1
            fi
        fi
        rm "$register_result_file"
    fi

    if [ ! $register_success ]; then
        # shellcheck disable=SC2086
        if [ $matrix_is_installing ]; then
            echo "1"
            return
        else
            create_matrix_user_password_script
            /usr/bin/matrix-passwd "${new_username}" "${new_user_password}"
        fi
    fi
    matrix_enable_registration False

    echo "0"
}

function add_user_matrix {
    new_matrix_username="$1"
    new_matrix_password="$2"

    # yes, this is quite unpleasant. What else did you expect from Synapse?

    matrix_user_added=
    # shellcheck disable=SC2034
    for i in {1..16}
    do
        if [[ $(add_user_matrix_base "${new_matrix_username}" "${new_matrix_password}" | tail -n 1) == "0" ]]; then
            matrix_user_added=1
            echo "0"
            return
        fi
        sleep 2
    done
    echo "1"
}

function install_interactive_matrix {
    if [ ! "$ONION_ONLY" ]; then
        ONION_ONLY='no'
    fi

    if [[ $ONION_ONLY != "no" ]]; then
        MATRIX_DOMAIN_NAME='matrix.local'
        write_config_param "MATRIX_DOMAIN_NAME" "$MATRIX_DOMAIN_NAME"
    else
        function_check interactive_site_details
        interactive_site_details "matrix" "MATRIX_DOMAIN_NAME" "MATRIX_CODE"
        if [ ! $MATRIX_DOMAIN_NAME ]; then
            return
        fi
        read_config_param "MATRIX_DOMAIN_NAME"
        read_config_param "MATRIX_CODE"
    fi
    APP_INSTALLED=1
}


function create_matrix_user_password_script {
    read_config_param ONION_ONLY
    read_config_param MY_USERNAME
    read_config_param MATRIX_DOMAIN_NAME

    curl_command='curl'
    homebase="https://$MATRIX_DOMAIN_NAME"
    if [[ "$ONION_ONLY" != 'no' ]]; then
        curl_command='torsocks curl'
        homebase="http://$(cat /var/lib/tor/hidden_service_matrix/hostname)"
    fi

    matrix_domain=$MATRIX_DOMAIN_NAME
    if [[ "$ONION_ONLY" != 'no' ]]; then
        matrix_domain=$(cat /var/lib/tor/hidden_service_matrix/hostname)
    fi

    matrix_passwd_filename=/usr/bin/matrix-passwd
    { echo '#!/bin/bash';
      echo "cd $MATRIX_DATA_DIR || exit 1";
      echo "username=\$1";
      echo "if [ ! \"\$username\" ]; then";
      echo '    echo "No username given"';
      echo '    exit 1';
      echo 'fi';
      echo "new_password=\$2";
      echo "if [ ! \"\$new_password\" ]; then";
      echo '    echo "No password given"';
      echo '    exit 2';
      echo 'fi';
      echo "ADMIN=\"@${MY_USERNAME}:$MATRIX_DOMAIN_NAME\"";
      echo 'BUSY="pragma busy_timeout=20000"';
      echo "BUFFER=\$(sqlite3 homeserver.db \"\$BUSY;select token from access_tokens where user_id like '\$ADMIN' order by id desc limit 1;\")";
      echo "TOKEN=\$(echo \$BUFFER|awk '{print \$2}')";
      echo 'set -x';
      echo "${curl_command} -X POST \"${homebase}/_synapse/admin/v1/reset_password/%40\$username%3A$matrix_domain?access_token=\$TOKEN\" --data '{\"new_password\":\"\$new_password\"}'"; } > $matrix_passwd_filename

    chmod +x $matrix_passwd_filename
}

function change_password_matrix {
    curr_username="$1"
    new_user_password="$2"

    create_matrix_user_password_script
    /usr/bin/matrix-passwd "$curr_username" "$new_user_password"

    "${PROJECT_NAME}-pass" -u "$curr_username" -a matrix -p "$new_user_password"
}

function reconfigure_matrix {
    echo -n ''
}

function upgrade_matrix {
    if [ ! -d /etc/matrix ]; then
       return
    fi

    if [ ! -f /etc/turnserver.conf ]; then
        install_turn
    fi

    create_matrix_user_reactivation_script

    if grep -q 'room_invite_state_types' "${MATRIX_DATA_DIR}/homeserver.yaml"; then
        sed -i '/room_invite_state_types/d' "${MATRIX_DATA_DIR}/homeserver.yaml"
        sed -i '/m.room.join_rules/d' "${MATRIX_DATA_DIR}/homeserver.yaml"
        sed -i '/m.room.canonical_alias/d' "${MATRIX_DATA_DIR}/homeserver.yaml"
        sed -i '/m.room.avatar/d' "${MATRIX_DATA_DIR}/homeserver.yaml"
        sed -i '/m.room.name/d' "${MATRIX_DATA_DIR}/homeserver.yaml"
    fi

    # log_file config parameter no longer used
    if grep -q 'log_file' "${MATRIX_DATA_DIR}/homeserver.yaml"; then
        sed -i '/log_file/d' "${MATRIX_DATA_DIR}/homeserver.yaml"
        systemctl restart matrix
    fi

    set_matrix_trusted_key_servers
    matrix_add_onion_federation

    # update connection rate limits
    read_config_param MATRIX_DOMAIN_NAME
    matrix_nginx_site=/etc/nginx/sites-available/$MATRIX_DOMAIN_NAME
    if ! grep -q 'req_limit_per_ip burst=50 ' "$matrix_nginx_site"; then
        sed -i 's|limit_req zone.*|limit_req zone=req_limit_per_ip burst=50 nodelay;|g' "$matrix_nginx_site"
    fi
    if ! grep -q 'conn_limit_per_ip 50;' "$matrix_nginx_site"; then
        sed -i 's|limit_conn conn_limit_per_ip.*|limit_conn conn_limit_per_ip 50;|g' "$matrix_nginx_site"
    fi

    if ! grep -q 'server_notices:' "${MATRIX_DATA_DIR}/homeserver.yaml"; then
        { echo 'server_notices:';
          echo '  system_mxid_localpart: server';
          echo "  system_mxid_display_name: \"${PROJECT_NAME}\"";
          echo '  room_name: "Server Notices"'; } >> "${MATRIX_DATA_DIR}/homeserver.yaml"
        chown matrix:matrix "${MATRIX_DATA_DIR}/homeserver.yaml"
        systemctl restart matrix
    fi

    if ! grep -q '_synapse' "$matrix_nginx_site"; then
        read_config_param ONION_ONLY
        create_matrix_nginx_config
        systemctl restart nginx
    fi

    matrix_expire_old_posts

    CURR_MATRIX_COMMIT=$(get_completion_param "matrix commit")
    if [[ "$CURR_MATRIX_COMMIT" == "$MATRIX_COMMIT" ]]; then

        # alter systemd daemon if necessary for the current python version
        if [ ! -f /etc/matrix/run-matrix ]; then
            matrix_systemd_daemon
            systemctl restart matrix
        else
            if ! grep -q "$MATRIX_PYTHON " /etc/matrix/run-matrix; then
                matrix_systemd_daemon
                systemctl restart matrix
            fi
        fi

        return
    fi

    systemctl stop coturn
    systemctl stop matrix

    function_check set_repo_commit
    set_repo_commit /etc/matrix "matrix commit" "$MATRIX_COMMIT" $MATRIX_REPO
    cd /etc/matrix || exit 62
    if [ ! -d /etc/matrix/tmp ]; then
        mkdir /etc/matrix/tmp
    fi
    export TMPDIR=/etc/matrix/tmp

    # recreate the daemon if needed
    matrix_systemd_daemon

    sed -i 's/ssl.PROTOCOL_SSLv23/ssl.PROTOCOL_TLSv1/g' /usr/local/bin/register_new_matrix_user

    chown -R matrix:matrix /etc/matrix
    chown -R matrix:matrix $MATRIX_DATA_DIR

    install_matrix_venv

    cd /etc/matrix | return

    matrix_set_permissions

    if [ -f /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.dhparam ]; then
        chmod 755 /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.dhparam
    fi

    systemctl start coturn
    systemctl start matrix

    export TMPDIR=/tmp
    if [ -d /etc/matrix/tmp ]; then
        rm -rf /etc/matrix/tmp/*
    fi
}

function backup_local_matrix {
    source_directory=/etc/matrix
    if [ -d $source_directory ]; then
        systemctl stop coturn
        systemctl stop matrix

        function_check backup_directory_to_usb
        backup_directory_to_usb $source_directory matrix
        source_directory=$MATRIX_DATA_DIR
        if [ -d $source_directory ]; then
            backup_directory_to_usb $source_directory matrixdata
        fi

        systemctl start coturn
        systemctl start matrix
    fi
}

function restore_local_matrix {
    if [ -d /etc/matrix ]; then
        systemctl stop coturn
        systemctl stop matrix

        temp_restore_dir=/root/tempmatrix
        function_check restore_directory_from_usb
        restore_directory_from_usb $temp_restore_dir matrix
        if [ -d $temp_restore_dir/etc/matrix ]; then
            cp -r $temp_restore_dir/etc/matrix/* /etc/matrix
        else
            cp -r $temp_restore_dir/* /etc/matrix/
        fi
        # shellcheck disable=SC2181
        if [ ! "$?" = "0" ]; then
            function_check backup_unmount_drive
            backup_unmount_drive
            exit 37
        fi
        rm -rf $temp_restore_dir
        chown -R matrix:matrix /etc/matrix

        temp_restore_dir=/root/tempmatrixdata
        restore_directory_from_usb $temp_restore_dir matrixdata
        if [ -d "$temp_restore_dir$MATRIX_DATA_DIR" ]; then
            cp -r "$temp_restore_dir$MATRIX_DATA_DIR"/* $MATRIX_DATA_DIR
        else
            cp -r $temp_restore_dir/* $MATRIX_DATA_DIR/
        fi
        # shellcheck disable=SC2181
        if [ ! "$?" = "0" ]; then
            function_check backup_unmount_drive
            backup_unmount_drive
            exit 78
        fi
        rm -rf $temp_restore_dir
        chown -R matrix:matrix $MATRIX_DATA_DIR

        if [[ "$ONION_ONLY" == "no" ]]; then
            if [ -f /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.dhparam ]; then
                chmod 755 /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.dhparam
            fi
        fi

        systemctl start coturn
        systemctl start matrix
    fi
}

function backup_remote_matrix {
    echo -n ''
}

function restore_remote_matrix {
    echo -n ''
}

function remove_matrix {
    if [[ "$ONION_ONLY" == 'no' ]]; then
        firewall_remove ${MATRIX_HTTP_PORT}
        firewall_max_connections $MATRIX_PORT $MATRIX_FIREWALL_MAX_CONNECTIONS remove
    fi

    nginx_dissite $MATRIX_DOMAIN_NAME
    remove_certs $MATRIX_DOMAIN_NAME
    if [ -f /etc/nginx/sites-available/$MATRIX_DOMAIN_NAME ]; then
        rm /etc/nginx/sites-available/$MATRIX_DOMAIN_NAME
    fi
    if [ ! -d /var/www/$MATRIX_DOMAIN_NAME ]; then
        rm -rf /var/www/$MATRIX_DOMAIN_NAME
    fi
    function_check remove_ddns_domain
    remove_ddns_domain $MATRIX_DOMAIN_NAME

    systemctl stop matrix

    function_check remove_turn
    remove_turn

    systemctl disable matrix
    if [ -f /etc/systemd/system/matrix.service ]; then
        rm /etc/systemd/system/matrix.service
    fi
    systemctl daemon-reload
    $REMOVE_PACKAGES_PURGE coturn
    cd /etc/matrix || exit 26
    $MATRIX_PIP uninstall .
    rm -rf $MATRIX_DATA_DIR
    rm -rf /etc/matrix

    groupdel -f matrix
    userdel -r matrix

    remove_onion_service matrix ${MATRIX_ONION_PORT} ${MATRIX_HTTP_PORT}

    #sed -i "/# Matrix Server/,/# End of Matrix Server/d" /etc/nginx/sites-available/${MATRIX_DOMAIN_NAME}
    systemctl restart nginx

    remove_completion_param install_matrix
    sed -i '/matrix/d' "$COMPLETION_FILE"

    rm /etc/avahi/services/matrix.service
    systemctl restart avahi-daemon
}

function matrix_wait_for_database {
    chown -R matrix:matrix ${MATRIX_DATA_DIR}
    chown -R matrix:matrix /etc/matrix

    # remove any pre-existing database
    if [ ! -f "${MATRIX_DATA_DIR}/homeserver.db" ]; then
        systemctl start matrix
    else
        systemctl restart matrix
    fi

    systemctl restart nginx

    echo $'Waiting for the database to be created'
    # shellcheck disable=SC2034
    for i in {1..30}
    do
        echo -n '.'
        sleep 6
        if [ -f "${MATRIX_DATA_DIR}/homeserver.db" ]; then
            chown -R matrix:matrix "${MATRIX_DATA_DIR}/homeserver.db"
            chmod 700 "${MATRIX_DATA_DIR}/homeserver.db"
            if [ ! -s "${MATRIX_DATA_DIR}/homeserver.db" ]; then
                # database is empty, restart to regenerate it
                systemctl restart matrix
            else
                break
            fi
        fi
    done
    echo ''

    if [ ! -f "${MATRIX_DATA_DIR}/homeserver.db" ]; then
        echo $'No matrix home server database was created'
        exit 23
    fi
    chmod 700 "${MATRIX_DATA_DIR}/homeserver.db"
}

function install_home_server {
    if [ -d /etc/matrix ]; then
        rm -rf /etc/matrix
    fi

    if [ -d /repos/matrix ]; then
        mkdir /etc/matrix
        cp -r -p /repos/matrix/. /etc/matrix
        cd /etc/matrix || exit 23
        git pull
    else
        function_check git_clone
        git_clone $MATRIX_REPO /etc/matrix
    fi

    if [ ! -d /etc/matrix ]; then
        echo $'Unable to clone matrix repo'
        exit 67
    fi

    increment_app_install_progress

    cd /etc/matrix || exit 73
    git checkout $MATRIX_COMMIT -b $MATRIX_COMMIT
    set_completion_param "matrix commit" "$MATRIX_COMMIT"
    if [ ! -d "$INSTALL_DIR/matrix" ]; then
        mkdir -p "$INSTALL_DIR/matrix"
    fi
    rm -rf /usr/local/lib/${PYTHON_VERSION}/dist-packages/ldap*
    if [ -d "$INSTALL_DIR/matrix" ]; then
        rm -rf "$INSTALL_DIR/matrix/"*
    fi

    increment_app_install_progress

    install_matrix_venv

    if [ ! -d "$MATRIX_DATA_DIR" ]; then
        mkdir "$MATRIX_DATA_DIR"
    fi

    if ! grep -q "matrix:" /etc/group; then
        groupadd matrix
    fi
    useradd -c "Matrix system account" -d "$MATRIX_DATA_DIR" -m -r -g matrix matrix
    usermod -a -G www-data matrix
    if [[ "$ONION_ONLY" == "no" ]]; then
        usermod -a -G ssl-cert matrix
    fi

    increment_app_install_progress

    function_check install_turn
    if [ ! -f /etc/turnserver.conf ]; then
        install_turn
    fi
    # shellcheck disable=SC2034
    MATRIX_SECRET="${turnkey}"

    increment_app_install_progress

    function_check matrix_generate
    matrix_generate

    # Disable the web client
    sed -i 's|web_client:.*|web_client: False|g' "$MATRIX_DATA_DIR/homeserver.yaml"
    sed -i 's|, webclient||g' "$MATRIX_DATA_DIR/homeserver.yaml"
    sed -i "/- '0.0.0.0'/d" "$MATRIX_DATA_DIR/homeserver.yaml"
    if ! grep -q "# - '::'" "$MATRIX_DATA_DIR/homeserver.yaml"; then
        sed -i "s| - '::'|# - '::'|g" "$MATRIX_DATA_DIR/homeserver.yaml"
    fi

    if [[ "$ONION_ONLY" != 'no' ]]; then
        sed -i "s|- matrix.local|- $MATRIX_ONION_HOSTNAME|g" "$MATRIX_DATA_DIR/homeserver.yaml"
    fi

    chmod -R 700 "$MATRIX_DATA_DIR/homeserver.yaml"
    chown -R matrix:matrix /etc/matrix
    chown -R matrix:matrix $MATRIX_DATA_DIR

    #sed -i 's/ssl.PROTOCOL_SSLv23/ssl.PROTOCOL_TLSv1/g' /usr/local/bin/register_new_matrix_user

    increment_app_install_progress

    matrix_generate_certs_for_onion

    increment_app_install_progress

    matrix_systemd_daemon

    increment_app_install_progress

    matrix_wait_for_database

    echo $'Accessing the homeserver database'
    cd "$MATRIX_DATA_DIR" || exit 36
    homeserver_database_updated=
    # shellcheck disable=SC2034
    for i in {1..60}
    do
        echo -n '.'
        sleep 2
        if sqlite3 homeserver.db "PRAGMA auto_vacuum = FULL;"; then
            homeserver_database_updated=1
            break
        fi
    done
    echo ''

    if [ ! $homeserver_database_updated ]; then
        echo $"$MATRIX_DATA_DIR/homeserver.db could not be accessed"
    fi

    if [ ! "${MATRIX_PASSWORD}" ]; then
        if [ -f "${IMAGE_PASSWORD_FILE}" ]; then
            MATRIX_PASSWORD="$(printf "%s" "$(cat "$IMAGE_PASSWORD_FILE")")"
        else
            MATRIX_PASSWORD="$(create_password "${MINIMUM_PASSWORD_LENGTH}")"
        fi
    fi

    if [[ "$ONION_ONLY" == 'no' ]]; then
        firewall_add matrix ${MATRIX_HTTP_PORT}
        # netstat -an | grep :5222 | wc -l
        firewall_max_connections $MATRIX_PORT $MATRIX_FIREWALL_MAX_CONNECTIONS
    fi

    rm -rf "${MATRIX_DATA_DIR}/Maildir"
    rm -rf "${MATRIX_DATA_DIR}/.mutt"
    rm -f "${MATRIX_DATA_DIR}/.muttrc"
    rm -f "${MATRIX_DATA_DIR}/.mutt-alias"
    rm -f "${MATRIX_DATA_DIR}/.procmailrc"
    rm -f "${MATRIX_DATA_DIR}/.emacs-mutt"
}

function matrix_update_element_config {
    read_config_param ELEMENT_DOMAIN_NAME
    if [ ! "$ELEMENT_DOMAIN_NAME" ]; then
        return
    fi
    if [ ! -d "/var/www/$ELEMENT_DOMAIN_NAME/htdocs" ]; then
        return
    fi
    element_set_default_homeserver
}

function install_matrix_venv {
    REINSTALL_PACKAGES python3-pip

    { echo '#!/bin/bash';
      echo 'cd /etc/matrix | exit 1';
      echo 'virtualenv -p python3 /etc/matrix/env';
      echo 'source /etc/matrix/env/bin/activate';
      echo 'pip3 install -U pip virtualenv six packaging appdirs';
      echo 'pip3 install -U setuptools';
      echo 'pip3 install -U matrix-synapse';
      echo "pip3 install -U 'prometheus_client>=0.0.18,<0.8.0'";
      echo 'pip3 install -U jsonschema>=2.5.1';
      echo 'deactivate'; } > "$INSTALL_DIR/install_matrix"
    chmod +x "$INSTALL_DIR/install_matrix"
    /bin/bash "$INSTALL_DIR/install_matrix"

    if [ ! -d /etc/matrix/env/bin ]; then
        echo 'Matrix env failed to install'
        return
    fi
}

function install_matrix {
    matrix_is_installing=1
    increment_app_install_progress

    # shellcheck disable=SC2086
    check_ram_availability $MATRIX_MINIMUM_RAM_MB

    if [ ! -d "${INSTALL_DIR}" ]; then
        mkdir -p "${INSTALL_DIR}"
    fi
    # remove daemon
    if [ -f /etc/systemd/system/matrix.service ]; then
        systemctl stop matrix
        systemctl disable matrix
        rm /etc/systemd/system/matrix.service
    fi
    # remove any previous install attempt
    if [ -d /etc/matrix ]; then
        rm -rf /etc/matrix
    fi
    if [ -d "${MATRIX_DATA_DIR}" ]; then
        rm -rf "${MATRIX_DATA_DIR}"
    fi

    increment_app_install_progress

    if [[ ${ONION_ONLY} == 'no' ]]; then
        if [ ! -f /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.pem ]; then
            if [ -f /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.crt ]; then
                rm /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.crt
            fi
            if [ -f /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.dhparam ]; then
                rm /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.dhparam
            fi
            echo $'Obtaining certificate for the matrix domain'
            function_check create_site_certificate
            create_site_certificate ${MATRIX_DOMAIN_NAME} 'yes'
            chmod 755 /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.dhparam

            if [ -f /etc/ssl/certs/${MATRIX_DOMAIN_NAME}.crt ]; then
                echo $'Incorrect certificate generated'
                exit 73
            fi
        fi
        chgrp -R ssl-cert /etc/letsencrypt
        chmod -R g=rX /etc/letsencrypt
    fi

    increment_app_install_progress

    export DEBIAN_FRONTEND=noninteractive
    if [ -d "/usr/local/lib/${PYTHON_VERSION}/dist-packages/pip" ]; then
        rm -rf "/usr/local/lib/${PYTHON_VERSION}/dist-packages/pip"
    fi
    REINSTALL_PACKAGES python3-pip

    if [ -d "/usr/local/lib/${PYTHON_VERSION}/dist-packages/twisted" ]; then
        pip3 uninstall -y twisted
    fi

    INSTALL_PACKAGES coreutils \
            curl sqlite3 file gcc git libevent-2.1-7 \
            libevent-dev libffi-dev libffi8 \
            libgnutls28-dev libjpeg62-turbo \
            libjpeg62-turbo-dev libldap-common \
            libldap2-dev libsasl2-dev \
            libsqlite3-dev libssl-dev \
            libssl3 libtool libxml2 \
            libxml2-dev libxslt1-dev libxslt1.1 \
            make rustc \
            python3 python3-dev \
            python3-pip python3-psycopg2 python3-venv \
            python3-setuptools \
            sqlite3 unzip \
            zlib1g zlib1g-dev libpq-dev \
            python3-lxml python3-treq \
            libpq-dev python3-twisted \
            python3-webencodings python3-urllib3 \
            python3-unpaddedbase64 python3-typing-extensions \
            python3-treq python3-sortedcontainers \
            python3-simplejson python3-signedjson \
            python3-service-identity \
            python3-virtualenv

    increment_app_install_progress

    if [ ! -f "$MATRIX_PIP" ]; then
        # shellcheck disable=SC2230
        MATRIX_PIP=$(which pip3)
    fi

    if [ ! -d "$INSTALL_DIR/tmp" ]; then
        mkdir -p "$INSTALL_DIR/tmp"
    fi
    export TMPDIR="$INSTALL_DIR/tmp"

    $MATRIX_PIP install --upgrade pip==9.0.3
    #    $MATRIX_PIP install --upgrade pip==19.0.2

    if [ -f /usr/local/bin/pip3 ]; then
        cp /usr/local/bin/pip3 /usr/bin/pip3
    fi

    increment_app_install_progress

    install_matrix_venv

    cd /etc/matrix | exit 85

    matrix_set_permissions

    increment_app_install_progress

    function_check create_matrix_nginx_config
    create_matrix_nginx_config

    increment_app_install_progress

    function_check install_home_server
    install_home_server

    increment_app_install_progress

    systemctl restart nginx

    increment_app_install_progress

    systemctl restart coturn

    increment_app_install_progress

    systemctl restart matrix

    increment_app_install_progress

    function_check update_default_domain
    update_default_domain

    # wait for nginx to start otherwise user add fails later
    sleep 5

    increment_app_install_progress

    if [[ "$ONION_ONLY" == 'no' ]]; then
        sed -i "s|server_name: .*|server_name: \"${MATRIX_DOMAIN_NAME}\"|g" "${MATRIX_DATA_DIR}/homeserver.yaml"
    else
        sed -i "s|server_name: .*|server_name: \"${MATRIX_ONION_HOSTNAME}\"|g" "${MATRIX_DATA_DIR}/homeserver.yaml"
    fi

    increment_app_install_progress

    matrix_generate_certs_for_onion

    increment_app_install_progress

    systemctl restart matrix

    increment_app_install_progress

    matrix_wait_for_database

    increment_app_install_progress

    sleep 10

    increment_app_install_progress

    echo "Adding a matrix user for ${MY_USERNAME}"
    add_user_matrix "${MY_USERNAME}" "${MATRIX_PASSWORD}"

    if [ ! $matrix_user_added ]; then
        echo $'Failed to add matrix admin user';
        exit 87
    fi
    create_matrix_user_removal_script
    create_matrix_user_reactivation_script
    matrix_expire_old_posts

    increment_app_install_progress

    set_completion_param "matrix domain" "$MATRIX_DOMAIN_NAME"

    # Add avahi services
    { echo '<?xml version="1.0" standalone="no"?><!--*-nxml-*-->';
      echo '<!DOCTYPE service-group SYSTEM "avahi-service.dtd">';
      echo '<service-group>';
      echo '  <name replace-wildcards="yes">%h MATRIX</name>';
      echo '  <service>';
      echo '    <type>_matrix._tcp</type>';
      echo "    <port>$MATRIX_HTTP_PORT</port>";
      echo '  </service>';
      echo '  <service>';
      echo '    <type>_matrix._udp</type>';
      echo "    <port>$MATRIX_HTTP_PORT</port>";
      echo '  </service>';
      echo '</service-group>'; } > /etc/avahi/services/matrix.service

    systemctl restart avahi-daemon

    increment_app_install_progress

    matrix_update_element_config

    increment_app_install_progress

    matrix_add_onion_federation

    increment_app_install_progress

    create_matrix_whois_script

    increment_app_install_progress

    set_matrix_trusted_key_servers

    increment_app_install_progress

    if [ ! -f /usr/bin/matrix-reactivate-user ]; then
        create_matrix_user_reactivation_script
    fi

    increment_app_install_progress

    export TMPDIR=/tmp
    if [ -d "$INSTALL_DIR/tmp" ]; then
        rm -rf "$INSTALL_DIR/tmp"
    fi

    APP_INSTALLED=1
}
