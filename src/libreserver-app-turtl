#!/bin/bash
#  _    _ _            ___
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|
#
# Turtl notes server
#
# The server app works, but the desktop and android clients have hardcoded
# root certificates which don't work with lets encrypt. There is a hacky
# workaround with certbot, but it doesn't seem like a good idea to support
# that. Until the clients are updated this app will be deprecated.
#
# License
# =======
#
# Copyright (C) 2018-2023 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VARIANTS=''

APP_CATEGORY=publishing

IN_DEFAULT_INSTALL=0
INSTALLED_ON_DEFAULT_DOMAIN=0
SHOW_ON_ABOUT=1
NOT_ON_HOMEPAGE=1
REQUIRES_APP=

# whether to show the domain name in the web UI
SHOW_DOMAIN_IN_WEBADMIN=1
NOT_ON_API=0

TURTL_DOMAIN_NAME=
TURTL_CODE=
TURTL_ONION_PORT=9473
TURTL_REPO="https://github.com/turtl/server"
TURTL_COMMIT='4faa272e8a274582327ef3f2dcb18caf2124eeff'
TURTL_PORT_INTERNAL=8181

# These parameters are used by the FreedomBox mobile app and web UI
TURTL_SHORT_DESCRIPTION='The secure collaborative notebook'
TURTL_DESCRIPTION='Organizes bookmarks, passwords, files or shopping lists and makes it easy to find them again later.'
TURTL_MOBILE_APP_URL="https://f-droid.org/packages/com.lyonbros.turtl/"

turtl_variables=(ONION_ONLY
                 TURTL_DOMAIN_NAME
                 TURTL_CODE
                 DDNS_PROVIDER
                 MY_EMAIL_ADDRESS
                 MY_USERNAME)

function upgrade_distro_turtl {
    target_distro="$1"

    if [[ "$target_distro" == 'bookworm' ]]; then
        echo -n ''
    fi
}

function turtl_setting_registration {
    allow_registrations="$1"

    if [[ "$allow_registrations" == '1' ]]; then
        sed -i '/var join = function(req, res) {};/d' /etc/turtl/controllers/users.js
        sed -i 's|var join_disabled = function|var join = function|g' /etc/turtl/controllers/users.js
        systemctl restart turtl
    fi

    if [[ "$allow_registrations" == '0' ]]; then
        sed -i 's|var join = function|var join_disabled = function|g' /etc/turtl/controllers/users.js
        sed -i '/var join_disabled = function/i var join = function(req, res) {};' /etc/turtl/controllers/users.js
        systemctl restart turtl
    fi
}

function logging_on_turtl {
    if [ ! -d /etc/turtl ]; then
        return
    fi
    sed -i "s|loglevel:.*|loglevel: 'debug'|g" /etc/turtl/config/config.yaml
    systemctl restart turtl
}

function logging_off_turtl {
    if [ ! -d /etc/turtl ]; then
        return
    fi
    sed -i "s|loglevel:.*|loglevel: 'error'|g" /etc/turtl/config/config.yaml
    systemctl restart turtl
}

function remove_user_turtl {
    remove_username="$1"

    # TODO: remove user
    "${PROJECT_NAME}-pass" -u "${remove_username}" --rmapp turtl
}

function add_user_turtl {
    new_username="$1"
    new_user_password="$2"

    # TODO: add user
    "${PROJECT_NAME}-pass" -u "${new_username}" -a turtl -p "${new_user_password}"
    echo '0'
}

function install_interactive_turtl {
    if [ ! "$ONION_ONLY" ]; then
        ONION_ONLY='no'
    fi

    if [[ "$ONION_ONLY" != "no" ]]; then
        TURTL_DOMAIN_NAME='turtl.local'
        write_config_param "TURTL_DOMAIN_NAME" "${TURTL_DOMAIN_NAME}"
    else
        interactive_site_details "turtl" "TURTL_DOMAIN_NAME" "TURTL_CODE"
    fi
    APP_INSTALLED=1
}

function change_password_turtl {
    curr_username="$1"
    new_user_password="$2"

    read_config_param 'TURTL_DOMAIN_NAME'

    "${PROJECT_NAME}-pass" -u "${curr_username}" -a turtl -p "${new_user_password}"
}

function turtl_create_database {
    if [ -f "${IMAGE_PASSWORD_FILE}" ]; then
        TURTL_ADMIN_PASSWORD="$(printf "%d" "$(cat "")")"
    else
        if [ ! "${TURTL_ADMIN_PASSWORD}" ]; then
            TURTL_ADMIN_PASSWORD=$(create_password "${MINIMUM_PASSWORD_LENGTH}")
        fi
    fi
    if [ ! "${TURTL_ADMIN_PASSWORD}" ]; then
        return
    fi

    systemctl restart postgresql
    drop_database_postgresql turtl turtl
    create_database_postgrasql turtl "${TURTL_ADMIN_PASSWORD}" turtl
    run_system_query_postgresql "set statement_timeout to 40000;"
}

function reconfigure_turtl {
    # This is used if you need to switch identity. Dump old keys and generate new ones
    echo -n ''
}

function configure_interactive_turtl {
    W=(1 $"Option 1"
       2 $"Option 2")

    while true
    do
        # shellcheck disable=SC2068
        selection=$(dialog --backtitle $"LibreServer Administrator Control Panel" --title $"turtl" --menu $"Choose an operation, or ESC for main menu:" 14 70 3 "${W[@]}" 3>&2 2>&1 1>&3)

        if [ ! "$selection" ]; then
           break
        fi
        case $selection in
            1) # call some function for option 1
               ;;
            2) # call some function for option 2
               ;;
        esac
    done
}

function upgrade_turtl {
    CURR_TURTL_COMMIT=$(get_completion_param "turtl commit")
    if [[ "${CURR_TURTL_COMMIT}" == "${TURTL_COMMIT}" ]]; then
        return
    fi

    if grep -q "turtl domain" "${COMPLETION_FILE}"; then
        TURTL_DOMAIN_NAME=$(get_completion_param "turtl domain")
    fi

    # update to the next commit
    set_repo_commit "/etc/turtl" "turtl commit" "${TURTL_COMMIT}" "${TURTL_REPO}"
    chown -R turtl:turtl "/etc/turtl"
    systemctl restart turtl
}

function backup_local_turtl {
    TURTL_DOMAIN_NAME='turtl'
    if grep -q "turtl domain" "${COMPLETION_FILE}"; then
        TURTL_DOMAIN_NAME=$(get_completion_param "turtl domain")
    fi

    source_directory=/etc/turtl

    suspend_site "${TURTL_DOMAIN_NAME}"

    systemctl stop turtl

    dest_directory=turtl
    backup_directory_to_usb "${source_directory}" $dest_directory

    USE_POSTGRESQL=1
    backup_database_to_usb turtl

    restart_site
    systemctl start turtl
}

function restore_local_turtl {
    if ! grep -q "turtl domain" "${COMPLETION_FILE}"; then
        return
    fi
    TURTL_DOMAIN_NAME=$(get_completion_param "turtl domain")
    if [ ! "${TURTL_DOMAIN_NAME}" ]; then
        return
    fi
    suspend_site "${TURTL_DOMAIN_NAME}"
    systemctl stop turtl

    temp_restore_dir=/root/tempturtl
    turtl_dir=/etc/turtl

    turtl_create_database

    USE_POSTGRESQL=1
    restore_database turtl
    if [ -d $temp_restore_dir ]; then
        rm -rf $temp_restore_dir
    fi

    restore_directory_from_usb $temp_restore_dir turtl
    if [ -d $temp_restore_dir ]; then
        if [ -d "${temp_restore_dir}${turtl_dir}" ]; then
            cp -rp "${temp_restore_dir}${turtl_dir}"/* "${turtl_dir}"/
        else
            if [ ! -d "${turtl_dir}" ]; then
                mkdir "${turtl_dir}"
            fi
            cp -rp "${temp_restore_dir}"/* "${turtl_dir}"/
        fi
        chown -R turtl:turtl "${turtl_dir}"
        rm -rf ${temp_restore_dir}
    fi
    systemctl start turtl

    restart_site
}

function backup_remote_turtl {
    echo -n ''
}

function restore_remote_turtl {
    echo -n ''
}

function remove_turtl {
    nginx_dissite "${TURTL_DOMAIN_NAME}"
    remove_certs "${TURTL_DOMAIN_NAME}"

    if [ -f /etc/systemd/system/turtl.service ]; then
        systemctl stop turtl
        systemctl disable turtl
        rm /etc/systemd/system/turtl.service
    fi
    userdel -r turtl
    remove_nodejs turtl


    if [ -d "/var/www/${TURTL_DOMAIN_NAME}" ]; then
        rm -rf "/var/www/${TURTL_DOMAIN_NAME}"
    fi
    if [ -f "/etc/nginx/sites-available/${TURTL_DOMAIN_NAME}" ]; then
        rm "/etc/nginx/sites-available/${TURTL_DOMAIN_NAME}"
    fi
    drop_database_postgresql turtl
    remove_onion_service turtl "${TURTL_ONION_PORT}"
    if grep -q "turtl" /etc/crontab; then
        sed -i "/turtl/d" /etc/crontab
    fi
    remove_app turtl
    remove_completion_param install_turtl
    sed -i '/turtl/d' "${COMPLETION_FILE}"

    remove_ddns_domain "${TURTL_DOMAIN_NAME}"
}

function install_turtl {
    increment_app_install_progress

    install_postgresql

    increment_app_install_progress

    install_nodejs turtl
    if [ ! "${TURTL_DOMAIN_NAME}" ]; then
        echo $'No domain name was given for turtl'
        exit 35
    fi

    increment_app_install_progress

    if [ -d "/var/www/${TURTL_DOMAIN_NAME}/htdocs" ]; then
        rm -rf "/var/www/${TURTL_DOMAIN_NAME}/htdocs"
    fi

    if [ -d /etc/turtl ]; then
        rm -rf /etc/turtl
    fi

    mkdir "/var/www/${TURTL_DOMAIN_NAME}"
    if [ -d /repos/turtl ]; then
        if [ -f /repos/turtl/server.js ]; then
            mkdir -p "/var/www/${TURTL_DOMAIN_NAME}/htdocs"
            cp -r -p /repos/turtl/. "/etc/turtl"
            cd "/etc/turtl" || exit 36
            git pull
        else
            mkdir -p "/var/www/${TURTL_DOMAIN_NAME}/htdocs"
            git_clone "${TURTL_REPO}" "/etc/turtl"
        fi
    else
        mkdir -p "/var/www/${TURTL_DOMAIN_NAME}/htdocs"
        git_clone "$TURTL_REPO" "/etc/turtl"
    fi

    increment_app_install_progress

    if [ ! -d "/etc/turtl" ]; then
        echo $'Unable to clone turtl repo'
        exit 87
    fi

    cd "/etc/turtl" || exit 34
    git checkout "${TURTL_COMMIT}" -b "${TURTL_COMMIT}"
    set_completion_param "turtl commit" "${TURTL_COMMIT}"

    increment_app_install_progress

    if ! /usr/bin/npm install; then
        echo $'Failed to install turtl'
        exit 24
    fi

    increment_app_install_progress

    chmod g+w "/var/www/${TURTL_DOMAIN_NAME}/htdocs"
    chown -R www-data:www-data "/var/www/${TURTL_DOMAIN_NAME}/htdocs"

    turtl_create_database

    increment_app_install_progress

    add_ddns_domain "${TURTL_DOMAIN_NAME}"

    TURTL_ONION_HOSTNAME=$(add_onion_service turtl 80 "${TURTL_ONION_PORT}")

    increment_app_install_progress

    cp /etc/turtl/config/config.yaml.default /etc/turtl/config/config.yaml
    sed -i "s|connstr:.*|connstr: 'postgres://turtl:${TURTL_ADMIN_PASSWORD}@localhost:5432/turtl'|g" /etc/turtl/config/config.yaml
    if [[ "$ONION_ONLY" != 'no' ]]; then
        sed -i "s|api_url:.*|api_url: 'https://${TURTL_DOMAIN_NAME}'|g" /etc/turtl/config/config.yaml
        sed -i "s|www_url:.*|www_url: 'https://${TURTL_DOMAIN_NAME}/web'|g" /etc/turtl/config/config.yaml
    else
        sed -i "s|api_url:.*|api_url: 'http://${TURTL_ONION_HOSTNAME}'|g" /etc/turtl/config/config.yaml
        sed -i "s|www_url:.*|www_url: 'http://${TURTL_ONION_HOSTNAME}/web'|g" /etc/turtl/config/config.yaml
    fi
    sed -i "s|admin:.*|admin: '${MY_EMAIL_ADDRESS}'|g" /etc/turtl/config/config.yaml
    sed -i "s|info:.*|info: 'Turtl <${MY_EMAIL_ADDRESS}>'|g" /etc/turtl/config/config.yaml
    sed -i "s|invites:.*|invites: '${MY_EMAIL_ADDRESS}'|g" /etc/turtl/config/config.yaml
    TURTL_HASH="$(create_random_string 30)$(create_random_string 30)$(create_random_string 30)$(create_random_string 30)$(create_random_string 30)$(create_random_string 30)"
    sed -i "s|secure_hash_salt:.*|secure_hash_salt: \"${TURTL_HASH}\"|g" /etc/turtl/config/config.yaml
    if [ ! -d /etc/turtl/public/uploads ]; then
        mkdir -p /etc/turtl/public/uploads
    fi
    sed -i "s|local:.*|local: '/etc/turtl/public/uploads'|g" /etc/turtl/config/config.yaml
    sed -i "s|plugin_location:.*|plugin_location: '/etc/turtl/plugins'|g" /etc/turtl/config/config.yaml

    increment_app_install_progress

    turtl_nginx_site=/etc/nginx/sites-available/$TURTL_DOMAIN_NAME
    if [[ "${ONION_ONLY}" == "no" ]]; then
        nginx_http_redirect "${TURTL_DOMAIN_NAME}" "index index.html"
        { echo 'server {';
          echo '  listen 443 ssl;';
          echo '  #listen [::]:443 ssl;';
          echo "  server_name ${TURTL_DOMAIN_NAME};";
          echo '  server_tokens off;';
          echo ''; } >> "$turtl_nginx_site"
        nginx_compress "${TURTL_DOMAIN_NAME}"
        echo '' >> "$turtl_nginx_site"
        echo '  # Security' >> "$turtl_nginx_site"
        nginx_ssl "${TURTL_DOMAIN_NAME}"

        nginx_security_options "${TURTL_DOMAIN_NAME}"
        nginx_robots "${TURTL_DOMAIN_NAME}"

        { echo '  add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;';
    echo "  add_header Onion-Location http://${TURTL_ONION_HOSTNAME}\$request_uri;";
          echo '';
          echo '    access_log /dev/null;';
          echo '    error_log /dev/null;';
          echo '';
          echo "    root /var/www/${TURTL_DOMAIN_NAME}/htdocs;";
          echo '';
          echo '  index index.html;';
          echo '  # Location';
          echo '  location / {'; } >> "$turtl_nginx_site"
        nginx_limits "${TURTL_DOMAIN_NAME}" '24m'
        { echo "    proxy_pass http://localhost:${TURTL_PORT_INTERNAL};";
          echo '  }';
          echo '';
          echo '  location ^~ /web {';
          echo '  }';
          echo '}'; } >> "$turtl_nginx_site"
    else
        echo -n '' > "$turtl_nginx_site"
    fi
    { echo 'server {';
      echo "    listen 127.0.0.1:${TURTL_ONION_PORT} default_server;";
      echo "    server_name ${TURTL_ONION_HOSTNAME};";
      echo '    server_tokens off;';
      echo ''; } >> "$turtl_nginx_site"
    nginx_compress "${TURTL_DOMAIN_NAME}"
    echo '' >> "$turtl_nginx_site"
    nginx_security_options "${TURTL_DOMAIN_NAME}"
    { echo '';
      echo '    access_log /dev/null;';
      echo '    error_log /dev/null;';
      echo '';
      echo "    root /var/www/${TURTL_DOMAIN_NAME}/htdocs;";
      echo '';
      echo '  index index.html;';
      echo '  # Location';
      echo '  location / {'; } >> "${turtl_nginx_site}"
    nginx_limits "${TURTL_DOMAIN_NAME}" '24m'
    { echo "    proxy_pass http://localhost:${TURTL_PORT_INTERNAL};";
      echo '  }';
      echo '';
      echo '  location ^~ /web {';
      echo '  }';
      echo '}'; } >> "${turtl_nginx_site}"

    adduser --system --home="/etc/turtl" --group turtl

    { echo '[Unit]';
      echo 'Description=turtl';
      echo 'After=network.target';
      echo "Documentation=${TURTL_REPO}";
      echo '';
      echo '[Service]';
      echo 'Type=simple';
      echo 'User=turtl';
      echo 'Group=turtl';
      echo 'WorkingDirectory=/etc/turtl';
      echo 'ExecStart=/usr/bin/node server.js';
      echo 'Environment=USER=turtl';
      echo "Environment=GIT_CEILING_DIRECTORIES=/etc/turtl";
      echo 'Restart=always';
      echo 'PrivateTmp=true';
      echo 'PrivateDevices=false';
      echo 'CapabilityBoundingSet=~CAP_SYS_ADMIN';
      echo 'ProtectSystem=yes';
      echo 'ProtectHome=yes';
      echo 'ProtectClock=yes';
      echo 'ProtectHostname=yes';
      echo 'PrivateUsers=yes';
      echo 'ProtectKernelModules=yes';
      echo 'ProtectKernelTunables=yes';
      echo 'NoNewPrivileges=true';
      echo '';
      echo '[Install]';
      echo 'WantedBy=multi-user.target'; } > "/etc/systemd/system/turtl.service"
    systemctl enable turtl
    chown -R turtl:turtl "/etc/turtl"
    systemctl start turtl

    increment_app_install_progress

    create_site_certificate "${TURTL_DOMAIN_NAME}" 'yes'

    increment_app_install_progress

    nginx_ensite "${TURTL_DOMAIN_NAME}"

    systemctl restart nginx

    increment_app_install_progress

    cd /etc/turtl || exit 26
    mkdir /etc/turtl/plugins || exit 35
    ./scripts/init-db.sh

    increment_app_install_progress

    "${PROJECT_NAME}-pass" -u "${MY_USERNAME}" -a turtl -p "${TURTL_ADMIN_PASSWORD}"
    set_completion_param "turtl domain" "${TURTL_DOMAIN_NAME}"

    APP_INSTALLED=1
}

# NOTE: deliberately there is no "exit 0"
