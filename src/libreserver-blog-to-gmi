#!/usr/bin/env python3
#  _    _ _            ___
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|
#
# Script to convert bludit blog entries into gemini format
#
# License
# =======
#
# Copyright (C) 2021 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import argparse
from shutil import copyfile


def get_text_only(markdown_str: str) -> str:
    ctr = 1
    result = ''
    state = 0
    for char in markdown_str:
        if char == '[':
            state = 1
        elif state == 1 and char == ']':
            state = 2
        elif state == 2 and char == '(':
            state = 3
        elif state == 3 and char == ')':
            result += ' [' + str(ctr) + ']'
            ctr += 1
            state = 0
        else:
            if state != 3:
                result += char
    result = result.replace('**', '')
    return result.strip()


def get_links(markdown_str: str) -> str:
    link_str = ''
    result = []
    links = markdown_str.split('](')
    for lnk in links:
        if ')' in lnk:
            url = lnk.split(')')[0]
            result.append(url)

    ctr = 0
    links = markdown_str.split('[')
    for lnk in links:
        if '](' in lnk:
            link_name = lnk.split('](')[0]
            link_str += \
                '=> ' + result[ctr] + \
                ' [' + str(ctr + 1) + '] ' + \
                link_name + '\n'
            ctr += 1
    return link_str


def remove_image_links(markdown_str: str) -> str:
    if '<img src="' not in markdown_str:
        return markdown_str
    new_markdown_str = markdown_str
    images = markdown_str.split('<img src="')
    for im_str in images:
        if '>' in im_str:
            url = '<img src="' + im_str.split('>')[0] + '>'
            new_markdown_str = new_markdown_str.replace(url, '')
    return new_markdown_str.replace('  ', ' ')


def get_images(markdown_str: str, blogdomain: str) -> str:
    img_str = ''
    if '<img src="' not in markdown_str:
        return img_str
    images = markdown_str.split('<img src="')

    if not blogdomain.endswith('.onion'):
        http_prefix = 'https://'
    else:
        http_prefix = 'http://'

    for im_str in images:
        if '"' in im_str:
            url = im_str.split('"')[0]
            if '/' not in url:
                img_str += \
                    '=> ' + http_prefix + blogdomain + \
                    '/bl-content/uploads/' + url + '\n'
            else:
                img_str += '=> ' + url + '\n'
    return img_str


def bludit_to_gmi(bludit_dir: str, gemini_dir: str, blogdomain: str) -> bool:
    blog_changed = False
    blogs_dir = bludit_dir + '/bl-content/pages'
    for _, dirs, _ in os.walk(blogs_dir):
        for blog_entry in dirs:
            blog_entry_dir = os.path.join(blogs_dir, blog_entry)
            blog_entry_filename = blog_entry_dir + '/index.txt'
            if not os.path.isfile(blog_entry_filename):
                continue
            markdown_str = ''
            with open(blog_entry_filename, "r",
                      encoding='utf-8') as blog_file:
                markdown_str = blog_file.read()

                # convert markdown to gemini
                gmi_links = get_links(markdown_str)
                if gmi_links:
                    gmi_links = '\n\n' + gmi_links
                images = get_images(markdown_str, blogdomain)
                if images:
                    images = '\n\n' + images
                    markdown_str = remove_image_links(markdown_str)
                gmi_str = \
                    '# ' + blog_entry.replace('-', ' ') + '\n\n' + \
                    get_text_only(markdown_str) + gmi_links + images

                # gemini filename to save as
                gmi_filename = gemini_dir + '/' + blog_entry + '.gmi'

                # has the file changed ?
                save_blog = True
                if os.path.isfile(gmi_filename):
                    with open(gmi_filename, "r",
                              encoding='utf-8') as prev_blog_file:
                        prev_gmi_str = prev_blog_file.read()
                        if prev_gmi_str == gmi_str:
                            save_blog = False
                if save_blog:
                    # only save if the file has changed
                    # This avoids excessive writes
                    with open(gmi_filename, "w", encoding='utf-8') as fp_out:
                        fp_out.write(gmi_str)
                        blog_changed = True
    return blog_changed


def get_blog_index(rss_str: str, geminidomain: str) -> str:
    result = '``` title\n'
    result += ' ___ ___ _____| |___ ___\n'
    result += '| . | -_|     | | . | . |\n'
    result += '|_  |___|_|_|_|_|___|_  |\n'
    result += '|___|               |___|\n\n'
    result += '```\n'

    result += '=> gemini://' + geminidomain + '/rss.xml RSS 2\n'
    result += '=> gemini://' + geminidomain + '/rss.txt RSS 3\n\n'
    titles = rss_str.split('<title>')
    for line in titles:
        if '<link>' not in line:
            continue
        if '</title>' not in line:
            continue
        if '</pubDate>' not in line:
            continue
        title = line.split('</title>')[0]
        link = line.split('<link>')[1]
        link = link.split('</link>')[0]
        pub_date = line.split('<pubDate>')[1]
        pub_date = pub_date.split('</pubDate>')[0]
        result += '=> ' + link + ' ' + pub_date + '   ' + title + '\n'
    return result


def get_rss3_feed(rss_str: str) -> str:
    """ See http://www.aaronsw.com/2002/rss30
    """
    result = ''
    titles = rss_str.split('<title>')
    for line in titles:
        if '<link>' not in line:
            continue
        if '</title>' not in line:
            continue
        if '</pubDate>' not in line:
            continue
        title = line.split('</title>')[0]
        link = line.split('<link>')[1]
        link = link.split('</link>')[0]
        pub_date = line.split('<pubDate>')[1]
        pub_date = pub_date.split('</pubDate>')[0]
        guid = line.split('<guid')[1]
        guid = guid.split('>')[1]
        guid = guid.split('<')[0]

        result += 'title: ' + title + '\n'
        result += 'link: ' + link + '\n'
        result += 'guid: ' + guid + '\n'
        result += 'created: ' + pub_date + '\n\n'
    return result


parser = argparse.ArgumentParser(description='Bludit to Gemini converter')
parser.add_argument('-g', '--geminidir', dest='geminidir', type=str,
                    default='/var/gemini',
                    help='Directory where gemini files exist')
parser.add_argument('-d', '--geminidomain', dest='geminidomain', type=str,
                    default=None,
                    help='The domain on which gemini is installed')
parser.add_argument('-b', '--blogdomain', dest='blogdomain', type=str,
                    default=None,
                    help='The domain on which bludit is installed')

args = parser.parse_args()

if not args.geminidomain:
    print('Please specify a domain on which gemini is installed with ' +
          '--geminidomain [domain]')
    sys.exit()

if not args.blogdomain:
    print('Please specify a domain on which bludit is installed with ' +
          '--blogdomain [domain]')
    sys.exit()

bludit_dir = '/var/www/' + args.blogdomain + '/htdocs'
if not bludit_to_gmi(bludit_dir, args.geminidir + '/blog', args.blogdomain):
    sys.exit()

rss_filename = bludit_dir + '/bl-content/workspaces/rss/rss.xml'
RSS_STR2 = ''
with open(rss_filename, "r", encoding='utf-8') as rssFile:
    RSS_STR2 = rssFile.read()
    RSS_STR2 = RSS_STR2.replace('<link>https://' + args.blogdomain,
                                '<link>gemini://' +
                                args.geminidomain + '/blog')
    RSS_STR2 = RSS_STR2.replace('<link>http://' + args.blogdomain,
                                '<link>gemini://' +
                                args.geminidomain + '/blog')
    RSS_STR2 = RSS_STR2.replace('</link>', '.gmi</link>')
    RSS_STR2 = RSS_STR2.replace('/blog.gmi', '/blog')

with open(args.geminidir + '/rss.xml', "w", encoding='utf-8') as fout:
    fout.write(RSS_STR2)

# write gemini RSS 3.0 feed
rss3 = get_rss3_feed(RSS_STR2)
with open(args.geminidir + '/rss.txt', "w", encoding='utf-8') as fout:
    fout.write(rss3)

# write Bludit RSS 3.0 feed
if not args.blogdomain.endswith('.onion'):
    rss3 = rss3.replace('gemini://', 'https://')
else:
    rss3 = rss3.replace('gemini://', 'http://')
rss3 = rss3.replace(args.geminidomain + '/blog', args.blogdomain)
rss3 = rss3.replace('.gmi', '')
with open('/var/www/' + args.blogdomain + '/htdocs/rss.txt', "w",
          encoding='utf-8') as fout:
    fout.write(rss3)

# create the index
indexStr = get_blog_index(RSS_STR2, args.geminidomain)
with open(args.geminidir + '/blog/index.gmi', "w", encoding='utf-8') as fout:
    fout.write(indexStr)
