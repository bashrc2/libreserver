#!/bin/bash
#  _    _ _            ___
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|
#
# i2p functions
#
# There's a problem with installing this onto mesh images, which is
# that qemu appears to run out of RAM when using yarn to add webpack.
#
# License
# =======
#
# Copyright (C) 2017-2023 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# this port should be forwarded from the internet router
I2P_LISTEN_PORT=9554
i2p_tunnels_dir=/var/lib/i2pd/tunnels.d

function i2p_domain_script {
    # shellcheck disable=SC2154
    if [ -f "$rootdir/usr/bin/i2pdomain" ]; then
        return
    fi
    { echo '#!/usr/bin/env python3';
      echo 'import base64, hashlib, sys';
      echo "with open(sys.argv[1], 'rb') as f:";
      echo '    isRead=False';
      echo '    try:';
      echo "        print(base64.b32encode(hashlib.sha256(base64.b64decode(f.read(), '-~')).digest()).decode().strip('=').lower()+\".b32.i2p\")";
      echo '        isRead=True';
      echo '    except:';
      echo '        pass';
      echo '    if not isRead:';
      echo "        print(base64.b32encode(hashlib.sha256(base64.b64decode(f.read(516), '-~')).digest()).decode().strip('=').lower()+\".b32.i2p\")"; } > "$rootdir/usr/bin/i2pdomain"
    chmod +x "$rootdir/usr/bin/i2pdomain"
}

function get_i2p_domain {
    i2p_domain_script
    i2p_service_name="$1"
    i2p_keys="/var/lib/i2pd/${i2p_service_name}.dat"
    if [ ! -f "$i2p_keys" ]; then
        return
    fi
    /usr/bin/i2pdomain "$i2p_keys"
}

function open_i2p_listen_port {
    if [ ! -f "${rootdir}/etc/i2pd/i2pd.conf" ]; then
        return
    fi
    i2p_port_opened=
    if grep -q '# port =' "${rootdir}/etc/i2pd/i2pd.conf"; then
        if ! grep -q "port = $I2P_LISTEN_PORT" "${rootdir}/etc/i2pd/i2pd.conf"; then
            sed -i "0,/# port =.*/s//port = $I2P_LISTEN_PORT" "${rootdir}/etc/i2pd/i2pd.conf"
            i2p_port_opened=1
        fi
    else
        if grep -q '#port =' "${rootdir}/etc/i2pd/i2pd.conf"; then
            if ! grep -q "port = $I2P_LISTEN_PORT" "${rootdir}/etc/i2pd/i2pd.conf"; then
                sed -i "0,/#port =.*/s//port = $I2P_LISTEN_PORT" "${rootdir}/etc/i2pd/i2pd.conf"
                i2p_port_opened=1
            fi
        fi
    fi
    if [ $i2p_port_opened ]; then
        firewall_add i2p $I2P_LISTEN_PORT
        if [ ! "$rootdir" ]; then
            systemctl restart i2pd
        fi
    fi
}

function i2p_modify_daemon {
    if grep -q '/var/run' "${rootdir}/lib/systemd/system/i2pd.service"; then
        sed -i 's|/var/run|/run|g' "${rootdir}/lib/systemd/system/i2pd.service"
        if [ ! "$rootdir" ]; then
            systemctl daemon-reload
            systemctl restart i2pd
        fi
    fi
}

function i2p_base_config {
    sed -i 's|#tunnelsdir =|tunnelsdir =|g' /etc/i2pd/i2pd.conf
    sed -i 's|# tunnelsdir =|tunnelsdir =|g' /etc/i2pd/i2pd.conf
    if ! grep -q "tunnelsdir = $i2p_tunnels_dir" /etc/i2pd/i2pd.conf; then
        echo 'Setting i2p tunnels'
        sed -i "s|tunnelsdir =.*|tunnelsdir = $i2p_tunnels_dir|g" /etc/i2pd/i2pd.conf
    fi

    sed -i 's|#ipv6 =|ipv6 =|g' /etc/i2pd/i2pd.conf
    sed -i 's|# ipv6 =|ipv6 =|g' /etc/i2pd/i2pd.conf
    if ! grep -q "ipv6 = true" /etc/i2pd/i2pd.conf; then
        echo 'Enabling ipv6 for i2p'
        sed -i 's|ipv6 =.*|ipv6 = true|g' /etc/i2pd/i2pd.conf
    fi

    sed -i 's|#logfile =|logfile =|g' /etc/i2pd/i2pd.conf
    sed -i 's|# logfile =|logfile =|g' /etc/i2pd/i2pd.conf
    if ! grep -q "logfile = /dev/null" /etc/i2pd/i2pd.conf; then
        echo 'Disabling i2p logging'
        sed -i 's|logfile =.*|logfile = /dev/null|g' /etc/i2pd/i2pd.conf
    fi

    sed -i 's|#nat =|nat =|g' /etc/i2pd/i2pd.conf
    sed -i 's|# nat =|nat =|g' /etc/i2pd/i2pd.conf
    if ! grep -q "nat = true" /etc/i2pd/i2pd.conf; then
        echo 'Enabling i2p NAT traversal'
        sed -i 's|nat =.*|nat = true|g' /etc/i2pd/i2pd.conf
    fi

    if [ ! -d /run/i2pd ]; then
        mkdir /run/i2pd
    fi

    echo 'Setting i2p file permissions'
    chown -R i2pd:i2pd /run/i2pd
    chown -R i2pd:i2pd "$i2p_tunnels_dir"
    chmod 644 "$i2p_tunnels_dir"/*
    chmod 755 "$i2p_tunnels_dir"
}

function install_i2p {
    i2p_domain_script
    if [ -d "$rootdir/var/lib/i2pd" ]; then
        i2p_modify_daemon
        open_i2p_listen_port
        i2p_base_config
        return
    fi
    if [ ! "$rootdir" ]; then
        INSTALL_PACKAGES i2pd
    else
        # shellcheck disable=SC2086
        chroot "$rootdir" INSTALL_PACKAGES i2pd
    fi

    if [ ! -f "${rootdir}/etc/i2pd/i2pd.conf" ]; then
        exit 82
    fi

    i2p_modify_daemon
    open_i2p_listen_port

    # i2p needs ipv6 to be enabled
    enable_ipv6
    i2p_base_config
    if [ ! "${rootdir}" ]; then
        /sbin/sysctl -p -q
        if [ -d /etc/nginx ]; then
            nginx -s reload
        fi
        systemctl enable i2pd
        systemctl restart i2pd
    else
        chroot "$rootdir" systemctl enable i2pd
        chroot "$rootdir" systemctl restart i2pd
    fi
}

function remove_i2p {
    systemctl stop i2pd
    systemctl disable i2pd
    $REMOVE_PACKAGES_PURGE i2pd

    # It's assumed here that ipv6 is only needed for i2p
    # This might not be true in future
    sed -i 's|net.ipv6.conf.all.disable_ipv6.*|net.ipv6.conf.all.disable_ipv6 = 1|g' /etc/sysctl.conf
    /sbin/sysctl -p -q

    if [ -d /var/lib/i2pd ]; then
        rm -rf /var/lib/i2pd
    fi
    if [ -d /etc/i2pd ]; then
        rm -rf /etc/i2pd
    fi
    rm -rf /tmp/i2p*
}

function add_i2p_service {
    i2p_service_name="$1"
    if [ -f "${i2p_tunnels_dir}/${i2p_service_name}" ]; then
        return
    fi
    i2p_service_port_from=$2
    i2p_service_port_to=$3

    install_i2p

    if [ ! -d "${i2p_tunnels_dir}" ]; then
        mkdir "${i2p_tunnels_dir}"
    fi

    # shellcheck disable=SC2086
    if [ ${i2p_service_port_from} -eq 80 ]; then
        { echo "[${i2p_service_name}]";
          echo 'type = http';
          echo 'host = 127.0.0.1';
	  echo 'inport = 80';
          echo "port = ${i2p_service_port_to}";
	  echo 'inbound.length = 1';
	  echo 'inbound.quantity = 5';
	  echo 'outbound.length = 1';
	  echo 'outbound.quantity = 5';
          echo "keys = ${i2p_service_name}.dat"; } > "${i2p_tunnels_dir}/${i2p_service_name}.conf"
    else
        { echo "[${i2p_service_name}]";
          echo 'type = server';
          echo 'host = 127.0.0.1';
          echo "port = ${i2p_service_port_from}";
          echo "inport = ${i2p_service_port_to}";
          echo "keys = ${i2p_service_name}.dat"; } > "${i2p_tunnels_dir}/${i2p_service_name}.conf"
    fi
    chown -R i2pd:i2pd "${i2p_tunnels_dir}"
    chown -R i2pd:i2pd /etc/i2pd
    chmod 644 "${i2p_tunnels_dir}"/*
    chmod 644 /etc/i2pd/tunnels.d/*
    systemctl restart i2pd
}

function remove_i2p_service {
    i2p_service_name="$1"

    if [ -f "${i2p_tunnels_dir}/${i2p_service_name}.conf" ]; then
        rm "${i2p_tunnels_dir}/${i2p_service_name}.conf"
        systemctl restart i2pd
    fi
}

# NOTE: deliberately no exit 0
