#!/bin/bash
#  _    _ _            ___
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|
#
# flightgear game
# https://fgms.freeflightsim.org/install_guide.html
#
# License
# =======
#
# Copyright (C) 2019-2023 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VARIANTS='full full-vim full-micro games'

APP_CATEGORY=games

IN_DEFAULT_INSTALL=0
SHOW_ON_ABOUT=1
SHOW_DOMAIN_ONLY=1
SHOW_APP_PORT=5862
NOT_ON_HOMEPAGE=1
REQUIRES_APP=

FLIGHTGEAR_DOMAIN_NAME=${HOSTNAME}
FLIGHTGEAR_CODE=

FLIGHTGEAR_REPO="https://git.code.sf.net/p/fgms/src"
FLIGHTGEAR_COMMIT='6a17be9d64c3798b1038622ee7867c95773f2ea0'

FLIGHTGEAR_PORT=5862

FLIGHTGEAR_DIR=/var/games/fgms

FLIGHTGEAR_SHORT_DESCRIPTION=$'FlightGear MultiPlayer Server'
FLIGHTGEAR_DESCRIPTION=$'FlightGear MultiPlayer Server'
FLIGHTGEAR_MOBILE_APP_URL=""

flightgear_variables=(ONION_ONLY
		      SYSTEM_TYPE
                      MY_USERNAME)

function upgrade_distro_flightgear {
    target_distro="$1"

    if [[ "$target_distro" == 'bookworm' ]]; then
        echo -n ''
    fi
}

function logging_on_flightgear {
    if [ ! -f "$FLIGHTGEAR_DIR/fgms.conf" ]; then
	return
    fi
    if grep -q "${FLIGHTGEAR_DIR}/fgms.log" "$FLIGHTGEAR_DIR/fgms.conf"; then
	return
    fi
    sed -i "s|server.logfile.*|server.logfile = ${FLIGHTGEAR_DIR}/fgms.log" "$FLIGHTGEAR_DIR/fgms.conf"
    systemctl restart fgms
}

function logging_off_flightgear {
    if [ ! -f "$FLIGHTGEAR_DIR/fgms.conf" ]; then
	return
    fi
    if grep -q '/dev/null' "$FLIGHTGEAR_DIR/fgms.conf"; then
	return
    fi
    sed -i "s|server.logfile.*|server.logfile = /dev/null" "$FLIGHTGEAR_DIR/fgms.conf"
    systemctl restart fgms
}

function install_interactive_flightgear {
    echo -n ''
    APP_INSTALLED=1
}

function reconfigure_flightgear {
    echo -n ''
}

function upgrade_flightgear {
    CURR_FLIGHTGEAR_COMMIT=$(get_completion_param "flightgear commit")
    if [[ "$CURR_FLIGHTGEAR_COMMIT" == "$FLIGHTGEAR_COMMIT" ]]; then
	return
    fi
    function_check set_repo_commit
    set_repo_commit "$INSTALL_DIR/fgms-src" "flightgear commit" "$FLIGHTGEAR_COMMIT" $FLIGHTGEAR_REPO
    cd "$INSTALL_DIR/build_fgms" || exit 73
    cmake ../fgms-src
    if [ -f "$INSTALL_DIR/build_fgms/fgms" ]; then
	rm "$INSTALL_DIR/build_fgms/fgms"
    fi
    make
    if [ ! -f "$INSTALL_DIR/build_fgms/fgms" ]; then
	echo "Failed to upgrade fgms to commit $FLIGHTGEAR_COMMIT"
	return
    fi
    make install
    systemctl restart fgms
}

function backup_local_flightgear {
    source_directory=$FLIGHTGEAR_DIR
    if [ -d $source_directory ]; then
        dest_directory=flightgear
        function_check backup_directory_to_usb
        backup_directory_to_usb $source_directory $dest_directory
    fi
}

function restore_local_flightgear {
    if [ -d $FLIGHTGEAR_DIR ]; then
        if [ -d "$USB_MOUNT_FLIGHTGEAR/backup/flightgear" ]; then
            echo $"Restoring FLIGHTGEAR"
            temp_restore_dir=/root/tempflightgear
            function_check restore_directory_from_usb
            restore_directory_from_usb $temp_restore_dir flightgear
            if [ -d $temp_restore_dir$FLIGHTGEAR_DIR ]; then
                cp -r $temp_restore_dir$FLIGHTGEAR_DIR/* $FLIGHTGEAR_DIR/
            else
                cp -r $temp_restore_dir/* $FLIGHTGEAR_DIR/
            fi
            # shellcheck disable=SC2181
            if [ ! "$?" = "0" ]; then
                rm -rf $temp_restore_dir
                function_check set_user_permissions
                set_user_permissions
                function_check backup_unmount_drive
                backup_unmount_drive
                exit 99
            fi
            rm -rf $temp_restore_dir
        fi
    fi
}

function backup_remote_flightgear {
    echo -n ''
}

function restore_remote_flightgear {
    echo -n ''
}

function remove_flightgear {
    systemctl stop fgms
    systemctl disable fgms
    rm /etc/systemd/system/fgms.service

    remove_onion_service fgms ${FLIGHTGEAR_PORT}

    if [ -d "$INSTALL_DIR/fgms-src" ]; then
        rm -rf "$INSTALL_DIR/fgms-src"
    fi
    if [ -d "$INSTALL_DIR/build_fgms" ]; then
        rm -rf "$INSTALL_DIR/build_fgms"
    fi
    if [ -d "$FLIGHTGEAR_DIR" ]; then
        rm -rf "$FLIGHTGEAR_DIR"
    fi
    if [ -f /usr/sbin/fgms ]; then
	rm /usr/sbin/fgms
    fi

    remove_app flightgear
    remove_completion_param install_flightgear
    sed -i '/flightgear/d' "$COMPLETION_FILE"

    if [ -d /var/www/flightgear ]; then
        rm -rf /var/www/flightgear
    fi
    firewall_remove ${FLIGHTGEAR_PORT}
    groupdel -f fgms
    userdel -r fgms
}

function install_flightgear {
    if [ -d "$INSTALL_DIR/fgms-src" ]; then
        rm -rf "$INSTALL_DIR/fgms-src"
    fi

    if ! grep -q "fgms:" /etc/group; then
	groupadd fgms
    fi
    useradd -c "Flightgear Multiplayer" -d "$FLIGHTGEAR_DIR" -m -r -g fgms fgms

    increment_app_install_progress

    if [ ! -d /var/games ]; then
	mkdir /var/games
    fi

    if [ -d /var/www/flightgear ]; then
        rm -rf /var/www/flightgear
    fi
    mkdir -p /var/www/flightgear/htdocs

    increment_app_install_progress

    chown -R www-data:www-data /var/www/flightgear/htdocs

    increment_app_install_progress

    INSTALL_PACKAGES cmake

    increment_app_install_progress

    git_clone "$FLIGHTGEAR_REPO" "$INSTALL_DIR/fgms-src"
    increment_app_install_progress
    cd "$INSTALL_DIR/fgms-src" || exit 71
    git checkout "$FLIGHTGEAR_COMMIT" -b "$FLIGHTGEAR_COMMIT"
    cd "$INSTALL_DIR" || exit 72
    mkdir "$INSTALL_DIR/build_fgms"
    cd "$INSTALL_DIR/build_fgms" || exit 73
    increment_app_install_progress
    cmake ../fgms-src
    increment_app_install_progress
    make
    if [ ! -f "$INSTALL_DIR/build_fgms/fgms" ]; then
	echo "Failed to build fgms"
	exit 75
    fi
    increment_app_install_progress
    make install
    if [ ! -f /usr/sbin/fgms ]; then
	echo 'Failed to install /usr/sbin/fgms'
	exit 76
    fi

    increment_app_install_progress

    if [ ! -d $FLIGHTGEAR_DIR ]; then
	mkdir $FLIGHTGEAR_DIR
    fi

    increment_app_install_progress

    FLIGHTGEAR_ONION_HOSTNAME=$(add_onion_service fgms ${FLIGHTGEAR_PORT} ${FLIGHTGEAR_PORT})

    { echo "server.name = flightgear";
      echo 'server.address = 127.0.0.1';
      echo "server.FQDN = $FLIGHTGEAR_DOMAIN_NAME";
      echo "server.port = $FLIGHTGEAR_PORT";
      echo '# for public servers this should be 5001';
      echo 'server.telnet_port = 0';
      echo 'server.playerexpires = 10';
      echo 'server.logfile = /dev/null';
      echo 'server.tracked = false';
      echo 'server.tracking_server = 62.112.194.20';
      echo 'server.tracking_port = 8000';
      echo 'server.daemon = false';
      echo 'server.is_hub = false';
      echo 'server.out_of_reach = 100';
      echo 'server.max_radar_range = 2000';
      echo '# crossfeed.host = localhost';
      echo '# crossfeed.port = 5002';
      echo 'whitelist = 127.0.0.1';
      echo 'blacklist = 123.123.123.123';
      echo 'blacklist = 12.12.12.12'; } > "$FLIGHTGEAR_DIR/fgms.conf"
    chown -R fgms:fgms "$FLIGHTGEAR_DIR"

    increment_app_install_progress

    firewall_add flightgear ${FLIGHTGEAR_PORT}

    increment_app_install_progress

    { echo '[Unit]';
      echo 'Description=Flightgear Multiplayer Server';
      echo 'After=network.target';
      echo '';
      echo '[Service]';
      echo 'Type=simple';
      echo 'User=fgms';
      echo 'Group=fgms';
      echo "WorkingDirectory=$FLIGHTGEAR_DIR";
      echo "ExecStart=/usr/sbin/fgms -c $FLIGHTGEAR_DIR/fgms.conf";
      echo 'Restart=on-failure';
      echo 'RestartSec=10';
      echo 'PrivateTmp=true';
      echo 'PrivateDevices=false';
      echo 'NoNewPrivileges=true';
      echo 'CapabilityBoundingSet=~CAP_SYS_ADMIN';
      echo 'CPUQuota=30%';
      echo '';
      echo '[Install]';
      echo 'WantedBy=multi-user.target'; } > /etc/systemd/system/fgms.service
    systemctl enable fgms
    increment_app_install_progress
    systemctl daemon-reload
    increment_app_install_progress
    systemctl restart fgms
    increment_app_install_progress

    set_completion_param "flightgear commit" "$FLIGHTGEAR_COMMIT"

    APP_INSTALLED=1
}

# NOTE: deliberately no exit 0
