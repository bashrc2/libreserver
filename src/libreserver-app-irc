#!/bin/bash
#  _    _ _            ___
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|
#
# IRC server application
#
# License
# =======
#
# Copyright (C) 2014-2022 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VARIANTS='full full-vim chat'

APP_CATEGORY=chat

IN_DEFAULT_INSTALL=0
SHOW_ON_ABOUT=1
SHOW_DOMAIN_ONLY=1
NOT_ON_HOMEPAGE=1
REQUIRES_APP=

IRC_PORT=6697
IRC_PORT_I2P=6698

IRC_REPO="https://gitlab.com/bashrc2/miniircd"
IRC_COMMIT='297eae7668f14ab88646add07fe6841e58aa1f09'

IRC_SHORT_DESCRIPTION=$'Classic chat system'
IRC_DESCRIPTION=$'The classic low bandwidth chat system'
IRC_MOBILE_APP_URL='https://f-droid.org/packages/org.yaaic'

IRC_FIREWALL_PORTS="${IRC_PORT}"

irc_variables=(MY_USERNAME
               MY_NAME
               DEFAULT_DOMAIN_NAME
               ONION_ONLY)

function remove_bridge_irc_to_xmpp {
    if [ ! -f /etc/biboumi/biboumi.cfg ]; then
        return
    fi
    $REMOVE_PACKAGES_PURGE biboumi
    if [ -d /var/lib/biboumi ]; then
        rm -rf /var/lib/biboumi
    fi
}

function bridge_irc_to_xmpp {
    if [[ "$ONION_ONLY" != 'no' ]]; then
        return
    fi
    if [ ! -d /etc/prosody ]; then
        remove_bridge_irc_to_xmpp
        return
    fi
    if [ ! -d /etc/miniirc ]; then
        remove_bridge_irc_to_xmpp
        return
    fi
    bridge_domain_name=${DEFAULT_DOMAIN_NAME}
    if [[ "$ONION_ONLY" != 'no' ]]; then
        bridge_domain_name=$(cat /var/lib/tor/hidden_service_email/hostname)
    fi
    irc_bridge_hostname="ircbridge.${bridge_domain_name}"
    if [ -f /etc/biboumi/biboumi.cfg ]; then
        if grep -q "hostname=${irc_bridge_hostname}" /etc/biboumi/biboumi.cfg; then
            if [ -f /var/lib/biboumi/.config/biboumi/biboumi.sqlite ]; then
                return
            fi
        fi
    fi
    INSTALL_PACKAGES biboumi
    irc_bridge_secret=$(create_password 30)$(create_password 30)
    { echo "hostname=${irc_bridge_hostname}";
      echo "password=${irc_bridge_secret}";
      echo "xmpp_server_ip=127.0.0.1";
      echo "db_name=/var/lib/biboumi/biboumi.sqlite";
      echo "port=5347";
      echo "admin=admin@${bridge_domain_name}";
      echo "realname_customization=true";
      echo "realname_from_jid=false";
      echo "log_file=";
      echo "ca_file=";
      echo "outgoing_bind=";
      echo "log_level=1"; } > /etc/biboumi/biboumi.cfg

    if ! grep -q "${irc_bridge_hostname}" /etc/prosody/prosody.cfg.lua; then
        { echo "";
          echo "Component \"${irc_bridge_hostname}\"";
          echo "    component_secret = \"${irc_bridge_secret}\""; } >> /etc/prosody/prosody.cfg.lua
    else
        sed -i "s|component_secret = .*|component_secret = \"${irc_bridge_secret}\"|g" /etc/prosody/prosody.cfg.lua
    fi
    systemctl restart prosody
    systemctl restart biboumi
}

function irc_welcome_message {
    sed -i "s|welcome to IRC|welcome to ${PROJECT_NAME} IRC|g" /usr/local/bin/miniircd
}

function upgrade_distro_irc {
    target_distro="$1"

    if [[ "$target_distro" == 'bullseye' ]]; then
        echo -n ''
    fi
}

function change_default_domain_name_irc {
    new_default_domain_name="$1"
}

function logging_on_irc {
    echo -n ''
}

function logging_off_irc {
    echo -n ''
}

function create_irssi_config {
    new_username="$1"
    new_password="$2"

    read_config_param IRC_PORT

    new_name="$3"
    if [ ${#new_name} -eq 0 ]; then
        new_name="$new_username"
    fi

    { echo 'use strict;';
      echo 'use warnings;';
      echo 'use Irssi;';
      echo 'use Irssi::Irc;';
      echo "use vars qw(\$VERSION %IRSSI);";
      echo '';
      echo "\$VERSION = \"0.0.2\";";
      echo '%IRSSI = (';
      echo "    authors     => \"Sebastian 'yath' Schmidt\",";
      echo "    contact     => \"yathen\@web.de\",";
      echo "    name        => \"Command dispatcher\",";
      echo "    description => \"This scripts sends unknown commands to the server\",";
      echo "    license     => \"GNU GPLv2\",";
      echo "    changed     => \"Tue Mar  5 14:55:29 CET 2002\",";
      echo ');';
      echo '';
      echo 'sub event_default_command {';
      echo "    my (\$command, \$server) = @_;";
      echo "    return if (Irssi::settings_get_bool(\"dispatch_unknown_commands\") == 0";
      echo "            || !\$server);";
      echo "    \$server->send_raw(\$command);";
      echo '    Irssi::signal_stop();';
      echo '}';
      echo '';
      echo "Irssi::settings_add_bool(\"misc\", \"dispatch_unknown_commands\", 1);";
      echo "Irssi::signal_add_first(\"default command\", \"event_default_command\");"; } > "/home/${new_username}/.irssi/dispatch.pl"

    { echo 'servers = (';
      echo '  {';
      echo '    address = "irc.libera.chat";';
      echo '    chatnet = "LiberaChat";';
      echo '    port = "6697";';
      echo '    autoconnect = "no";';
      echo '  },';
      echo '  {';
      echo '    address = "irc.oftc.net";';
      echo '    chatnet = "OFTC";';
      echo '    port = "6667";';
      echo '    autoconnect = "no";';
      echo '  },';
      echo '  {';
      echo "    address = \"127.0.0.1\";";
      echo '    ssl_verify = "no";';
      echo '    use_ssl = "yes";';
      echo "    port = \"${IRC_PORT}\";"; } > "/home/${new_username}/.irssi/config"
    if [[ ${ONION_ONLY} != 'no' ]]; then
        IRC_ONION_HOSTNAME=$(grep "irc onion domain" "${COMPLETION_FILE}" | head -n 1 | awk -F ':' '{print $2}')
    fi
    echo '    chatnet = "LibreServer";' >> "/home/${new_username}/.irssi/config"
    echo '    autoconnect = "yes";' >> "/home/${new_username}/.irssi/config"
    # echo "    password = \"${IRC_PASSWORD}\";" >> "/home/${new_username}/.irssi/config"
    { echo '  }';
      echo ');';
      echo '';
      echo 'chatnets = {';
      echo '  LibreServer = {';
      echo '    type = "IRC";';
      echo "    nick = \"${new_username}\";";
      echo "    autosendcmd = \"/quote identify ${new_username} ${new_password};wait 2000\";";
      echo '    max_kicks = "1";';
      echo '    max_msgs = "4";';
      echo '    max_whois = "1";';
      echo '  };';
      echo '  LiberaChat = {';
      echo '    type = "IRC";';
      echo '    max_kicks = "1";';
      echo '    max_msgs = "4";';
      echo '    max_whois = "1";';
      echo '  };';
      echo '  OFTC = {';
      echo '    type = "IRC";';
      echo '    max_kicks = "1";';
      echo '    max_msgs = "1";';
      echo '    max_whois = "1";';
      echo '  };';
      echo '};';
      echo '';
      echo 'channels = (';
      echo '  { name = "#libreserver"; chatnet = "LibreServer"; autojoin = "Yes"; },';
      echo ');';
      echo '';
      echo 'settings = {';
      echo "  core = { real_name = \"$new_name\"; user_name = \"$new_username\"; nick = \"$new_username\"; };";
      echo '  "fe-text" = { actlist_sort = "refnum"; };';
      echo '};';
      echo 'ignores = ( { level = "CTCPS"; } );'; } >> "/home/${new_username}/.irssi/config"

    chown -R "${new_username}":"${new_username}" "/home/${new_username}/.irssi"
}

function remove_user_irc {
    remove_username="$1"

    "${PROJECT_NAME}-pass" -u "$remove_username" --rmapp irc

    if [ -d "/home/${remove_username}/.irssi" ]; then
        rm -rf "/home/${remove_username}/.irssi"
    fi
    if [ -d "/home/${remove_username}/irclogs" ]; then
        rm -rf "/home/${remove_username}/irclogs"
    fi
    /usr/local/bin/miniircd --state-dir=/var/jail/miniircd --del-account "${remove_username}"
    chown -R miniirc:miniirc /var/jail/miniircd
}

function change_password_irc {
    curr_username="$1"
    new_user_password="$2"

    "${PROJECT_NAME}-pass" -u "${curr_username}" -a irc -p "${new_user_password}"
    /usr/local/bin/miniircd --state-dir=/var/jail/miniircd --set-password "${curr_username}":"${new_user_password}"
    chown -R miniirc:miniirc /var/jail/miniircd
}

function add_user_irc {
    new_username="$1"
    new_user_password="$2"

    if [ ! -d "/home/${new_username}/.irssi" ]; then
        mkdir "/home/${new_username}/.irssi"
    fi

    create_irssi_config "${new_username}" "${new_user_password}"

    /usr/local/bin/miniircd --state-dir=/var/jail/miniircd --add-account "${new_username}":"${new_user_password}"
    chown -R miniirc:miniirc /var/jail/miniircd

    echo '0'
}

function run_client_irc {
    irssi
}

function install_interactive_irc {
    echo -n ''
    APP_INSTALLED=1
}

function reconfigure_irc {
    echo -n ''
}

function upgrade_irc {
    add_i2p_service irc $IRC_PORT $IRC_PORT_I2P
    bridge_irc_to_xmpp

    if [[ "$ONION_ONLY" == 'no' ]]; then
        cat "/etc/letsencrypt/live/${DEFAULT_DOMAIN_NAME}/fullchain.pem" "/etc/letsencrypt/live/${DEFAULT_DOMAIN_NAME}/privkey.pem" > /var/jail/miniircd/miniircd.pem
    fi

    CURR_IRC_COMMIT=$(get_completion_param "irc commit")
    if [[ "$CURR_IRC_COMMIT" == "$IRC_COMMIT" ]]; then
        return
    fi

    function_check set_repo_commit
    set_repo_commit /etc/miniirc "irc commit" "$IRC_COMMIT" "$IRC_REPO"

    cp /etc/miniirc/miniircd /usr/local/bin/miniircd
    irc_welcome_message
}

function backup_local_irc {
    echo -n ''
}

function restore_local_irc {
    echo -n ''
}

function backup_remote_irc {
    echo -n ''
}

function restore_remote_irc {
    echo -n ''
}

function remove_irc {
    systemctl stop irc
    systemctl disable irc
    rm /etc/systemd/system/irc.service
    $REMOVE_PACKAGES_PURGE irssi

    remove_i2p_service irc

    function_check save_firewall_settings
    save_firewall_settings
    firewall_remove ${IRC_PORT} tcp

    if [ -d /var/jail/miniircd ]; then
        rm -rf /var/jail/miniircd
    fi
    if [ -d /etc/miniirc ]; then
        rm -rf /etc/miniirc
    fi

    function_check remove_onion_service
    remove_onion_service irc ${IRC_PORT}
    remove_completion_param install_irc
    remove_completion_param configure_firewall_for_irc
    sed -i '/IRC /d' "${COMPLETION_FILE}"
    userdel -r miniirc
    remove_bridge_irc_to_xmpp
}

function configure_firewall_for_irc {
    if [ ! -d /etc/miniirc ]; then
        return
    fi
    if [[ $(is_completed "${FUNCNAME[0]}") == "1" ]]; then
        return
    fi
    if [[ ${INSTALLED_WITHIN_DOCKER} == "yes" ]]; then
        # docker does its own firewalling
        return
    fi
    if [[ ${ONION_ONLY} != "no" ]]; then
        return
    fi
    /usr/sbin/nft add rule inet filter INPUT tcp dport 1024-65535 sport ${IRC_PORT} accept
    function_check save_firewall_settings
    save_firewall_settings

    firewall_add IRC ${IRC_PORT} tcp
    echo 'configure_firewall_for_irc' >> "${COMPLETION_FILE}"
}

function install_irc_server {
    if [[ $(app_is_installed irc_server) == "1" ]]; then
        return
    fi

    if [ -d /etc/miniirc ]; then
        rm -rf /etc/miniirc
    fi
    if [ -d /var/jail/miniircd ]; then
        rm -rf /var/jail/miniircd
    fi

    function_check git_clone
    git_clone "$IRC_REPO" /etc/miniirc

    cd /etc/miniirc || exit 76

    git checkout "$IRC_COMMIT" -b "$IRC_COMMIT"
    set_completion_param "irc commit" "$IRC_COMMIT"

    cp /etc/miniirc/miniircd /usr/local/bin/miniircd
    irc_welcome_message
    make jail

    if [ ! -d /var/jail/miniircd ]; then
        mkdir -p /var/jail/miniircd
    fi

    # shellcheck disable=SC2034
    IRC_ONION_HOSTNAME=$(add_onion_service irc "${IRC_PORT}" "${IRC_PORT}")

    IRC_SSL_OPTION=
    if [[ "$ONION_ONLY" == 'no' ]]; then
        cat "/etc/letsencrypt/live/${DEFAULT_DOMAIN_NAME}/fullchain.pem" "/etc/letsencrypt/live/${DEFAULT_DOMAIN_NAME}/privkey.pem" > /var/jail/miniircd/miniircd.pem
    else
        "${PROJECT_NAME}-addcert" -h "${IRC_ONION_HOSTNAME}" --dhkey "${DH_KEYLENGTH}"
        if [ ! -f "/etc/ssl/certs/${IRC_ONION_HOSTNAME}.crt" ]; then
            echo "irc TLS cert not found /etc/ssl/certs/${IRC_ONION_HOSTNAME}.crt"
            exit 46
        fi
        if [ ! -f "/etc/ssl/private/${IRC_ONION_HOSTNAME}.key" ]; then
            echo "irc TLS cert not found /etc/ssl/private/${IRC_ONION_HOSTNAME}.key"
            exit 71
        fi
        cat "/etc/ssl/certs/${IRC_ONION_HOSTNAME}.crt" "/etc/ssl/private/${IRC_ONION_HOSTNAME}.key" > /var/jail/miniircd/miniircd.pem
    fi
    IRC_SSL_OPTION='--ssl-pem-file=/miniircd.pem'

    adduser --system --home="/etc/miniirc" --group miniirc

    { echo '[Unit]';
      echo 'Description=miniircd server';
      echo 'After=syslog.target';
      echo 'After=network.target';
      echo '';
      echo '[Service]';
      echo 'User=root';
      echo 'Group=root';
      echo "WorkingDirectory=/etc/miniirc";
      echo "ExecStart=/usr/local/bin/miniircd --state-dir=/ --setuid=miniirc ${IRC_SSL_OPTION} --registered-only --new-registrations 0 --chroot=/var/jail/miniircd";
      echo 'Environment=PATH=/usr/bin:/usr/local/bin';
      echo 'Environment=LC_ALL=C.UTF-8';
      echo 'Restart=on-failure';
      echo 'PrivateTmp=true';
      echo 'PrivateDevices=false';
      echo 'CapabilityBoundingSet=~CAP_SYS_ADMIN';
      echo 'ProtectSystem=yes';
      echo 'ProtectHome=yes';
      echo 'ProtectClock=yes';
      echo 'ProtectHostname=yes';
      echo 'ProtectKernelModules=yes';
      echo 'ProtectKernelTunables=yes';
      echo 'NoNewPrivileges=true';
      echo '';
      echo '[Install]';
      echo 'WantedBy=multi-user.target'; } > "$rootdir/etc/systemd/system/irc.service"
    chroot "$rootdir" systemctl enable irc.service
    chown -R miniirc:miniirc /var/jail
    chroot "$rootdir" systemctl restart irc.service

    function_check configure_firewall_for_irc
    configure_firewall_for_irc
    install_completed irc_server
}

function install_irc_i2p {
    add_i2p_service irc $IRC_PORT $IRC_PORT
}

function install_irc_client {
    if [[ $(app_is_installed irc_client) == "1" ]]; then
        return
    fi
    INSTALL_PACKAGES irssi

    if [ ! -d "/home/${MY_USERNAME}/.irssi" ]; then
        mkdir "/home/${MY_USERNAME}/.irssi"
    fi

    create_irssi_config "${MY_USERNAME}" "${IRC_ADMIN_PASSWORD}"
    install_completed irc_client
}

function install_irc {
    increment_app_install_progress

    install_irc_server

    increment_app_install_progress

    if [ -f "$IMAGE_PASSWORD_FILE" ]; then
        IRC_ADMIN_PASSWORD="$(printf "%s" "$(cat "$IMAGE_PASSWORD_FILE")")"
    fi
    if [ ! "$IRC_ADMIN_PASSWORD" ]; then
        IRC_ADMIN_PASSWORD="$(create_password "${MINIMUM_PASSWORD_LENGTH}")"
    fi
    "${PROJECT_NAME}-pass" -u "$MY_USERNAME" -a irc -p "$IRC_ADMIN_PASSWORD"

    add_user_irc "${MY_USERNAME}" "${IRC_ADMIN_PASSWORD}"

    systemctl restart irc

    increment_app_install_progress

    install_irc_client

    increment_app_install_progress

    bridge_irc_to_xmpp

    add_i2p_service irc $IRC_PORT $IRC_PORT_I2P

    APP_INSTALLED=1
}

# NOTE: deliberately no exit 0
