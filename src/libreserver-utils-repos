#!/bin/bash
#  _    _ _            ___
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|
#
# Functions to set repositories
#
# License
# =======
#
# Copyright (C) 2014-2022 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# The Debian package repository to use.
DEBIAN_REPO="ftp.us.debian.org"
DEBIAN_REPO_ONION='vwakviie2ienjx6t.onion'
DEBIAN_SECURITY_REPO_ONION='sgvtcaew4bxjd7ln.onion'

function create_tor_package_sources {
    { echo "deb tor+http://${DEBIAN_REPO_ONION}/debian ${DEBIAN_VERSION} main";
      echo "deb-src tor+http://${DEBIAN_REPO_ONION}/debian ${DEBIAN_VERSION} main";
      echo "deb tor+http://${DEBIAN_REPO_ONION}/debian ${DEBIAN_VERSION}-updates main";
      echo "deb-src tor+http://${DEBIAN_REPO_ONION}/debian ${DEBIAN_VERSION}-updates main";
      echo "deb tor+http://${DEBIAN_SECURITY_REPO_ONION}/debian-security ${DEBIAN_VERSION}/updates main";
      echo "deb tor+http://${DEBIAN_REPO_ONION}/debian ${DEBIAN_VERSION}-backports main";
      echo "deb-src tor+http://${DEBIAN_REPO_ONION}/debian ${DEBIAN_VERSION}-backports main"; } > "$rootdir/etc/apt/sources.list"
}

function image_create_tor_repo_sources {
    if [[ "$ONION_ONLY" == 'no' ]]; then
        return
    fi

    rm -rf /var/lib/apt/lists/*
    $CLEAN_PACKAGES
    INSTALL_PACKAGES apt-transport-tor
    create_tor_package_sources
    $UPDATE_PACKAGES
}

function raspbian_add_backports {
    if [ -f /proc/device-tree/model ]; then
        if ! grep -q 'Raspberry' /proc/device-tree/model; then
            return
        fi
    fi
    if ! grep -q "${DEBIAN_VERSION}-backports" /etc/apt/sources.list; then
        echo "deb http://${DEBIAN_REPO}/debian ${DEBIAN_VERSION}-backports main contrib" >> /etc/apt/sources.list
        gpg_recv_key hkps://keyserver.ubuntu.com 04EE7237B7D453EC
        gpg_recv_key hkps://keyserver.ubuntu.com 648ACFD622F3D138
    fi
}

function create_tor_repo_sources {
    # Use of tor repos currently seems flaky, with packages often unavailable or returning errors
    if [[ $(is_completed "${FUNCNAME[0]}") == "1" ]]; then
        regenerate_tor_package_repos=
        if ! grep -q "http://$DEBIAN_REPO_ONION" /etc/apt/sources.list; then
            regenerate_tor_package_repos=1
        fi
        if ! grep -q "http://$DEBIAN_SECURITY_REPO_ONION" /etc/apt/sources.list; then
            regenerate_tor_package_repos=1
        fi
        if [ $regenerate_tor_package_repos ]; then
            echo $'Updating sources.list with onion based repos'
            INSTALL_PACKAGES apt-transport-tor
            create_tor_package_sources
            $UPDATE_PACKAGES
        fi
        return
    fi
    rm -rf /var/lib/apt/lists/*
    $CLEAN_PACKAGES

    if [ -f /etc/apt/sources.list ]; then
        # if this is raspbian then skip the replacement and hope for the best
        if [ -f /proc/device-tree/model ]; then
            if grep -q 'Raspberry' /proc/device-tree/model; then
                # raspbian_add_backports
                $UPDATE_PACKAGES
                INSTALL_PACKAGES apt-transport-tor
                mark_completed "${FUNCNAME[0]}"
                return
            fi
        fi
    fi

    INSTALL_PACKAGES apt-transport-tor
    create_tor_package_sources
    $UPDATE_PACKAGES
    mark_completed "${FUNCNAME[0]}"
}

function create_repo_sources {
    if grep -q "security.debian.org/ " /etc/apt/sources.list; then
  sed -i "s|security.debian.org/ .*|deb.debian.org/debian-security ${DEBIAN_VERSION}-security main contrib|g" /etc/apt/sources.list
    fi
    if grep -q "# deb https://deb.debian.org/debian-security" /etc/apt/sources.list; then
  sed -i "s|# deb https://deb.debian.org/debian-security|deb https://deb.debian.org/debian-security|g" /etc/apt/sources.list
    fi
    #if [[ "$ONION_ONLY" != 'no' ]]; then
    #    create_tor_repo_sources
    #    return
    #fi

    if [[ $(is_completed "${FUNCNAME[0]}") == "1" ]]; then
        return
    fi
    rm -rf /var/lib/apt/lists/*
    $CLEAN_PACKAGES

    if [ -f /etc/apt/sources.list ]; then
        # if this is raspbian then skip the replacement and hope for the best
        if [ -f /proc/device-tree/model ]; then
            if grep -q 'Raspberry' /proc/device-tree/model; then
                # raspbian_add_backports
                $UPDATE_PACKAGES
                INSTALL_PACKAGES apt-transport-https
                mark_completed "${FUNCNAME[0]}"
                return
            fi
        fi
    fi

    if [ ! -f /etc/apt/sources.list.old ]; then
  # keep a copy of the original sources
  cp /etc/apt/sources.list /etc/apt/sources.list.old
    fi
    { echo "deb http://${DEBIAN_REPO}/debian/ ${DEBIAN_VERSION} main contrib";
      echo "deb-src http://${DEBIAN_REPO}/debian/ ${DEBIAN_VERSION} main contrib";
      echo '';
      echo "deb https://deb.debian.org/debian-security bullseye-security main contrib";
      echo "deb-src https://deb.debian.org/debian-security bullseye-security main contrib";
      echo '';
      echo "deb http://${DEBIAN_REPO}/debian/ ${DEBIAN_VERSION}-updates main contrib";
      echo "deb-src http://${DEBIAN_REPO}/debian/ ${DEBIAN_VERSION}-updates main contrib";
      echo '';
      echo "# deb http://${DEBIAN_REPO}/debian/ ${DEBIAN_VERSION}-backports main contrib";
      echo "# deb-src http://${DEBIAN_REPO}/debian/ ${DEBIAN_VERSION}-backports main contrib"; } > /etc/apt/sources.list

    $UPDATE_PACKAGES
    INSTALL_PACKAGES apt-transport-https
    mark_completed "${FUNCNAME[0]}"
}

# A command to create a git repository for a project
function create_git_project {
    if [[ $(is_completed "${FUNCNAME[0]}") == "1" ]]; then
        return
    fi
    INSTALL_PACKAGES git

    { echo '#!/bin/bash';
      echo '';
      echo "GIT_PROJECT_NAME=\$1";
      echo "if [ ! \$GIT_PROJECT_NAME ]; then";
      echo '  echo "Please specify a project name, without any spaces"';
      echo '  exit 1';
      echo 'fi';
      echo '';
      echo "if [ ! -d /home/\$USER/projects/\$GIT_PROJECT_NAME ]; then";
      echo "  mkdir -p /home/\$USER/projects/\$GIT_PROJECT_NAME";
      echo 'fi';
      echo '';
      echo "cd /home/\$USER/projects/\$GIT_PROJECT_NAME";
      echo 'git init --bare';
      echo '';
      echo -n 'echo "Your project has been created, ';
      echo 'use the following command to clone the repository"';
      echo -n "  git clone ssh://$MY_USERNAME@$DEFAULT_DOMAIN_NAME:$SSH_PORT";
      echo "/home/\$USER/projects/\$GIT_PROJECT_NAME";
      echo '';
      echo 'exit 0'; } > "/usr/bin/$CREATE_GIT_PROJECT_COMMAND"
    chmod +x "/usr/bin/$CREATE_GIT_PROJECT_COMMAND"

    mark_completed "${FUNCNAME[0]}"
}

# NOTE: deliberately no exit 0
