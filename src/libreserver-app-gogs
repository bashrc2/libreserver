#!/bin/bash
#  _    _ _            ___                      
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _ 
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|  
#
# Gogs functions
#
# License
# =======
#
# Copyright (C) 2014-2021 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VARIANTS='developer'

APP_CATEGORY=organization

IN_DEFAULT_INSTALL=0
SHOW_ON_ABOUT=1
REQUIRES_APP=

GOGS_USERNAME='gogs'
GOGS_VERSION='0.12.3'

GOGS_DOMAIN_NAME=
GOGS_CODE=
GOGS_ONION_PORT=8090
GOGS_ADMIN_PASSWORD=
GOGS_BIN=
GOGS_PORT=3145

GOGS_SHORT_DESCRIPTION=$'Git repo management'
GOGS_DESCRIPTION=$'Git repo management'
GOGS_MOBILE_APP_URL=

gogs_os_type='linux'

gogs_variables=(ONION_ONLY
                GOGS_DOMAIN_NAME
                GOGS_CODE
                MY_USERNAME
                DDNS_PROVIDER
                ARCHITECTURE)

function upgrade_distro_gogs {
    target_distro="$1"

    if [[ "$target_distro" == 'bullseye' ]]; then
        echo -n ''
    fi
}

function gogs_setting_registration {
    allow_registrations="$1"
    gogs_ini_filename=/home/gogs/custom/conf/app.ini

    if [[ "$allow_registrations" == '1' ]]; then
        sed -i "s|DISABLE_REGISTRATION =.*|DISABLE_REGISTRATION = false|g" ${gogs_ini_filename}
        sed -i "s|SHOW_REGISTRATION_BUTTON =.*|SHOW_REGISTRATION_BUTTON = true|g" ${gogs_ini_filename}
        systemctl restart gogs
    fi

    if [[ "$allow_registrations" == '0' ]]; then
        sed -i "s|DISABLE_REGISTRATION =.*|DISABLE_REGISTRATION = true|g" ${gogs_ini_filename}
        sed -i "s|SHOW_REGISTRATION_BUTTON =.*|SHOW_REGISTRATION_BUTTON = false|g" ${gogs_ini_filename}
        systemctl restart gogs
    fi
}

function gogs_turn_off_registrations {
    gogs_ini_filename=/home/gogs/custom/conf/app.ini
    { echo '#!/bin/bash';
      echo "if ! grep -q 'DISABLE_REGISTRATION = true' ${gogs_ini_filename}; then";
      echo "  sed -i 's|DISABLE_REGISTRATION =.*|DISABLE_REGISTRATION = true|g' ${gogs_ini_filename}";
      echo "  sed -i 's|SHOW_REGISTRATION_BUTTON =.*|SHOW_REGISTRATION_BUTTON = false|g' ${gogs_ini_filename}";
      echo '  systemctl restart gogs';
      echo 'fi'; } > /etc/cron.weekly/gogs-registrations
    chmod +x /etc/cron.weekly/gogs-registrations
}

function logging_on_gogs {
    echo -n ''
}

function logging_off_gogs {
    echo -n ''
}

function change_password_gogs {
    curr_username="$1"
    new_user_password="$2"
}

function install_interactive_gogs {
    if [[ $ONION_ONLY != "no" ]]; then
        GOGS_DOMAIN_NAME='gogs.local'
        write_config_param "GOGS_DOMAIN_NAME" "$GOGS_DOMAIN_NAME"
    else
        function_check interactive_site_details
        interactive_site_details git
    fi
    APP_INSTALLED=1
}

function configure_interactive_gogs {
    gogs_ini_filename=/home/gogs/custom/conf/app.ini
    dialog --title $"Gogs" \
           --backtitle $"LibreServer Control Panel" \
           --defaultno \
           --yesno $"\nAllow registration of new users?" 10 60
    sel=$?
    case $sel in
        0)
            sed -i "s|DISABLE_REGISTRATION =.*|DISABLE_REGISTRATION = false|g" ${gogs_ini_filename}
            sed -i "s|SHOW_REGISTRATION_BUTTON =.*|SHOW_REGISTRATION_BUTTON = true|g" ${gogs_ini_filename}
            ;;
        1)
            sed -i "s|DISABLE_REGISTRATION =.*|DISABLE_REGISTRATION = true|g" ${gogs_ini_filename}
            sed -i "s|SHOW_REGISTRATION_BUTTON =.*|SHOW_REGISTRATION_BUTTON = false|g" ${gogs_ini_filename}
            ;;
        255) return;;
    esac
    systemctl restart gogs
}

function gogs_parameters {
    if [[ ${ARCHITECTURE} == *"386" || ${ARCHITECTURE} == *"686" ]]; then
        CURR_ARCH=386
    fi
    if [[ ${ARCHITECTURE} == *"amd64" || ${ARCHITECTURE} == "x86_64" ]]; then
        CURR_ARCH=amd64
    fi
    if [[ ${ARCHITECTURE} == *"arm"* || ${ARCHITECTURE} == *"aarch"* ]]; then
        CURR_ARCH=armv7
        gogs_os_type=raspi
    fi
    if [ ! ${CURR_ARCH} ]; then
        echo $'No architecture specified'
        ARCHITECTURE=$(uname -m)
        if [[ ${ARCHITECTURE} == "arm"* || ${ARCHITECTURE} == *"aarch"* ]]; then
            CURR_ARCH=armv7
            gogs_os_type=raspi
            echo $"Using $CURR_ARCH"
        fi
        if [[ ${ARCHITECTURE} == "amd"* || ${ARCHITECTURE} == "x86_64" ]]; then
            CURR_ARCH=amd64
            echo $"Using $CURR_ARCH"
        fi
        if [[ ${ARCHITECTURE} == *"386" || ${ARCHITECTURE} == *"686" ]]; then
            CURR_ARCH=386
            echo $"Using $CURR_ARCH"
        fi
    fi

    GOGS_FILE=gogs_${GOGS_VERSION}_${gogs_os_type}_${CURR_ARCH}.tar.gz
    GOGS_BIN="https://dl.gogs.io/${GOGS_VERSION}/${GOGS_FILE}"
}

function gogs_create_database {
    if [ -f "${IMAGE_PASSWORD_FILE}" ]; then
        GOGS_ADMIN_PASSWORD="$(printf "%s" "$(cat "$IMAGE_PASSWORD_FILE")")"
    else
        if [ ! "${GOGS_ADMIN_PASSWORD}" ]; then
            GOGS_ADMIN_PASSWORD="$(create_password "${MINIMUM_PASSWORD_LENGTH}")"
        fi
    fi
    if [ ! "$GOGS_ADMIN_PASSWORD" ]; then
        return
    fi

    drop_database gogs

    function_check create_database
    create_database gogs "$GOGS_ADMIN_PASSWORD"
}

function reconfigure_gogs {
    echo -n ''
}

function upgrade_gogs {
    gogs_turn_off_registrations

    if ! grep -q 'gogs version:' "$COMPLETION_FILE"; then
        return
    fi

    GOGS_CONFIG_PATH=/home/${GOGS_USERNAME}/custom/conf
    GOGS_CONFIG_FILE=$GOGS_CONFIG_PATH/app.ini

    restart_gogs=
    if grep -q "DB_TYPE = " "${GOGS_CONFIG_FILE}"; then
	sed -i 's|DB_TYPE = |TYPE = |g' "${GOGS_CONFIG_FILE}"
	restart_gogs=1
    fi

    if grep -q "PASSWD = " "${GOGS_CONFIG_FILE}"; then
	sed -i 's|PASSWD = |PASSWORD = |g' "${GOGS_CONFIG_FILE}"
	restart_gogs=1
    fi

    if grep -q "ENABLE_CAPTCHA = " "${GOGS_CONFIG_FILE}"; then
	sed -i 's|ENABLE_CAPTCHA = |ENABLE_REGISTRATION_CAPTCHA = |g' "${GOGS_CONFIG_FILE}"
	restart_gogs=1
    fi

    if grep -q "PROVIDER = file" "${GOGS_CONFIG_FILE}"; then
	sed -i 's|PROVIDER = file|PROVIDER = memory|g' "${GOGS_CONFIG_FILE}"
	restart_gogs=1
    fi

    # Change port number if necessary
    if ! grep -q "HTTP_PORT = ${GOGS_PORT}" "${GOGS_CONFIG_FILE}"; then
        sed -i "s|HTTP_PORT =.*|HTTP_PORT = ${GOGS_PORT}|g" "${GOGS_CONFIG_FILE}"
        read_config_param GOGS_DOMAIN_NAME
        sed -i "s|proxy_pass .*|proxy_pass http://localhost:${GOGS_PORT};|g" "/etc/nginx/sites-available/${GOGS_DOMAIN_NAME}"
	restart_gogs=1
    fi

    if [ $restart_gogs ]; then
        systemctl restart gogs
        systemctl restart nginx
    fi

    CURR_GOGS_VERSION=$(get_completion_param "gogs version")
    echo "gogs current version: ${CURR_GOGS_VERSION}"
    echo "gogs app version: ${GOGS_VERSION}"
    if [[ "${CURR_GOGS_VERSION}" == "${GOGS_VERSION}" ]]; then
        return
    fi

    cp "$GOGS_CONFIG_FILE" "$INSTALL_DIR/gogs_config.ini"

    if [ -d "$INSTALL_DIR/gogs-repositories" ]; then
        rm -rf "$INSTALL_DIR/gogs-repositories"
    fi
    if [ -d /home/${GOGS_USERNAME}/gogs-repositories ]; then
        # shellcheck disable=SC2086
        mv /home/${GOGS_USERNAME}/gogs-repositories $INSTALL_DIR
    fi

    gogs_parameters
    echo "gogs binary upgrade: ${GOGS_BIN}"

    if [ ! -d "${INSTALL_DIR}" ]; then
        mkdir -p "${INSTALL_DIR}"
    fi
    cd "${INSTALL_DIR}" || exit 26
    if [ -d "${INSTALL_DIR}/gogs" ]; then
        rm -rf "${INSTALL_DIR}/gogs"
    fi
    GOGS_FILE=gogs_${GOGS_VERSION}_${gogs_os_type}_${CURR_ARCH}.tar.gz
    if [ ! -f ${GOGS_FILE} ]; then
        if [[ "$ONION_ONLY" == 'no' ]]; then
            wget ${GOGS_BIN}
        else
            torsocks wget ${GOGS_BIN}
            if [ ! -f ${GOGS_FILE} ]; then
                wget ${GOGS_BIN}
            fi
        fi
    fi
    if [ ! -f ${GOGS_FILE} ]; then
        GOGS_FILE=gogs_${GOGS_VERSION}_${gogs_os_type}_${CURR_ARCH}.zip
        GOGS_BIN="https://dl.gogs.io/${GOGS_VERSION}/${GOGS_FILE}"
        if [ ! -f ${GOGS_FILE} ]; then
            if [[ "$ONION_ONLY" == 'no' ]]; then
                wget ${GOGS_BIN}
            else
                torsocks wget ${GOGS_BIN}
                if [ ! -f ${GOGS_FILE} ]; then
                    wget ${GOGS_BIN}
                fi
            fi
        fi
        if [ ! -f ${GOGS_FILE} ]; then
            exit 37
        else
            INSTALL_PACKAGES unzip
            unzip -o ${GOGS_FILE}
        fi
    else
        tar -xzf "${INSTALL_DIR}/${GOGS_FILE}"
    fi
    if [ ! -d "${INSTALL_DIR}/gogs" ]; then
        exit 37
    fi
    rm -rf "/home/${GOGS_USERNAME:?}/"*
    cp -r "${INSTALL_DIR}/gogs/"* "/home/${GOGS_USERNAME}"
    if [ -f ${GOGS_FILE} ]; then
        rm ${GOGS_FILE}
    fi

    if [ ! -d ${GOGS_CONFIG_PATH} ]; then
        mkdir -p ${GOGS_CONFIG_PATH}
    fi

    cp "$INSTALL_DIR/gogs_config.ini" "$GOGS_CONFIG_FILE"
    if [ ! -f $GOGS_CONFIG_FILE ]; then
        echo $'Gogs ini file not upgraded'
        exit 87
    fi
    rm "$INSTALL_DIR/gogs_config.ini"
    if [ -d /home/${GOGS_USERNAME}/gogs-repositories ]; then
        rm -rf /home/${GOGS_USERNAME}/gogs-repositories
    fi
    if [ -d "$INSTALL_DIR/gogs-repositories" ]; then
        # shellcheck disable=SC2086
        mv $INSTALL_DIR/gogs-repositories /home/${GOGS_USERNAME}/gogs-repositories
    fi
    chown -R "${GOGS_USERNAME}":"${GOGS_USERNAME}" "/home/${GOGS_USERNAME}"

    sed -i "s|gogs version.*|gogs version:$GOGS_VERSION|g" "${COMPLETION_FILE}"
    systemctl restart mariadb
    systemctl restart gogs
}

function backup_local_gogs {
    if ! grep -q "gogs domain" "${COMPLETION_FILE}"; then
        return
    fi

    if [ ! -d "/home/${GOGS_USERNAME}/gogs-repositories" ]; then
        return
    fi

    echo $"Backing up gogs"

    function_check backup_database_to_usb
    backup_database_to_usb gogs

    function_check backup_directory_to_usb
    backup_directory_to_usb "/home/${GOGS_USERNAME}/custom" gogs
    backup_directory_to_usb "/home/${GOGS_USERNAME}/gogs-repositories" gogsrepos
    backup_directory_to_usb "/home/${GOGS_USERNAME}/.ssh" gogsssh

    echo $"Gogs backup complete"
}

function restore_local_gogs {
    if ! grep -q "gogs domain" "${COMPLETION_FILE}"; then
        return
    fi

    if [ ${#GOGS_DOMAIN_NAME} -gt 2 ]; then
        function_check gogs_create_database
        gogs_create_database

        GOGS_CONFIG_PATH="/home/${GOGS_USERNAME}/custom/conf"
        GOGS_CONFIG_FILE="${GOGS_CONFIG_PATH}/app.ini"

        function_check restore_database
        restore_database gogs "${GOGS_DOMAIN_NAME}"
        temp_restore_dir=/root/tempgogs
        if [ -d "${USB_MOUNT}/backup/gogs" ]; then
            echo $"Restoring Gogs settings"
            if [ ! -d $GOGS_CONFIG_PATH ]; then
                mkdir -p $GOGS_CONFIG_PATH
            fi
            if [ -d "/root/tempgogs/home/${GOGS_USERNAME}/custom" ]; then
                cp -r "/root/tempgogs/home/${GOGS_USERNAME}/custom/"* "/home/${GOGS_USERNAME}/custom/"
            else
                cp -r "/root/tempgogs/"* "/home/${GOGS_USERNAME}/custom/"
            fi
            # shellcheck disable=SC2181
            if [ ! "$?" = "0" ]; then
                function_check set_user_permissions
                set_user_permissions
                function_check backup_unmount_drive
                backup_unmount_drive
                exit 98
            fi
            echo $"Restoring Gogs repos"
            function_check restore_directory_from_usb
            restore_directory_from_usb "${temp_restore_dir}repos" gogsrepos
            if [ ! -d "/home/${GOGS_USERNAME}/gogs-repositories" ]; then
                mkdir "/home/${GOGS_USERNAME}/gogs-repositories"
            fi
            if [ -d "${temp_restore_dir}repos/home/${GOGS_USERNAME}/gogs-repositories" ]; then
                cp -r "${temp_restore_dir}repos/home/${GOGS_USERNAME}/gogs-repositories/"* "/home/${GOGS_USERNAME}/gogs-repositories/"
            else
                cp -r "${temp_restore_dir}repos/"* "/home/${GOGS_USERNAME}/gogs-repositories/"
            fi
            # shellcheck disable=SC2181
            if [ ! "$?" = "0" ]; then
                function_check set_user_permissions
                set_user_permissions
                function_check backup_unmount_drive
                backup_unmount_drive
                exit 67
            fi
            echo $"Restoring Gogs authorized_keys"
            function_check restore_directory_from_usb
            restore_directory_from_usb ${temp_restore_dir}ssh gogsssh
            if [ ! -d /home/${GOGS_USERNAME}/.ssh ]; then
                mkdir /home/${GOGS_USERNAME}/.ssh
            fi
            if [ -d ${temp_restore_dir}ssh/home/${GOGS_USERNAME}/.ssh ]; then
                cp -r ${temp_restore_dir}ssh/home/${GOGS_USERNAME}/.ssh/* /home/${GOGS_USERNAME}/.ssh/
            else
                cp -r ${temp_restore_dir}/* /home/${GOGS_USERNAME}/.ssh/
            fi
            # shellcheck disable=SC2181
            if [ ! "$?" = "0" ]; then
                function_check set_user_permissions
                set_user_permissions
                function_check backup_unmount_drive
                backup_unmount_drive
                exit 84
            fi
            rm -rf ${temp_restore_dir}
            rm -rf ${temp_restore_dir}repos
            rm -rf ${temp_restore_dir}ssh
            chown -R ${GOGS_USERNAME}:${GOGS_USERNAME} /home/${GOGS_USERNAME}
        fi

        MARIADB_PASSWORD=$("${PROJECT_NAME}-pass" -u root -a mariadb)
        sed -i "s|PASSWORD =.*|PASSWORD = $MARIADB_PASSWORD|g" ${GOGS_CONFIG_FILE}
        MARIADB_PASSWORD=
        systemctl restart gogs
    fi
}

function backup_remote_gogs {
    echo -n ''
}

function restore_remote_gogs {
    echo -n ''
}

function remove_gogs {
    if [ ${#GOGS_DOMAIN_NAME} -eq 0 ]; then
        return
    fi
    systemctl stop gogs
    systemctl disable gogs

    if [ -f /etc/cron.weekly/gogs-registrations ]; then
        rm /etc/cron.weekly/gogs-registrations
    fi

    nginx_dissite "${GOGS_DOMAIN_NAME}"
    remove_certs "${GOGS_DOMAIN_NAME}"
    if [ -d "/var/www/${GOGS_DOMAIN_NAME}" ]; then
        rm -rf "/var/www/${GOGS_DOMAIN_NAME}"
    fi
    if [ -f "/etc/nginx/sites-available/${GOGS_DOMAIN_NAME}" ]; then
        rm "/etc/nginx/sites-available/${GOGS_DOMAIN_NAME}"
    fi
    function_check drop_database
    drop_database gogs
    rm /etc/systemd/system/gogs.service
    systemctl daemon-reload
    rm -rf "/home/${GOGS_USERNAME:?}/"*
    remove_onion_service gogs ${GOGS_ONION_PORT} 9418
    remove_completion_param "install_gogs"
    sed -i '/gogs /d' "$COMPLETION_FILE"
    remove_backup_database_local gogs

    groupdel -f gogs
    userdel -r gogs

    function_check remove_ddns_domain
    remove_ddns_domain "$GOGS_DOMAIN_NAME"
}

function install_gogs {
    if [ ! "$GOGS_DOMAIN_NAME" ]; then
        return
    fi

    increment_app_install_progress

    adduser --disabled-login --gecos 'Gogs' $GOGS_USERNAME

    increment_app_install_progress

    if [ ! -d /home/$GOGS_USERNAME ]; then
        echo $"/home/$GOGS_USERNAME directory not created"
        exit 78
    fi

    increment_app_install_progress

    if ! grep -q "gogs:" /etc/group; then
        groupadd gogs
    fi

    increment_app_install_progress

    gogs_parameters

    increment_app_install_progress

    if [ ! -d "${INSTALL_DIR}" ]; then
        mkdir -p "${INSTALL_DIR}"
    fi
    cd "${INSTALL_DIR}" || exit 246
    if [ -d "$INSTALL_DIR/gogs" ]; then
        rm -rf "$INSTALL_DIR/gogs"
    fi
    GOGS_FILE="gogs_${GOGS_VERSION}_${gogs_os_type}_${CURR_ARCH}.tar.gz"
    if [ ! -f ${GOGS_FILE} ]; then
        if [[ "$ONION_ONLY" == 'no' ]]; then
            wget ${GOGS_BIN}
        else
            torsocks wget ${GOGS_BIN}
            if [ ! -f ${GOGS_FILE} ]; then
                wget ${GOGS_BIN}
            fi
        fi
    fi
    if [ ! -f ${GOGS_FILE} ]; then
        GOGS_FILE="gogs_${GOGS_VERSION}_${gogs_os_type}_${CURR_ARCH}.zip"
        GOGS_BIN="https://dl.gogs.io/${GOGS_VERSION}/${GOGS_FILE}"
        if [[ "$ONION_ONLY" == 'no' ]]; then
            wget ${GOGS_BIN}
        else
            torsocks wget ${GOGS_BIN}
            if [ ! -f ${GOGS_FILE} ]; then
                wget ${GOGS_BIN}
            fi
        fi
        if [ ! -f ${GOGS_FILE} ]; then
            exit 37
        else
            INSTALL_PACKAGES unzip
            unzip -o ${GOGS_FILE}
        fi
    else
        tar -xzf "${INSTALL_DIR}/${GOGS_FILE}"
    fi
    if [ ! -d "${INSTALL_DIR}/gogs" ]; then
        exit 37
    fi
    rm -rf "/home/${GOGS_USERNAME:?}/"*
    cp -r "${INSTALL_DIR}/gogs/"* "/home/${GOGS_USERNAME}"
    if [ -f ${GOGS_FILE} ]; then
        rm ${GOGS_FILE}
    fi

    if [ ! -f "/home/${GOGS_USERNAME}/gogs" ]; then
        echo 'Gogs binary not installed'
        exit 34
    fi

    increment_app_install_progress

    { echo "export GOROOT=/home/go";
      # shellcheck disable=SC2153
      echo "export GOPATH=\${GOROOT}/go${GO_VERSION}/bin";
      echo "export PATH=\$PATH:\$GOPATH"; } >> "/home/${GOGS_USERNAME}/.bashrc"
    chown -R ${GOGS_USERNAME}:${GOGS_USERNAME} /home/${GOGS_USERNAME}

    increment_app_install_progress

    function_check install_mariadb
    install_mariadb

    increment_app_install_progress

    function_check get_mariadb_password
    get_mariadb_password

    increment_app_install_progress

    function_check gogs_create_database
    gogs_create_database

    increment_app_install_progress

    if [ ! -f "/home/${GOGS_USERNAME}/scripts/mysql.sql" ]; then
        echo $'MySql template for Gogs was not found'
        exit 72
    fi

    chown -R ${GOGS_USERNAME}:${GOGS_USERNAME} /home/${GOGS_USERNAME}

    increment_app_install_progress

    { echo '[Unit]';
      echo 'Description=Gogs (Go Git Service)';
      echo 'After=syslog.target';
      echo 'After=network.target';
      echo 'After=mysqld.service';
      echo '';
      echo '[Service]';
      echo '#LimitMEMLOCK=infinity';
      echo '#LimitNOFILE=65535';
      echo 'Type=simple';
      echo 'User=gogs';
      echo 'Group=gogs';
      echo "WorkingDirectory=/home/${GOGS_USERNAME}";
      echo "ExecStart=/home/${GOGS_USERNAME}/gogs web";
      echo 'Restart=always';
      echo 'RestartSec=10';
      echo "Environment=\"USER=${GOGS_USERNAME}\" \"HOME=/home/${GOGS_USERNAME}\" \"GOPATH=/home/go/go${GO_VERSION}\"";
      echo 'PrivateTmp=true';
      echo 'PrivateDevices=false';
      echo 'CapabilityBoundingSet=~CAP_SYS_ADMIN';
      echo 'ProtectSystem=yes';
      echo 'ProtectHome=no';
      echo 'ProtectClock=yes';
      echo 'ProtectHostname=yes';
      echo 'PrivateUsers=yes';
      echo 'ProtectKernelModules=yes';
      echo 'ProtectKernelTunables=yes';
      echo 'NoNewPrivileges=true';
      echo '';
      echo '[Install]';
      echo 'WantedBy=multi-user.target'; } > /etc/systemd/system/gogs.service

    increment_app_install_progress

    systemctl enable gogs
    systemctl daemon-reload
    systemctl start gogs

    increment_app_install_progress

    if [ ! -d "/var/www/${GOGS_DOMAIN_NAME}" ]; then
        mkdir "/var/www/${GOGS_DOMAIN_NAME}"
    fi
    if [ -d "/var/www/${GOGS_DOMAIN_NAME}/htdocs" ]; then
        rm -rf "/var/www/${GOGS_DOMAIN_NAME}/htdocs"
    fi

    GIT_ONION_HOSTNAME=$(cat /var/lib/tor/hidden_service_gogs/hostname)

    increment_app_install_progress

    if [[ "${ONION_ONLY}" == "no" ]]; then
        function_check nginx_http_redirect
        nginx_http_redirect "${GOGS_DOMAIN_NAME}"
        { echo 'server {';
          echo '    listen 443 ssl;';
          echo '    #listen [::]:443 ssl;';
          echo "    root /var/www/${GOGS_DOMAIN_NAME}/htdocs;";
          echo "    server_name ${GOGS_DOMAIN_NAME};";
          echo '    access_log /dev/null;';
          echo "    error_log /dev/null;";
          echo ''; } >> "/etc/nginx/sites-available/${GOGS_DOMAIN_NAME}"
        function_check nginx_ssl
        nginx_ssl "${GOGS_DOMAIN_NAME}"
        function_check nginx_security_options
        nginx_security_options "${GOGS_DOMAIN_NAME}"
        nginx_robots "${GOGS_DOMAIN_NAME}"
        { echo '    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;';
          echo "    add_header Onion-Location http://${GIT_ONION_HOSTNAME}\$request_uri;";
          echo '';
          echo '    location / {'; } >> "/etc/nginx/sites-available/${GOGS_DOMAIN_NAME}"
        function_check nginx_limits
        nginx_limits "${GOGS_DOMAIN_NAME}" '10G'
        { echo "        proxy_pass http://localhost:${GOGS_PORT};";
          echo '    }';
          echo '';
          echo '    fastcgi_buffers 64 4K;';
          echo '';
          echo '    error_page 403 /core/templates/403.php;';
          echo '    error_page 404 /core/templates/404.php;';
          echo '';
          echo '    location = /robots.txt {';
          echo '        allow all;';
          echo '        log_not_found off;';
          echo '        access_log /dev/null;';
          echo '    }';
          echo '}';
          echo ''; } >> "/etc/nginx/sites-available/${GOGS_DOMAIN_NAME}"
    else
        echo -n '' > "/etc/nginx/sites-available/${GOGS_DOMAIN_NAME}"
    fi
    { echo 'server {';
      echo "    listen 127.0.0.1:${GOGS_ONION_PORT} default_server;";
      echo '    port_in_redirect off;';
      echo "    root /var/www/$GOGS_DOMAIN_NAME/htdocs;";
      echo "    server_name $GOGS_DOMAIN_NAME;";
      echo '    access_log /dev/null;';
      echo "    error_log /dev/null;";
      echo ''; } >> "/etc/nginx/sites-available/${GOGS_DOMAIN_NAME}"
    function_check nginx_security_options
    nginx_security_options "${GOGS_DOMAIN_NAME}"
    { echo '    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;';
      echo '';
      echo '    location / {'; } >> "/etc/nginx/sites-available/${GOGS_DOMAIN_NAME}"
    function_check nginx_limits
    nginx_limits "${GOGS_DOMAIN_NAME}" '10G'
    { echo "        proxy_pass http://localhost:${GOGS_PORT};";
      echo '    }';
      echo '';
      echo '    fastcgi_buffers 64 4K;';
      echo '';
      echo '    error_page 403 /core/templates/403.php;';
      echo '    error_page 404 /core/templates/404.php;';
      echo '';
      echo '    location = /robots.txt {';
      echo '        allow all;';
      echo '        log_not_found off;';
      echo '        access_log /dev/null;';
      echo '    }';
      echo '}'; } >> "/etc/nginx/sites-available/${GOGS_DOMAIN_NAME}"

    function_check configure_php
    configure_php

    increment_app_install_progress

    function_check create_site_certificate
    create_site_certificate "${GOGS_DOMAIN_NAME}" 'yes'

    increment_app_install_progress

    nginx_ensite "${GOGS_DOMAIN_NAME}"

    if [ ! -d /var/lib/tor ]; then
        echo $'No Tor installation found. Gogs onion site cannot be configured.'
        exit 87
    fi
    if ! grep -q "hidden_service_gogs" "$ONION_SERVICES_FILE"; then
        { echo 'HiddenServiceDir /var/lib/tor/hidden_service_gogs/';
          echo 'HiddenServiceVersion 3';
          echo "HiddenServicePort 80 127.0.0.1:${GOGS_ONION_PORT}";
          echo "HiddenServicePort 9418 127.0.0.1:9418"; } >> "$ONION_SERVICES_FILE"
        echo $'Added onion site for Gogs'
    fi

    onion_update

    increment_app_install_progress

    function_check wait_for_onion_service
    wait_for_onion_service 'gogs'

    systemctl restart mariadb

    increment_app_install_progress

    # shellcheck disable=SC2086
    systemctl restart php${PHP_VERSION}-fpm

    increment_app_install_progress

    systemctl restart nginx

    set_completion_param "gogs domain" "$GOGS_DOMAIN_NAME"
    set_completion_param "gogs onion domain" "$GIT_ONION_HOSTNAME"

    function_check add_ddns_domain
    add_ddns_domain "${GOGS_DOMAIN_NAME}"

    # obtain the secret key
    GOGS_SECRET_KEY="$(create_password "${MINIMUM_PASSWORD_LENGTH}")"
    "${PROJECT_NAME}-pass" -u "$MY_USERNAME" -a gogs -p "*"

    # create the configuration
    GOGS_CONFIG_PATH="/home/${GOGS_USERNAME}/custom/conf"
    if [ ! -d ${GOGS_CONFIG_PATH} ]; then
        mkdir -p ${GOGS_CONFIG_PATH}
    fi
    GOGS_CONFIG_FILE=${GOGS_CONFIG_PATH}/app.ini
    # see https://github.com/gogs/gogs/blob/main/conf/app.ini
    { echo "BRAND_NAME = ${PROJECT_NAME}";
      echo "RUN_USER = $GOGS_USERNAME";
      echo 'RUN_MODE = prod';
      echo '';
      echo '[auth]';
      echo 'ACTIVATE_CODE_LIVES = 180';
      echo 'RESET_PASSWORD_CODE_LIVES = 180';
      echo 'REQUIRE_EMAIL_CONFIRMATION = false';
      echo 'REQUIRE_SIGNIN_VIEW = false';
      echo 'DISABLE_REGISTRATION = false';
      echo 'ENABLE_REGISTRATION_CAPTCHA = false';
      echo 'ENABLE_REVERSE_PROXY_AUTHENTICATION = false';
      echo 'ENABLE_REVERSE_PROXY_AUTO_REGISTRATION = false';
      echo 'REVERSE_PROXY_AUTHENTICATION_HEADER = X-WEBAUTH-USER';
      echo '';
      echo '[repository]';
      echo "ROOT = /home/$GOGS_USERNAME/gogs-repositories";
      echo 'SCRIPT_TYPE = bash';
      echo '; ANSI_CHARSET =';
      echo 'FORCE_PRIVATE = false';
      echo 'MAX_CREATION_LIMIT = -1';
      echo 'PREFERRED_LICENSES = GNU Affero General Public License v3.0, GNU General Public License v3.0';
      echo 'DISABLE_HTTP_GIT = false';
      echo 'ENABLE_LOCAL_PATH_MIGRATION = false';
      echo 'ENABLE_RAW_FILE_RENDER_MODE = false';
      echo 'COMMITS_FETCH_CONCURRENCY = 0';
      echo '';
      echo '[repository.editor]';
      echo 'LINE_WRAP_EXTENSIONS = .txt,.md,.markdown,.mdown,.mkd';
      echo 'PREVIEWABLE_FILE_MODES = markdown';
      echo '';
      echo '[repository.upload]';
      echo 'ENABLED = true';
      echo 'TEMP_PATH = data/tmp/uploads';
      echo 'ALLOWED_TYPES = "image/jpeg|image/png|image/gif"';
      echo 'FILE_MAX_SIZE = 3';
      echo 'MAX_FILES = 5';
      echo '';
      echo '[database]';
      echo 'TYPE = mysql';
      echo 'HOST = 127.0.0.1:3306';
      echo 'NAME = gogs';
      echo 'USER = root';
      echo "PASSWORD = $MARIADB_PASSWORD";
      echo 'SSL_MODE = disable';
      echo 'PATH = data/gogs.db';
      echo 'MAX_OPEN_CONNS = 30';
      echo 'MAX_IDLE_CONNS = 30';
      echo '';
      echo '[server]'; } >> ${GOGS_CONFIG_FILE}
    if [[ ${ONION_ONLY} == 'no' ]]; then
        echo "DOMAIN = ${GOGS_DOMAIN_NAME}" >> ${GOGS_CONFIG_FILE}
        echo "LOCAL_ROOT_URL = https://$GOGS_DOMAIN_NAME/" >> ${GOGS_CONFIG_FILE}
    else
        echo "DOMAIN = ${GIT_ONION_HOSTNAME}" >> ${GOGS_CONFIG_FILE}
        echo "LOCAL_ROOT_URL = http://$GOGS_DOMAIN_NAME/" >> ${GOGS_CONFIG_FILE}
    fi
    { echo "HTTP_PORT = ${GOGS_PORT}";
      echo "SSH_PORT = $SSH_PORT";
      echo 'SSH_DOMAIN = %(DOMAIN)s';
      echo "CERT_FILE = /etc/ssl/certs/${GOGS_DOMAIN_NAME}.pem";
      echo "KEY_FILE = /etc/ssl/private/${GOGS_DOMAIN_NAME}.key";
      echo 'DISABLE_ROUTER_LOG = true';
      echo 'TLS_MIN_VERSION = TLS12';
      echo 'UNIX_SOCKET_PERMISSION = 666';
      echo '';
      echo '[session]';
      echo 'PROVIDER = memory';
      echo 'PROVIDER_CONFIG = memory';
      echo "COOKIE_NAME = ${PROJECT_NAME}_gogs";
      echo 'COOKIE_SECURE = false';
      echo 'GC_INTERVAL = 3600';
      echo 'MAX_LIFE_TIME = 86400';
      echo 'CSRF_COOKIE_NAME = _csrf';
      echo '';
      echo '[cache]';
      echo 'ADAPTER = memory';
      echo 'INTERVAL = 60';
      echo '';
      echo '[git.timeout]';
      echo 'MIGRATE = 600';
      echo 'MIRROR = 300';
      echo 'CLONE = 300';
      echo 'PULL = 300';
      echo 'DIFF = 60';
      echo 'GC = 60';
      echo '';
      echo '[log]';
      echo 'MODE = file';
      echo 'LEVEL = Info';
      echo '';
      echo '[log.file]';
      echo 'LOG_ROTATE = true';
      echo 'DAILY_ROTATE = true';
      echo 'MAX_SIZE_SHIFT = 28';
      echo 'MAX_LINES = 10000';
      echo 'MAX_DAYS = 3';
      echo '';
      echo '[git.timeout]';
      echo 'MIGRATE = 6000';
      echo 'MIRROR = 3000';
      echo 'CLONE = 3000';
      echo 'PULL = 300';
      echo 'DIFF = 60';
      echo 'GC = 60';
      echo '';
      echo '[ui]';
      echo 'EXPLORE_PAGING_NUM = 10';
      echo 'ISSUE_PAGING_NUM = 10';
      echo 'FEED_MAX_COMMIT_NUM = 5';
      echo 'THEME_COLOR_META_TAG = `#ff5343`';
      echo 'MAX_DISPLAY_FILE_SIZE = 8388608';
      echo '';
      echo '[mirror]';
      echo 'DEFAULT_INTERVAL = 8';
      echo '';
      echo '[webhook]';
      echo 'TYPES = gogs';
      echo 'DELIVER_TIMEOUT = 30';
      echo 'SKIP_TLS_VERIFY = false';
      echo 'PAGING_NUM = 10';
      echo '';
      echo '[picture]';
      echo 'AVATAR_UPLOAD_PATH = data/avatars';
      echo 'REPOSITORY_AVATAR_UPLOAD_PATH = data/repo-avatars';
      echo 'GRAVATAR_SOURCE = gravatar';
      echo 'DISABLE_GRAVATAR = true';
      echo 'ENABLE_FEDERATED_AVATAR = true';
      echo '';
      echo '[security]';
      echo 'INSTALL_LOCK = true';
      echo "SECRET_KEY = $GOGS_SECRET_KEY";
      echo 'LOGIN_REMEMBER_DAYS = 7';
      echo 'COOKIE_REMEMBER_NAME = gogs_incredible';
      echo 'COOKIE_USERNAME = gogs_awesome';
      echo 'COOKIE_SECURE = false';
      echo 'ENABLE_LOGIN_STATUS_COOKIE = false';
      echo 'LOGIN_STATUS_COOKIE_NAME = login_status';
      echo '';
      echo '[service]';
      echo 'DISABLE_REGISTRATION = false';
      echo 'SHOW_REGISTRATION_BUTTON = true';
      echo 'REQUIRE_SIGNIN_VIEW = false';
      echo 'ENABLE_REGISTRATION_CAPTCHA = false';
      echo '';
      echo '[other]';
      echo 'SHOW_FOOTER_BRANDING = false';
      echo 'SHOW_FOOTER_VERSION = false'; } >> ${GOGS_CONFIG_FILE}

    chmod 750 ${GOGS_CONFIG_FILE}
    chown -R "${GOGS_USERNAME}":"${GOGS_USERNAME}" "/home/${GOGS_USERNAME}"

    increment_app_install_progress

    systemctl restart gogs

    sleep 6

    increment_app_install_progress

    if [ ! -f "/home/${GOGS_USERNAME}/scripts/mysql.sql" ]; then
        echo "/home/${GOGS_USERNAME}/scripts/mysql.sql not found"
        exit 83
    fi

    function_check initialise_database
    initialise_database gogs "/home/${GOGS_USERNAME}/scripts/mysql.sql"

    gogs_turn_off_registrations

    increment_app_install_progress

    systemctl restart gogs

    increment_app_install_progress

    if ! grep -q "gogs domain:" "${COMPLETION_FILE}"; then
        echo "gogs domain:${GOGS_DOMAIN_NAME}" >> "${COMPLETION_FILE}"
    else
        sed -i "s|gogs domain.*|gogs domain:${GOGS_DOMAIN_NAME}|g" "${COMPLETION_FILE}"
    fi

    function_check configure_firewall_for_git
    configure_firewall_for_git

    if ! grep -q "gogs version:" "${COMPLETION_FILE}"; then
        echo "gogs version:${GOGS_VERSION}" >> "${COMPLETION_FILE}"
    else
        sed -i "s|gogs version.*|gogs version:${GOGS_VERSION}|g" "${COMPLETION_FILE}"
    fi

    APP_INSTALLED=1
}

# NOTE: deliberately no exit 0
