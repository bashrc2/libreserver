#!/bin/bash
#  _    _ _            ___                      
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _ 
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|  
#
# FICS chess server
#
# License
# =======
#
# Copyright (C) 2021 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VARIANTS='full full-vim full-micro games'

APP_CATEGORY=games

IN_DEFAULT_INSTALL=0
SHOW_ON_ABOUT=1
SHOW_DOMAIN_ONLY=1
SHOW_APP_PORT=5000
NOT_ON_HOMEPAGE=1
REQUIRES_APP=

CHESS_DOMAIN_NAME=
CHESS_CODE=

CHESS_REPO="https://gitlab.com/bashrc2/chessd"
CHESS_COMMIT='c28deda95405860bef7f01297d5ded197255c099'

CHESS_PORT=5000

CHESS_DIR=/var/games/chessd

CHESS_SHORT_DESCRIPTION=$'Free Internet Chess Server'
CHESS_DESCRIPTION=$'Free Internet Chess Server'
CHESS_MOBILE_APP_URL=""

chess_variables=(ONION_ONLY
		 SYSTEM_TYPE
                 MY_USERNAME)

function chess_send_emails {
    { echo '#!/bin/bash';
      echo "cd ${CHESS_DIR} || exit 0";
      echo 'for emailFile in spool/mail.*; do';
      echo "    if /usr/sbin/sendmail -t < \"\$emailFile\"; then";
      echo "        rm -f \"\$emailFile\"";
      echo '    fi';
      echo 'done'; } > /usr/bin/send-chess-emails
    chmod +x /usr/bin/send-chess-emails
    cron_add_mins 2 /usr/bin/send-chess-emails
}

function upgrade_distro_chess {
    target_distro="$1"

    if [[ "$target_distro" == 'bookworm' ]]; then
        echo -n ''
    fi
}

function logging_on_chess {
    echo -n ''
}

function logging_off_chess {
    echo -n ''
}

function install_interactive_chess {
    echo -n ''
    APP_INSTALLED=1
}

function reconfigure_chess {
    echo -n ''
}

function upgrade_chess {
    chess_send_emails

    CURR_CHESS_COMMIT=$(get_completion_param "chess commit")
    if [[ "$CURR_CHESS_COMMIT" == "$CHESS_COMMIT" ]]; then
	return
    fi
    function_check set_repo_commit
    set_repo_commit "$INSTALL_DIR/chess" "chess commit" "$CHESS_COMMIT" "$CHESS_REPO"
    cd "$INSTALL_DIR/chess/src" || exit 73
    if [ -f "$INSTALL_DIR/chess/src/parsers/parse_info.h" ]; then
	rm "$INSTALL_DIR/chess/src/parsers/parse_info.h"
    fi
    ./configure --prefix=/var/games
    make clean
    if [ -f "$CHESS_DIR/bin/chessd" ]; then
	mv "$CHESS_DIR/bin/chessd" "$CHESS_DIR/bin/chessd_old"
    fi
    make
    make install
    if [ ! -f "$CHESS_DIR/bin/chessd" ]; then
	mv "$CHESS_DIR/bin/chessd_old" "$CHESS_DIR/bin/chessd"
    fi    
    chown -R chess:chess /var/games/chessd
    systemctl restart chess-server
}

function backup_local_chess {
    source_directory=$CHESS_DIR
    if [ -d $source_directory ]; then
        dest_directory=chess
        function_check backup_directory_to_usb
        backup_directory_to_usb $source_directory $dest_directory
    fi
}

function restore_local_chess {
    if [ -d $CHESS_DIR ]; then
        if [ -d "$USB_MOUNT_CHESS/backup/chess" ]; then
            echo $"Restoring chess"
            temp_restore_dir=/root/tempchess
            function_check restore_directory_from_usb
            restore_directory_from_usb $temp_restore_dir chess
            if [ -d $temp_restore_dir$CHESS_DIR ]; then
                cp -r $temp_restore_dir$CHESS_DIR/* $CHESS_DIR/
            else
                cp -r $temp_restore_dir/* $CHESS_DIR/
            fi
	    chown -R games:games "$CHESS_DIR"
            # shellcheck disable=SC2181
            if [ ! "$?" = "0" ]; then
                rm -rf $temp_restore_dir
                function_check set_user_permissions
                set_user_permissions
                function_check backup_unmount_drive
                backup_unmount_drive
                exit 99
            fi
            rm -rf $temp_restore_dir
        fi
    fi
}

function backup_remote_chess {
    echo -n ''
}

function restore_remote_chess {
    echo -n ''
}

function remove_chess {
    systemctl stop chess-server
    systemctl disable chess-server
    rm /etc/systemd/system/chess-server.service

    sed -i '/send-chess-emails/d' /etc/crontab
    rm /usr/bin/send-chess-emails
    
    remove_onion_service chess ${CHESS_PORT}

    remove_app chess
    remove_completion_param install_chess
    sed -i '/chess/d' "$COMPLETION_FILE"

    if [ -d /var/www/chess ]; then
        rm -rf /var/www/chess
    fi
    if [ -d $CHESS_DIR ]; then
        rm -rf $CHESS_DIR
    fi
    if [ -d "$INSTALL_DIR/chess" ]; then
        rm -rf "$INSTALL_DIR/chess"
    fi
    firewall_remove ${CHESS_PORT}
    groupdel -f chess
    userdel -r chess
}

function install_chess {
    if [ -f /etc/chess/settings ]; then
        remove_chess
    fi

    INSTALL_PACKAGES build-essential gcc-12-multilib
    INSTALL_PACKAGES telnet
    
    increment_app_install_progress

    if ! grep -q "chess:" /etc/group; then
	groupadd chess
    fi
    useradd -c "FICS Chess Server" -d "$CHESS_DIR" -m -r -g chess chess

    increment_app_install_progress

    if [ ! -d /var/games ]; then
	mkdir /var/games
    fi
    
    if [ -d /var/www/chess ]; then
        rm -rf /var/www/chess
    fi
    mkdir -p /var/www/chess/htdocs

    increment_app_install_progress

    chown -R www-data:www-data /var/www/chess/htdocs

    increment_app_install_progress

    if [ -d "$INSTALL_DIR/chess" ]; then
	rm -rf "$INSTALL_DIR/chess"
    fi
    git_clone "$CHESS_REPO" "$INSTALL_DIR/chess"
    increment_app_install_progress
    cd "$INSTALL_DIR/chess" || exit 71
    git checkout "$CHESS_COMMIT" -b "$CHESS_COMMIT"
    increment_app_install_progress
    if [ ! -d "$INSTALL_DIR/chess/src" ]; then
	echo "clone failed for chessd"
	exit 72	
    fi
    cd "$INSTALL_DIR/chess/src" || exit 73
    if [ -f "$INSTALL_DIR/chess/src/parsers/parse_info.h" ]; then
	rm "$INSTALL_DIR/chess/src/parsers/parse_info.h"
    fi
    ./configure --prefix=/var/games
    increment_app_install_progress
    if [[ "$(uname -m)" == 'arm'* ]]; then
	sed -i 's|-m32|-mbe32|g' Makefile
    fi
    increment_app_install_progress
    make
    increment_app_install_progress
    make install
    if [ ! -f "$CHESS_DIR/bin/chessd" ]; then
	echo "Failed to build chessd"
	exit 75
    fi

    increment_app_install_progress

    CHESS_ONION_HOSTNAME=$(add_onion_service chess ${CHESS_PORT} ${CHESS_PORT})
    
    increment_app_install_progress
    
    firewall_add chess ${CHESS_PORT}

    chown -R chess:chess /var/games/chessd
    
    increment_app_install_progress

    { echo '[Unit]';
      echo 'Description=FICS Chess Server';
      echo 'After=network.target';
      echo '';
      echo '[Service]';
      echo 'Type=simple';
      echo 'User=chess';
      echo 'Group=chess';
      echo "WorkingDirectory=$CHESS_DIR";
      echo "ExecStart=/var/games/chessd/bin/chessd -f -p $CHESS_PORT";
      echo 'Restart=on-failure';
      echo 'RestartSec=10';
      echo 'PrivateTmp=true';
      echo 'PrivateDevices=false';
      echo 'NoNewPrivileges=true';
      echo 'CapabilityBoundingSet=~CAP_SYS_ADMIN';
      echo 'ProtectSystem=yes';
      echo 'ProtectHome=yes';
      echo 'CPUQuota=30%';
      echo 'ProtectClock=yes';
      echo 'ProtectHostname=yes';
      echo 'PrivateUsers=yes';
      echo 'ProtectKernelModules=yes';
      echo 'ProtectKernelTunables=yes';
      echo '';
      echo '[Install]';
      echo 'WantedBy=multi-user.target'; } > /etc/systemd/system/chess-server.service
    systemctl enable chess-server
    increment_app_install_progress
    systemctl daemon-reload
    increment_app_install_progress
    systemctl restart chess-server
    increment_app_install_progress

    set_completion_param "chess commit" "$CHESS_COMMIT"

    increment_app_install_progress

    chess_send_emails

    increment_app_install_progress

    APP_INSTALLED=1
}

# NOTE: deliberately no exit 0
