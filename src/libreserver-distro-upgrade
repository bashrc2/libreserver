#!/bin/bash
#  _    _ _            ___                      
# | |  (_) |__ _ _ ___/ __| ___ _ ___ _____ _ _ 
# | |__| | '_ \ '_/ -_)__ \/ -_) '_\ V / -_) '_|
# |____|_|_.__/_| \___|___/\___|_|  \_/\___|_|  
#
# Command to upgrade distro. eg. debian buster to bullseye
#
# License
# =======
#
# Copyright (C) 2019-2021 Bob Mottram <bob@libreserver.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

PROJECT_NAME='libreserver'

export TEXTDOMAIN=${PROJECT_NAME}-logging
export TEXTDOMAINDIR="/usr/share/locale"

source /usr/local/bin/${PROJECT_NAME}-vars

UTILS_FILES="/usr/share/${PROJECT_NAME}/utils/${PROJECT_NAME}-utils-*"
for f in $UTILS_FILES
do
    source "$f"
done

APP_FILES="/usr/share/${PROJECT_NAME}/apps/${PROJECT_NAME}-app-*"
for f in $APP_FILES
do
    source "$f"
done

function upgrade_debian_repos {
    $UPDATE_PACKAGES
    $UPGRADE_PACKAGES
    $UPGRADE_PACKAGES_DIST
    sed -i "s|stretch|$1|g" /etc/apt/sources.list
    sed -i '/backports/d' /etc/apt/sources.list
    $UPDATE_PACKAGES
    $UPGRADE_PACKAGES
    $UPGRADE_PACKAGES_DIST
}

function upgrade_apps_to_distro {
    target_distro="$1"
    FILES="/usr/share/${PROJECT_NAME}/apps/${PROJECT_NAME}-app-*"

    for filename in $FILES
    do
        app_name=$(echo "${filename}" | awk -F '-app-' '{print $2}')
        if grep -q "upgrade_distro_" "${filename}"; then
            # shellcheck disable=SC2086
            upgrade_distro_${app_name} "$target_distro"
        fi
    done
}

function upgrade_project_repo {
    target_distro="$1"
    cd /root/${PROJECT_NAME} || return
    git stash
    git checkout "$target_distro"
    git pull
    make install
}

function upgrade_unhold_packages {
    target_distro="$1"
    $PACKAGE_UNHOLD exim4
    $PACKAGE_UNHOLD nodejs
    if [ -d /etc/prosody ]; then
        $PACKAGE_UNHOLD prosody
    fi
}

function distro_upgrade_firewall {
    sed -i '/configure_firewall/d' "$COMPLETION_FILE"
    configure_firewall
}

function distro_upgrade_email {
    sed -i '/configure_email_i2p/d' "$COMPLETION_FILE"
    sed -i '/configure_email_onion/d' "$COMPLETION_FILE"
    sed -i '/install_email/d' "$COMPLETION_FILE"
    sed -i '/email_client/d' "$COMPLETION_FILE"
    sed -i '/email_archiving/d' "$COMPLETION_FILE"
    sed -i '/spam_filtering/d' "$COMPLETION_FILE"
    sed -i '/configure_imap/d' "$COMPLETION_FILE"
    sed -i '/configure_imap_client_certs/d' "$COMPLETION_FILE"
    install_email
}

target_distro="$1"
if [[ "$target_distro" == 'bullseye' ]]; then
    clear
    upgrade_unhold_packages "$target_distro"
    upgrade_debian_repos "$target_distro"
    upgrade_project_repo "$target_distro"
    distro_upgrade_firewall
    distro_upgrade_email
    upgrade_apps_to_distro "$target_distro"
    /usr/local/bin/${PROJECT_NAME}-upgrade
else
    echo $'Target distro name not specified. eg. "bullseye"'
    exit 1
fi

exit 0
